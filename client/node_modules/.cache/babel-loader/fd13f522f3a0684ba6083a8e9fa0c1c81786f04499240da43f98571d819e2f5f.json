{"ast":null,"code":"\"use strict\";\n\nconst {\n  mixin\n} = require(\"../../utils\");\nconst ElementImpl = require(\"./Element-impl\").implementation;\nconst MouseEvent = require(\"../generated/MouseEvent\");\nconst ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\nconst GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\nconst HTMLAndSVGElementSharedImpl = require(\"./HTMLAndSVGElementShared-impl\").implementation;\nconst {\n  isDisabled\n} = require(\"../helpers/form-controls\");\nclass HTMLElementImpl extends ElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._initHTMLAndSVGElement();\n    this._initElementCSSInlineStyle();\n    this._initGlobalEvents();\n    this._settingCssText = false;\n    this._clickInProgress = false;\n  }\n\n  // Add default event behavior (click link to navigate, click button to submit\n  // form, etc). We start by wrapping dispatchEvent so we can forward events to\n  // the element's default functions (only events that did not incur\n  // preventDefault).\n  dispatchEvent(event) {\n    if (event.type === \"click\") {\n      callEventBehaviorHook(event, \"_preClickActivationSteps\", this);\n    }\n    const outcome = super.dispatchEvent(event);\n    if (event.type === \"click\") {\n      if (event.defaultPrevented) {\n        callEventBehaviorHook(event, \"_canceledActivationSteps\");\n      } else {\n        callEventBehaviorHook(event, \"_activationBehavior\");\n      }\n    }\n    return outcome;\n  }\n  click() {\n    // https://html.spec.whatwg.org/multipage/interaction.html#dom-click\n    // https://html.spec.whatwg.org/multipage/interaction.html#run-synthetic-click-activation-steps\n    // Not completely spec compliant due to e.g. incomplete implementations of disabled for form controls, or no\n    // implementation at all of isTrusted.\n\n    if (this._clickInProgress) {\n      return;\n    }\n    this._clickInProgress = true;\n    if (isDisabled(this)) {\n      return;\n    }\n    const event = MouseEvent.createImpl([\"click\", {\n      bubbles: true,\n      cancelable: true,\n      view: this.ownerDocument.defaultView\n    }], {});\n\n    // Run synthetic click activation steps. According to the spec,\n    // this should not be calling dispatchEvent, but it matches browser behavior.\n    // See: https://www.w3.org/Bugs/Public/show_bug.cgi?id=12230\n    // See also: https://github.com/whatwg/html/issues/805\n    this.dispatchEvent(event);\n    this._clickInProgress = false;\n  }\n  get dir() {\n    let dirValue = this.getAttribute(\"dir\");\n    if (dirValue !== null) {\n      dirValue = dirValue.toLowerCase();\n      if ([\"ltr\", \"rtl\", \"auto\"].includes(dirValue)) {\n        return dirValue;\n      }\n    }\n    return \"\";\n  }\n  set dir(value) {\n    this.setAttribute(\"dir\", value);\n  }\n  _attrModified(name, value, oldValue) {\n    if (name === \"style\" && value !== oldValue && !this._settingCssText) {\n      this._settingCssText = true;\n      this._style.cssText = value;\n      this._settingCssText = false;\n    } else if (name.startsWith(\"on\")) {\n      this._globalEventChanged(name.substring(2));\n    }\n    super._attrModified.apply(this, arguments);\n  }\n  get offsetParent() {\n    return null;\n  }\n  get offsetTop() {\n    return 0;\n  }\n  get offsetLeft() {\n    return 0;\n  }\n  get offsetWidth() {\n    return 0;\n  }\n  get offsetHeight() {\n    return 0;\n  }\n}\nfunction callEventBehaviorHook(event, name, targetOverride) {\n  if (event) {\n    const target = targetOverride || event.target;\n    if (target && typeof target[name] === \"function\") {\n      target[name]();\n    }\n  }\n}\nmixin(HTMLElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(HTMLElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(HTMLElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);\nmodule.exports = {\n  implementation: HTMLElementImpl\n};","map":{"version":3,"names":["mixin","require","ElementImpl","implementation","MouseEvent","ElementCSSInlineStyleImpl","GlobalEventHandlersImpl","HTMLAndSVGElementSharedImpl","isDisabled","HTMLElementImpl","constructor","args","privateData","_initHTMLAndSVGElement","_initElementCSSInlineStyle","_initGlobalEvents","_settingCssText","_clickInProgress","dispatchEvent","event","type","callEventBehaviorHook","outcome","defaultPrevented","click","createImpl","bubbles","cancelable","view","ownerDocument","defaultView","dir","dirValue","getAttribute","toLowerCase","includes","value","setAttribute","_attrModified","name","oldValue","_style","cssText","startsWith","_globalEventChanged","substring","apply","arguments","offsetParent","offsetTop","offsetLeft","offsetWidth","offsetHeight","targetOverride","target","prototype","module","exports"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/nodes/HTMLElement-impl.js"],"sourcesContent":["\"use strict\";\nconst { mixin } = require(\"../../utils\");\nconst ElementImpl = require(\"./Element-impl\").implementation;\nconst MouseEvent = require(\"../generated/MouseEvent\");\nconst ElementCSSInlineStyleImpl = require(\"./ElementCSSInlineStyle-impl\").implementation;\nconst GlobalEventHandlersImpl = require(\"./GlobalEventHandlers-impl\").implementation;\nconst HTMLAndSVGElementSharedImpl = require(\"./HTMLAndSVGElementShared-impl\").implementation;\nconst { isDisabled } = require(\"../helpers/form-controls\");\n\nclass HTMLElementImpl extends ElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._initHTMLAndSVGElement();\n    this._initElementCSSInlineStyle();\n    this._initGlobalEvents();\n\n    this._settingCssText = false;\n    this._clickInProgress = false;\n  }\n\n  // Add default event behavior (click link to navigate, click button to submit\n  // form, etc). We start by wrapping dispatchEvent so we can forward events to\n  // the element's default functions (only events that did not incur\n  // preventDefault).\n  dispatchEvent(event) {\n    if (event.type === \"click\") {\n      callEventBehaviorHook(event, \"_preClickActivationSteps\", this);\n    }\n\n    const outcome = super.dispatchEvent(event);\n\n    if (event.type === \"click\") {\n      if (event.defaultPrevented) {\n        callEventBehaviorHook(event, \"_canceledActivationSteps\");\n      } else {\n        callEventBehaviorHook(event, \"_activationBehavior\");\n      }\n    }\n\n    return outcome;\n  }\n\n  click() {\n    // https://html.spec.whatwg.org/multipage/interaction.html#dom-click\n    // https://html.spec.whatwg.org/multipage/interaction.html#run-synthetic-click-activation-steps\n    // Not completely spec compliant due to e.g. incomplete implementations of disabled for form controls, or no\n    // implementation at all of isTrusted.\n\n    if (this._clickInProgress) {\n      return;\n    }\n\n    this._clickInProgress = true;\n\n    if (isDisabled(this)) {\n      return;\n    }\n\n    const event = MouseEvent.createImpl([\n      \"click\",\n      {\n        bubbles: true,\n        cancelable: true,\n        view: this.ownerDocument.defaultView\n      }\n    ], {});\n\n    // Run synthetic click activation steps. According to the spec,\n    // this should not be calling dispatchEvent, but it matches browser behavior.\n    // See: https://www.w3.org/Bugs/Public/show_bug.cgi?id=12230\n    // See also: https://github.com/whatwg/html/issues/805\n    this.dispatchEvent(event);\n\n\n    this._clickInProgress = false;\n  }\n\n  get dir() {\n    let dirValue = this.getAttribute(\"dir\");\n    if (dirValue !== null) {\n      dirValue = dirValue.toLowerCase();\n\n      if ([\"ltr\", \"rtl\", \"auto\"].includes(dirValue)) {\n        return dirValue;\n      }\n    }\n    return \"\";\n  }\n  set dir(value) {\n    this.setAttribute(\"dir\", value);\n  }\n\n  _attrModified(name, value, oldValue) {\n    if (name === \"style\" && value !== oldValue && !this._settingCssText) {\n      this._settingCssText = true;\n      this._style.cssText = value;\n      this._settingCssText = false;\n    } else if (name.startsWith(\"on\")) {\n      this._globalEventChanged(name.substring(2));\n    }\n\n    super._attrModified.apply(this, arguments);\n  }\n\n  get offsetParent() {\n    return null;\n  }\n\n  get offsetTop() {\n    return 0;\n  }\n\n  get offsetLeft() {\n    return 0;\n  }\n\n  get offsetWidth() {\n    return 0;\n  }\n\n  get offsetHeight() {\n    return 0;\n  }\n}\n\nfunction callEventBehaviorHook(event, name, targetOverride) {\n  if (event) {\n    const target = targetOverride || event.target;\n    if (target && typeof target[name] === \"function\") {\n      target[name]();\n    }\n  }\n}\n\nmixin(HTMLElementImpl.prototype, ElementCSSInlineStyleImpl.prototype);\nmixin(HTMLElementImpl.prototype, GlobalEventHandlersImpl.prototype);\nmixin(HTMLElementImpl.prototype, HTMLAndSVGElementSharedImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLElementImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}