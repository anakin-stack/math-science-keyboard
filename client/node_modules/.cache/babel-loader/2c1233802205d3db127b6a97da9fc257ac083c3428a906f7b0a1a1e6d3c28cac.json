{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\nconst idlUtils = require(\"../generated/utils\");\nconst {\n  attach,\n  detach\n} = require(\"../helpers/svg/basic-types\");\n\n// https://svgwg.org/svg2-draft/types.html#ListInterfaces\n\n// Child classes must implement _reserialize()\nclass List {\n  _initList(_ref) {\n    let {\n      element,\n      attribute,\n      readOnly = false\n    } = _ref;\n    this._element = element;\n    this._attribute = attribute;\n    this._attributeRegistryEntry = element.constructor.attributeRegistry.get(attribute);\n    this._readOnly = readOnly;\n    this._list = [];\n    this._version = -1;\n  }\n  get _needsResync() {\n    return this._version < this._element._version;\n  }\n  _synchronize() {\n    if (!this._needsResync) {\n      return;\n    }\n    let value = [];\n    if (this._element.hasAttribute(this._attribute)) {\n      value = this._attributeRegistryEntry.getValue(this._element.getAttribute(this._attribute));\n    }\n    if (value.length === 0 && this._attributeRegistryEntry.initialValue !== undefined) {\n      value = this._attributeRegistryEntry.getValue(this._attributeRegistryEntry.initialValue);\n    }\n    // TODO: support non-DOMString lists.\n    this._list = value;\n    this._version = this._element._version;\n  }\n  _reserialize() {\n    const elements = this._list;\n    this._element.setAttribute(this._attribute, this._attributeRegistryEntry.serialize(elements));\n    // Prevent ping-ponging back and forth between _reserialize() and _synchronize().\n    this._version = this._element._version;\n  }\n  [idlUtils.supportsPropertyIndex](index) {\n    this._synchronize();\n    return index >= 0 && index < this.length;\n  }\n  get [idlUtils.supportedPropertyIndices]() {\n    this._synchronize();\n    return this._list.keys();\n  }\n  get length() {\n    this._synchronize();\n    return this._list.length;\n  }\n  get numberOfItems() {\n    this._synchronize();\n    return this._list.length;\n  }\n  clear() {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    for (const item of this._list) {\n      detach(item);\n    }\n    this._list.length = 0;\n    this._reserialize();\n  }\n  initialize(newItem) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    for (const item of this._list) {\n      detach(item);\n    }\n    this._list.length = 0;\n    // TODO: clone non-DOMString list elements.\n    attach(newItem, this);\n    this._list.push(newItem);\n    this._reserialize();\n  }\n  getItem(index) {\n    this._synchronize();\n    if (index >= this._list.length) {\n      throw new DOMException(`The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`, \"IndexSizeError\");\n    }\n    return this._list[index];\n  }\n  insertItemBefore(newItem, index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    // TODO: clone non-DOMString list elements.\n    if (index > this._list.length) {\n      index = this._list.length;\n    }\n    this._list.splice(index, 0, newItem);\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n  replaceItem(newItem, index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    if (index >= this._list.length) {\n      throw new DOMException(`The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`, \"IndexSizeError\");\n    }\n    // TODO: clone non-DOMString list elements.\n    detach(this._list[index]);\n    this._list[index] = newItem;\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n  removeItem(index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    if (index >= this._list.length) {\n      throw new DOMException(`The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`, \"IndexSizeError\");\n    }\n    const item = this._list[index];\n    detach(item);\n    this._list.splice(index, 1);\n    this._reserialize();\n    return item;\n  }\n  appendItem(newItem) {\n    this._synchronize();\n    // TODO: clone non-DOMString list elements.\n    this._list.push(newItem);\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n  [idlUtils.indexedSetNew](index, value) {\n    // Note: this will always throw a IndexSizeError.\n    this.replaceItem(value, index);\n  }\n  [idlUtils.indexedSetExisting](index, value) {\n    this.replaceItem(value, index);\n  }\n}\nmodule.exports = List;","map":{"version":3,"names":["DOMException","require","idlUtils","attach","detach","List","_initList","_ref","element","attribute","readOnly","_element","_attribute","_attributeRegistryEntry","constructor","attributeRegistry","get","_readOnly","_list","_version","_needsResync","_synchronize","value","hasAttribute","getValue","getAttribute","length","initialValue","undefined","_reserialize","elements","setAttribute","serialize","supportsPropertyIndex","index","supportedPropertyIndices","keys","numberOfItems","clear","item","initialize","newItem","push","getItem","insertItemBefore","splice","replaceItem","removeItem","appendItem","indexedSetNew","indexedSetExisting","module","exports"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/svg/SVGListBase.js"],"sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception\");\nconst idlUtils = require(\"../generated/utils\");\nconst { attach, detach } = require(\"../helpers/svg/basic-types\");\n\n// https://svgwg.org/svg2-draft/types.html#ListInterfaces\n\n// Child classes must implement _reserialize()\nclass List {\n  _initList({\n    element,\n    attribute,\n    readOnly = false\n  }) {\n    this._element = element;\n    this._attribute = attribute;\n    this._attributeRegistryEntry = element.constructor.attributeRegistry.get(attribute);\n    this._readOnly = readOnly;\n    this._list = [];\n    this._version = -1;\n  }\n\n  get _needsResync() {\n    return this._version < this._element._version;\n  }\n\n  _synchronize() {\n    if (!this._needsResync) {\n      return;\n    }\n    let value = [];\n    if (this._element.hasAttribute(this._attribute)) {\n      value = this._attributeRegistryEntry.getValue(this._element.getAttribute(this._attribute));\n    }\n    if (value.length === 0 && this._attributeRegistryEntry.initialValue !== undefined) {\n      value = this._attributeRegistryEntry.getValue(this._attributeRegistryEntry.initialValue);\n    }\n    // TODO: support non-DOMString lists.\n    this._list = value;\n    this._version = this._element._version;\n  }\n\n  _reserialize() {\n    const elements = this._list;\n    this._element.setAttribute(this._attribute, this._attributeRegistryEntry.serialize(elements));\n    // Prevent ping-ponging back and forth between _reserialize() and _synchronize().\n    this._version = this._element._version;\n  }\n\n  [idlUtils.supportsPropertyIndex](index) {\n    this._synchronize();\n    return index >= 0 && index < this.length;\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    this._synchronize();\n    return this._list.keys();\n  }\n\n  get length() {\n    this._synchronize();\n    return this._list.length;\n  }\n\n  get numberOfItems() {\n    this._synchronize();\n    return this._list.length;\n  }\n\n  clear() {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    for (const item of this._list) {\n      detach(item);\n    }\n    this._list.length = 0;\n    this._reserialize();\n  }\n\n  initialize(newItem) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    for (const item of this._list) {\n      detach(item);\n    }\n    this._list.length = 0;\n    // TODO: clone non-DOMString list elements.\n    attach(newItem, this);\n    this._list.push(newItem);\n    this._reserialize();\n  }\n\n  getItem(index) {\n    this._synchronize();\n    if (index >= this._list.length) {\n      throw new DOMException(\n        `The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`,\n        \"IndexSizeError\"\n      );\n    }\n    return this._list[index];\n  }\n\n  insertItemBefore(newItem, index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    // TODO: clone non-DOMString list elements.\n    if (index > this._list.length) {\n      index = this._list.length;\n    }\n    this._list.splice(index, 0, newItem);\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n\n  replaceItem(newItem, index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    if (index >= this._list.length) {\n      throw new DOMException(\n        `The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`,\n        \"IndexSizeError\"\n      );\n    }\n    // TODO: clone non-DOMString list elements.\n    detach(this._list[index]);\n    this._list[index] = newItem;\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n\n  removeItem(index) {\n    this._synchronize();\n    if (this._readOnly) {\n      throw new DOMException(\"Attempting to modify a read-only list\", \"NoModificationAllowedError\");\n    }\n    if (index >= this._list.length) {\n      throw new DOMException(\n        `The index provided (${index}) is greater than or equal to the maximum bound (${this._list.length}).`,\n        \"IndexSizeError\"\n      );\n    }\n    const item = this._list[index];\n    detach(item);\n    this._list.splice(index, 1);\n    this._reserialize();\n    return item;\n  }\n\n  appendItem(newItem) {\n    this._synchronize();\n    // TODO: clone non-DOMString list elements.\n    this._list.push(newItem);\n    attach(newItem, this);\n    this._reserialize();\n    return newItem;\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    // Note: this will always throw a IndexSizeError.\n    this.replaceItem(value, index);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    this.replaceItem(value, index);\n  }\n}\n\nmodule.exports = List;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}