{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst MouseEvent = require(\"../generated/MouseEvent\");\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\nconst NODE_TYPE = require(\"../node-type\");\nconst {\n  isLabelable,\n  isDisabled\n} = require(\"../helpers/form-controls\");\nfunction sendClickToAssociatedNode(node) {\n  node.dispatchEvent(MouseEvent.createImpl([\"click\", {\n    bubbles: true,\n    cancelable: true,\n    view: node.ownerDocument ? node.ownerDocument.defaultView : null,\n    screenX: 0,\n    screenY: 0,\n    clientX: 0,\n    clientY: 0,\n    button: 0,\n    detail: 1,\n    relatedTarget: null\n  }]));\n}\nclass HTMLLabelElementImpl extends HTMLElementImpl {\n  get control() {\n    if (this.hasAttribute(\"for\")) {\n      const forValue = this.getAttribute(\"for\");\n      if (forValue === \"\") {\n        return null;\n      }\n      const root = this.getRootNode();\n      for (const descendant of domSymbolTree.treeIterator(root)) {\n        if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE && descendant.getAttribute(\"id\") === forValue) {\n          return isLabelable(descendant) ? descendant : null;\n        }\n      }\n      return null;\n    }\n    for (const descendant of domSymbolTree.treeIterator(this)) {\n      if (isLabelable(descendant)) {\n        return descendant;\n      }\n    }\n    return null;\n  }\n  get form() {\n    const node = this.control;\n    if (node) {\n      return node.form;\n    }\n    return null;\n  }\n  _activationBehavior() {\n    const node = this.control;\n    if (node && !isDisabled(node)) {\n      sendClickToAssociatedNode(node);\n    }\n  }\n}\nmodule.exports = {\n  implementation: HTMLLabelElementImpl\n};","map":{"version":3,"names":["HTMLElementImpl","require","implementation","MouseEvent","domSymbolTree","NODE_TYPE","isLabelable","isDisabled","sendClickToAssociatedNode","node","dispatchEvent","createImpl","bubbles","cancelable","view","ownerDocument","defaultView","screenX","screenY","clientX","clientY","button","detail","relatedTarget","HTMLLabelElementImpl","control","hasAttribute","forValue","getAttribute","root","getRootNode","descendant","treeIterator","nodeType","ELEMENT_NODE","form","_activationBehavior","module","exports"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/nodes/HTMLLabelElement-impl.js"],"sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst MouseEvent = require(\"../generated/MouseEvent\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst NODE_TYPE = require(\"../node-type\");\nconst { isLabelable, isDisabled } = require(\"../helpers/form-controls\");\n\nfunction sendClickToAssociatedNode(node) {\n  node.dispatchEvent(MouseEvent.createImpl([\n    \"click\",\n    {\n      bubbles: true,\n      cancelable: true,\n      view: node.ownerDocument ? node.ownerDocument.defaultView : null,\n      screenX: 0,\n      screenY: 0,\n      clientX: 0,\n      clientY: 0,\n      button: 0,\n      detail: 1,\n      relatedTarget: null\n    }\n  ]));\n}\n\nclass HTMLLabelElementImpl extends HTMLElementImpl {\n  get control() {\n    if (this.hasAttribute(\"for\")) {\n      const forValue = this.getAttribute(\"for\");\n      if (forValue === \"\") {\n        return null;\n      }\n      const root = this.getRootNode();\n      for (const descendant of domSymbolTree.treeIterator(root)) {\n        if (descendant.nodeType === NODE_TYPE.ELEMENT_NODE &&\n          descendant.getAttribute(\"id\") === forValue) {\n          return isLabelable(descendant) ? descendant : null;\n        }\n      }\n      return null;\n    }\n    for (const descendant of domSymbolTree.treeIterator(this)) {\n      if (isLabelable(descendant)) {\n        return descendant;\n      }\n    }\n    return null;\n  }\n\n  get form() {\n    const node = this.control;\n    if (node) {\n      return node.form;\n    }\n    return null;\n  }\n\n  _activationBehavior() {\n    const node = this.control;\n    if (node && !isDisabled(node)) {\n      sendClickToAssociatedNode(node);\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLLabelElementImpl\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAoB,CAAC,CAACC,cAAc;AACpE,MAAMC,UAAU,GAAGF,OAAO,CAAC,yBAAyB,CAAC;AACrD,MAAM;EAAEG;AAAc,CAAC,GAAGH,OAAO,CAAC,+BAA+B,CAAC;AAClE,MAAMI,SAAS,GAAGJ,OAAO,CAAC,cAAc,CAAC;AACzC,MAAM;EAAEK,WAAW;EAAEC;AAAW,CAAC,GAAGN,OAAO,CAAC,0BAA0B,CAAC;AAEvE,SAASO,yBAAyBA,CAACC,IAAI,EAAE;EACvCA,IAAI,CAACC,aAAa,CAACP,UAAU,CAACQ,UAAU,CAAC,CACvC,OAAO,EACP;IACEC,OAAO,EAAE,IAAI;IACbC,UAAU,EAAE,IAAI;IAChBC,IAAI,EAAEL,IAAI,CAACM,aAAa,GAAGN,IAAI,CAACM,aAAa,CAACC,WAAW,GAAG,IAAI;IAChEC,OAAO,EAAE,CAAC;IACVC,OAAO,EAAE,CAAC;IACVC,OAAO,EAAE,CAAC;IACVC,OAAO,EAAE,CAAC;IACVC,MAAM,EAAE,CAAC;IACTC,MAAM,EAAE,CAAC;IACTC,aAAa,EAAE;EACjB,CAAC,CACF,CAAC,CAAC;AACL;AAEA,MAAMC,oBAAoB,SAASxB,eAAe,CAAC;EACjD,IAAIyB,OAAOA,CAAA,EAAG;IACZ,IAAI,IAAI,CAACC,YAAY,CAAC,KAAK,CAAC,EAAE;MAC5B,MAAMC,QAAQ,GAAG,IAAI,CAACC,YAAY,CAAC,KAAK,CAAC;MACzC,IAAID,QAAQ,KAAK,EAAE,EAAE;QACnB,OAAO,IAAI;MACb;MACA,MAAME,IAAI,GAAG,IAAI,CAACC,WAAW,CAAC,CAAC;MAC/B,KAAK,MAAMC,UAAU,IAAI3B,aAAa,CAAC4B,YAAY,CAACH,IAAI,CAAC,EAAE;QACzD,IAAIE,UAAU,CAACE,QAAQ,KAAK5B,SAAS,CAAC6B,YAAY,IAChDH,UAAU,CAACH,YAAY,CAAC,IAAI,CAAC,KAAKD,QAAQ,EAAE;UAC5C,OAAOrB,WAAW,CAACyB,UAAU,CAAC,GAAGA,UAAU,GAAG,IAAI;QACpD;MACF;MACA,OAAO,IAAI;IACb;IACA,KAAK,MAAMA,UAAU,IAAI3B,aAAa,CAAC4B,YAAY,CAAC,IAAI,CAAC,EAAE;MACzD,IAAI1B,WAAW,CAACyB,UAAU,CAAC,EAAE;QAC3B,OAAOA,UAAU;MACnB;IACF;IACA,OAAO,IAAI;EACb;EAEA,IAAII,IAAIA,CAAA,EAAG;IACT,MAAM1B,IAAI,GAAG,IAAI,CAACgB,OAAO;IACzB,IAAIhB,IAAI,EAAE;MACR,OAAOA,IAAI,CAAC0B,IAAI;IAClB;IACA,OAAO,IAAI;EACb;EAEAC,mBAAmBA,CAAA,EAAG;IACpB,MAAM3B,IAAI,GAAG,IAAI,CAACgB,OAAO;IACzB,IAAIhB,IAAI,IAAI,CAACF,UAAU,CAACE,IAAI,CAAC,EAAE;MAC7BD,yBAAyB,CAACC,IAAI,CAAC;IACjC;EACF;AACF;AAEA4B,MAAM,CAACC,OAAO,GAAG;EACfpC,cAAc,EAAEsB;AAClB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}