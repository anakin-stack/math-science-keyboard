{"ast":null,"code":"\"use strict\";\n\nconst CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\nconst DOMException = require(\"domexception\");\nconst NODE_TYPE = require(\"../node-type\");\nclass TextImpl extends CharacterDataImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this.nodeType = NODE_TYPE.TEXT_NODE;\n  }\n  splitText(offset) {\n    offset >>>= 0;\n    const {\n      length\n    } = this;\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n    const count = length - offset;\n    const newData = this.substringData(offset, count);\n    const newNode = this._ownerDocument.createTextNode(newData);\n    const parent = domSymbolTree.parent(this);\n    if (parent !== null) {\n      parent.insertBefore(newNode, this.nextSibling);\n    }\n    this.replaceData(offset, count, \"\");\n    return newNode;\n\n    // TODO: range stuff\n  }\n\n  get wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n    current = this;\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n    return wholeText;\n  }\n}\nmodule.exports = {\n  implementation: TextImpl\n};","map":{"version":3,"names":["CharacterDataImpl","require","implementation","domSymbolTree","DOMException","NODE_TYPE","TextImpl","constructor","args","privateData","nodeType","TEXT_NODE","splitText","offset","length","count","newData","substringData","newNode","_ownerDocument","createTextNode","parent","insertBefore","nextSibling","replaceData","wholeText","textContent","next","current","previousSibling","module","exports"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/nodes/Text-impl.js"],"sourcesContent":["\"use strict\";\n\nconst CharacterDataImpl = require(\"./CharacterData-impl\").implementation;\n\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst DOMException = require(\"domexception\");\nconst NODE_TYPE = require(\"../node-type\");\n\nclass TextImpl extends CharacterDataImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    this.nodeType = NODE_TYPE.TEXT_NODE;\n  }\n\n  splitText(offset) {\n    offset >>>= 0;\n\n    const { length } = this;\n\n    if (offset > length) {\n      throw new DOMException(\"The index is not in the allowed range.\", \"IndexSizeError\");\n    }\n\n    const count = length - offset;\n    const newData = this.substringData(offset, count);\n\n    const newNode = this._ownerDocument.createTextNode(newData);\n\n    const parent = domSymbolTree.parent(this);\n\n    if (parent !== null) {\n      parent.insertBefore(newNode, this.nextSibling);\n    }\n\n    this.replaceData(offset, count, \"\");\n\n    return newNode;\n\n    // TODO: range stuff\n  }\n\n  get wholeText() {\n    let wholeText = this.textContent;\n    let next;\n    let current = this;\n    while ((next = domSymbolTree.previousSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText = next.textContent + wholeText;\n      current = next;\n    }\n    current = this;\n    while ((next = domSymbolTree.nextSibling(current)) && next.nodeType === NODE_TYPE.TEXT_NODE) {\n      wholeText += next.textContent;\n      current = next;\n    }\n    return wholeText;\n  }\n}\n\nmodule.exports = {\n  implementation: TextImpl\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,sBAAsB,CAAC,CAACC,cAAc;AAExE,MAAM;EAAEC;AAAc,CAAC,GAAGF,OAAO,CAAC,+BAA+B,CAAC;AAClE,MAAMG,YAAY,GAAGH,OAAO,CAAC,cAAc,CAAC;AAC5C,MAAMI,SAAS,GAAGJ,OAAO,CAAC,cAAc,CAAC;AAEzC,MAAMK,QAAQ,SAASN,iBAAiB,CAAC;EACvCO,WAAWA,CAACC,IAAI,EAAEC,WAAW,EAAE;IAC7B,KAAK,CAACD,IAAI,EAAEC,WAAW,CAAC;IAExB,IAAI,CAACC,QAAQ,GAAGL,SAAS,CAACM,SAAS;EACrC;EAEAC,SAASA,CAACC,MAAM,EAAE;IAChBA,MAAM,MAAM,CAAC;IAEb,MAAM;MAAEC;IAAO,CAAC,GAAG,IAAI;IAEvB,IAAID,MAAM,GAAGC,MAAM,EAAE;MACnB,MAAM,IAAIV,YAAY,CAAC,wCAAwC,EAAE,gBAAgB,CAAC;IACpF;IAEA,MAAMW,KAAK,GAAGD,MAAM,GAAGD,MAAM;IAC7B,MAAMG,OAAO,GAAG,IAAI,CAACC,aAAa,CAACJ,MAAM,EAAEE,KAAK,CAAC;IAEjD,MAAMG,OAAO,GAAG,IAAI,CAACC,cAAc,CAACC,cAAc,CAACJ,OAAO,CAAC;IAE3D,MAAMK,MAAM,GAAGlB,aAAa,CAACkB,MAAM,CAAC,IAAI,CAAC;IAEzC,IAAIA,MAAM,KAAK,IAAI,EAAE;MACnBA,MAAM,CAACC,YAAY,CAACJ,OAAO,EAAE,IAAI,CAACK,WAAW,CAAC;IAChD;IAEA,IAAI,CAACC,WAAW,CAACX,MAAM,EAAEE,KAAK,EAAE,EAAE,CAAC;IAEnC,OAAOG,OAAO;;IAEd;EACF;;EAEA,IAAIO,SAASA,CAAA,EAAG;IACd,IAAIA,SAAS,GAAG,IAAI,CAACC,WAAW;IAChC,IAAIC,IAAI;IACR,IAAIC,OAAO,GAAG,IAAI;IAClB,OAAO,CAACD,IAAI,GAAGxB,aAAa,CAAC0B,eAAe,CAACD,OAAO,CAAC,KAAKD,IAAI,CAACjB,QAAQ,KAAKL,SAAS,CAACM,SAAS,EAAE;MAC/Fc,SAAS,GAAGE,IAAI,CAACD,WAAW,GAAGD,SAAS;MACxCG,OAAO,GAAGD,IAAI;IAChB;IACAC,OAAO,GAAG,IAAI;IACd,OAAO,CAACD,IAAI,GAAGxB,aAAa,CAACoB,WAAW,CAACK,OAAO,CAAC,KAAKD,IAAI,CAACjB,QAAQ,KAAKL,SAAS,CAACM,SAAS,EAAE;MAC3Fc,SAAS,IAAIE,IAAI,CAACD,WAAW;MAC7BE,OAAO,GAAGD,IAAI;IAChB;IACA,OAAOF,SAAS;EAClB;AACF;AAEAK,MAAM,CAACC,OAAO,GAAG;EACf7B,cAAc,EAAEI;AAClB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}