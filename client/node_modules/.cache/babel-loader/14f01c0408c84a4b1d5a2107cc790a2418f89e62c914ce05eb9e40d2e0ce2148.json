{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst idlUtils = require(\"../generated/utils.js\");\nconst ValidityState = require(\"../generated/ValidityState\");\nconst DefaultConstraintValidationImpl = require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst {\n  mixin\n} = require(\"../../utils\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst NODE_TYPE = require(\"../node-type\");\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\nconst HTMLOptionsCollection = require(\"../generated/HTMLOptionsCollection\");\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\nconst {\n  closest\n} = require(\"../helpers/traversal\");\nconst {\n  getLabelsForLabelable\n} = require(\"../helpers/form-controls\");\nclass HTMLSelectElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._options = HTMLOptionsCollection.createImpl([], {\n      element: this,\n      query: () => {\n        // Customized domSymbolTree.treeToArray() clone.\n        const array = [];\n        for (const child of domSymbolTree.childrenIterator(this)) {\n          if (child._localName === \"option\") {\n            array.push(child);\n          } else if (child._localName === \"optgroup\") {\n            for (const childOfGroup of domSymbolTree.childrenIterator(child)) {\n              if (childOfGroup._localName === \"option\") {\n                array.push(childOfGroup);\n              }\n            }\n          }\n        }\n        return array;\n      }\n    });\n    this._selectedOptions = null; // lazy\n\n    this._customValidityErrorMessage = \"\";\n    this._labels = null;\n  }\n  _formReset() {\n    for (const option of this.options) {\n      option._selectedness = option.hasAttribute(\"selected\");\n      option._dirtyness = false;\n    }\n    this._askedForAReset();\n  }\n  _askedForAReset() {\n    if (this.hasAttribute(\"multiple\")) {\n      return;\n    }\n    const selected = this.options.filter(opt => opt._selectedness);\n    const size = this._displaySize;\n    if (size === 1 && !selected.length) {\n      // select the first option that is not disabled\n      for (const option of this.options) {\n        let disabled = option.hasAttribute(\"disabled\");\n        const parentNode = domSymbolTree.parent(option);\n        if (parentNode && parentNode.nodeName.toUpperCase() === \"OPTGROUP\" && parentNode.hasAttribute(\"disabled\")) {\n          disabled = true;\n        }\n        if (!disabled) {\n          // (do not set dirty)\n          option._selectedness = true;\n          break;\n        }\n      }\n    } else if (selected.length >= 2) {\n      // select the last selected option\n      selected.forEach((option, index) => {\n        option._selectedness = index === selected.length - 1;\n      });\n    }\n  }\n  _descendantAdded(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n    super._descendantAdded.apply(this, arguments);\n  }\n  _descendantRemoved(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n    super._descendantRemoved.apply(this, arguments);\n  }\n  _attrModified(name) {\n    if (name === \"multiple\" || name === \"size\") {\n      this._askedForAReset();\n    }\n    super._attrModified.apply(this, arguments);\n  }\n  get _displaySize() {\n    if (this.hasAttribute(\"size\")) {\n      const attr = this.getAttribute(\"size\");\n      // We don't allow hexadecimal numbers here.\n      // eslint-disable-next-line radix\n      const size = parseInt(attr, 10);\n      if (!isNaN(size) && size >= 0) {\n        return size;\n      }\n    }\n    return this.hasAttribute(\"multiple\") ? 4 : 1;\n  }\n  get options() {\n    return this._options;\n  }\n  get selectedOptions() {\n    return HTMLCollection.createImpl([], {\n      element: this,\n      query: () => domSymbolTree.treeToArray(this, {\n        filter: node => node._localName === \"option\" && node._selectedness === true\n      })\n    });\n  }\n  get selectedIndex() {\n    for (let i = 0; i < this.options.length; i++) {\n      if (this.options.item(i)._selectedness) {\n        return i;\n      }\n    }\n    return -1;\n  }\n  set selectedIndex(index) {\n    for (let i = 0; i < this.options.length; i++) {\n      this.options.item(i).selected = i === index;\n    }\n  }\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n  get value() {\n    let i = this.selectedIndex;\n    if (this.options.length && i === -1) {\n      i = 0;\n    }\n    if (i === -1) {\n      return \"\";\n    }\n    return this.options.item(i).value;\n  }\n  set value(val) {\n    for (const option of this.options) {\n      if (option.value === val) {\n        option._selectedness = true;\n        option._dirtyness = true;\n      } else {\n        option._selectedness = false;\n      }\n    }\n  }\n  get form() {\n    return closest(this, \"form\");\n  }\n  get type() {\n    return this.hasAttribute(\"multiple\") ? \"select-multiple\" : \"select-one\";\n  }\n  get [idlUtils.supportedPropertyIndices]() {\n    return this.options[idlUtils.supportedPropertyIndices];\n  }\n  get length() {\n    return this.options.length;\n  }\n  set length(value) {\n    this.options.length = value;\n  }\n  item(index) {\n    return this.options.item(index);\n  }\n  namedItem(name) {\n    return this.options.namedItem(name);\n  }\n  [idlUtils.indexedSetNew](index, value) {\n    return this.options[idlUtils.indexedSetNew](index, value);\n  }\n  [idlUtils.indexedSetExisting](index, value) {\n    return this.options[idlUtils.indexedSetExisting](index, value);\n  }\n  add(opt, before) {\n    this.options.add(opt, before);\n  }\n  remove(index) {\n    if (arguments.length > 0) {\n      index = conversions.long(index, {\n        context: \"Failed to execute 'remove' on 'HTMLSelectElement': parameter 1\"\n      });\n      this.options.remove(index);\n    } else {\n      super.remove();\n    }\n  }\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttribute(\"readonly\");\n  }\n\n  // Constraint validation: If the element has its required attribute specified,\n  // and either none of the option elements in the select element's list of options\n  // have their selectedness set to true, or the only option element in the select\n  // element's list of options with its selectedness set to true is the placeholder\n  // label option, then the element is suffering from being missing.\n  get validity() {\n    if (!this._validity) {\n      this._validity = ValidityState.createImpl(this, {\n        valueMissing: () => {\n          if (!this.hasAttribute(\"required\")) {\n            return false;\n          }\n          const selectedOptionIndex = this.selectedIndex;\n          return selectedOptionIndex < 0 || selectedOptionIndex === 0 && this._hasPlaceholderOption;\n        }\n      });\n    }\n    return this._validity;\n  }\n\n  // If a select element has a required attribute specified, does not have a multiple attribute\n  // specified, and has a display size of 1; and if the value of the first option element in the\n  // select element's list of options (if any) is the empty string, and that option element's parent\n  // node is the select element(and not an optgroup element), then that option is the select\n  // element's placeholder label option.\n  // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option\n  get _hasPlaceholderOption() {\n    return this.hasAttribute(\"required\") && !this.hasAttribute(\"multiple\") && this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === \"\" && this.options.item(0).parentNode._localName !== \"optgroup\";\n  }\n}\nmixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\nmodule.exports = {\n  implementation: HTMLSelectElementImpl\n};","map":{"version":3,"names":["conversions","require","idlUtils","ValidityState","DefaultConstraintValidationImpl","implementation","mixin","HTMLElementImpl","NODE_TYPE","HTMLCollection","HTMLOptionsCollection","domSymbolTree","closest","getLabelsForLabelable","HTMLSelectElementImpl","constructor","args","privateData","_options","createImpl","element","query","array","child","childrenIterator","_localName","push","childOfGroup","_selectedOptions","_customValidityErrorMessage","_labels","_formReset","option","options","_selectedness","hasAttribute","_dirtyness","_askedForAReset","selected","filter","opt","size","_displaySize","length","disabled","parentNode","parent","nodeName","toUpperCase","forEach","index","_descendantAdded","nodeType","ELEMENT_NODE","apply","arguments","_descendantRemoved","_attrModified","name","attr","getAttribute","parseInt","isNaN","selectedOptions","treeToArray","node","selectedIndex","i","item","labels","value","val","form","type","supportedPropertyIndices","namedItem","indexedSetNew","indexedSetExisting","add","before","remove","long","context","_barredFromConstraintValidationSpecialization","validity","_validity","valueMissing","selectedOptionIndex","_hasPlaceholderOption","prototype","module","exports"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/nodes/HTMLSelectElement-impl.js"],"sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\n\nconst idlUtils = require(\"../generated/utils.js\");\nconst ValidityState = require(\"../generated/ValidityState\");\nconst DefaultConstraintValidationImpl =\n  require(\"../constraint-validation/DefaultConstraintValidation-impl\").implementation;\nconst { mixin } = require(\"../../utils\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst NODE_TYPE = require(\"../node-type\");\nconst HTMLCollection = require(\"../generated/HTMLCollection\");\nconst HTMLOptionsCollection = require(\"../generated/HTMLOptionsCollection\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { closest } = require(\"../helpers/traversal\");\nconst { getLabelsForLabelable } = require(\"../helpers/form-controls\");\n\nclass HTMLSelectElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._options = HTMLOptionsCollection.createImpl([], {\n      element: this,\n      query: () => {\n        // Customized domSymbolTree.treeToArray() clone.\n        const array = [];\n        for (const child of domSymbolTree.childrenIterator(this)) {\n          if (child._localName === \"option\") {\n            array.push(child);\n          } else if (child._localName === \"optgroup\") {\n            for (const childOfGroup of domSymbolTree.childrenIterator(child)) {\n              if (childOfGroup._localName === \"option\") {\n                array.push(childOfGroup);\n              }\n            }\n          }\n        }\n        return array;\n      }\n    });\n    this._selectedOptions = null; // lazy\n\n    this._customValidityErrorMessage = \"\";\n\n    this._labels = null;\n  }\n\n  _formReset() {\n    for (const option of this.options) {\n      option._selectedness = option.hasAttribute(\"selected\");\n      option._dirtyness = false;\n    }\n    this._askedForAReset();\n  }\n\n  _askedForAReset() {\n    if (this.hasAttribute(\"multiple\")) {\n      return;\n    }\n\n    const selected = this.options.filter(opt => opt._selectedness);\n\n    const size = this._displaySize;\n    if (size === 1 && !selected.length) {\n      // select the first option that is not disabled\n      for (const option of this.options) {\n        let disabled = option.hasAttribute(\"disabled\");\n        const parentNode = domSymbolTree.parent(option);\n        if (parentNode &&\n          parentNode.nodeName.toUpperCase() === \"OPTGROUP\" &&\n          parentNode.hasAttribute(\"disabled\")) {\n          disabled = true;\n        }\n\n        if (!disabled) {\n          // (do not set dirty)\n          option._selectedness = true;\n          break;\n        }\n      }\n    } else if (selected.length >= 2) {\n      // select the last selected option\n      selected.forEach((option, index) => {\n        option._selectedness = index === selected.length - 1;\n      });\n    }\n  }\n\n  _descendantAdded(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantAdded.apply(this, arguments);\n  }\n\n  _descendantRemoved(parent, child) {\n    if (child.nodeType === NODE_TYPE.ELEMENT_NODE) {\n      this._askedForAReset();\n    }\n\n    super._descendantRemoved.apply(this, arguments);\n  }\n\n  _attrModified(name) {\n    if (name === \"multiple\" || name === \"size\") {\n      this._askedForAReset();\n    }\n    super._attrModified.apply(this, arguments);\n  }\n\n  get _displaySize() {\n    if (this.hasAttribute(\"size\")) {\n      const attr = this.getAttribute(\"size\");\n      // We don't allow hexadecimal numbers here.\n      // eslint-disable-next-line radix\n      const size = parseInt(attr, 10);\n      if (!isNaN(size) && size >= 0) {\n        return size;\n      }\n    }\n    return this.hasAttribute(\"multiple\") ? 4 : 1;\n  }\n\n  get options() {\n    return this._options;\n  }\n\n  get selectedOptions() {\n    return HTMLCollection.createImpl([], {\n      element: this,\n      query: () => domSymbolTree.treeToArray(this, {\n        filter: node => node._localName === \"option\" && node._selectedness === true\n      })\n    });\n  }\n\n  get selectedIndex() {\n    for (let i = 0; i < this.options.length; i++) {\n      if (this.options.item(i)._selectedness) {\n        return i;\n      }\n    }\n    return -1;\n  }\n\n  set selectedIndex(index) {\n    for (let i = 0; i < this.options.length; i++) {\n      this.options.item(i).selected = i === index;\n    }\n  }\n\n  get labels() {\n    return getLabelsForLabelable(this);\n  }\n\n  get value() {\n    let i = this.selectedIndex;\n    if (this.options.length && (i === -1)) {\n      i = 0;\n    }\n    if (i === -1) {\n      return \"\";\n    }\n    return this.options.item(i).value;\n  }\n\n  set value(val) {\n    for (const option of this.options) {\n      if (option.value === val) {\n        option._selectedness = true;\n        option._dirtyness = true;\n      } else {\n        option._selectedness = false;\n      }\n    }\n  }\n\n  get form() {\n    return closest(this, \"form\");\n  }\n\n  get type() {\n    return this.hasAttribute(\"multiple\") ? \"select-multiple\" : \"select-one\";\n  }\n\n  get [idlUtils.supportedPropertyIndices]() {\n    return this.options[idlUtils.supportedPropertyIndices];\n  }\n\n  get length() {\n    return this.options.length;\n  }\n\n  set length(value) {\n    this.options.length = value;\n  }\n\n  item(index) {\n    return this.options.item(index);\n  }\n\n  namedItem(name) {\n    return this.options.namedItem(name);\n  }\n\n  [idlUtils.indexedSetNew](index, value) {\n    return this.options[idlUtils.indexedSetNew](index, value);\n  }\n\n  [idlUtils.indexedSetExisting](index, value) {\n    return this.options[idlUtils.indexedSetExisting](index, value);\n  }\n\n  add(opt, before) {\n    this.options.add(opt, before);\n  }\n\n  remove(index) {\n    if (arguments.length > 0) {\n      index = conversions.long(index, {\n        context: \"Failed to execute 'remove' on 'HTMLSelectElement': parameter 1\"\n      });\n      this.options.remove(index);\n    } else {\n      super.remove();\n    }\n  }\n\n  _barredFromConstraintValidationSpecialization() {\n    return this.hasAttribute(\"readonly\");\n  }\n\n  // Constraint validation: If the element has its required attribute specified,\n  // and either none of the option elements in the select element's list of options\n  // have their selectedness set to true, or the only option element in the select\n  // element's list of options with its selectedness set to true is the placeholder\n  // label option, then the element is suffering from being missing.\n  get validity() {\n    if (!this._validity) {\n      this._validity = ValidityState.createImpl(this, {\n        valueMissing: () => {\n          if (!this.hasAttribute(\"required\")) {\n            return false;\n          }\n          const selectedOptionIndex = this.selectedIndex;\n          return selectedOptionIndex < 0 || (selectedOptionIndex === 0 && this._hasPlaceholderOption);\n        }\n      });\n    }\n    return this._validity;\n  }\n\n  // If a select element has a required attribute specified, does not have a multiple attribute\n  // specified, and has a display size of 1; and if the value of the first option element in the\n  // select element's list of options (if any) is the empty string, and that option element's parent\n  // node is the select element(and not an optgroup element), then that option is the select\n  // element's placeholder label option.\n  // https://html.spec.whatwg.org/multipage/form-elements.html#placeholder-label-option\n  get _hasPlaceholderOption() {\n    return this.hasAttribute(\"required\") && !this.hasAttribute(\"multiple\") &&\n      this._displaySize === 1 && this.options.length > 0 && this.options.item(0).value === \"\" &&\n      this.options.item(0).parentNode._localName !== \"optgroup\";\n  }\n}\n\nmixin(HTMLSelectElementImpl.prototype, DefaultConstraintValidationImpl.prototype);\n\nmodule.exports = {\n  implementation: HTMLSelectElementImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}