{"ast":null,"code":"\"use strict\";\n\nconst {\n  EOL\n} = require(\"os\");\nconst Blob = require(\"../generated/Blob\");\nfunction convertLineEndingsToNative(s) {\n  return s.replace(/\\r\\n|\\r|\\n/g, EOL);\n}\nexports.implementation = class BlobImpl {\n  constructor(args) {\n    const parts = args[0];\n    const properties = args[1];\n    const buffers = [];\n    if (parts !== undefined) {\n      for (const part of parts) {\n        let buffer;\n        if (part instanceof ArrayBuffer) {\n          buffer = Buffer.from(part);\n        } else if (ArrayBuffer.isView(part)) {\n          buffer = Buffer.from(part.buffer, part.byteOffset, part.byteLength);\n        } else if (Blob.isImpl(part)) {\n          buffer = part._buffer;\n        } else {\n          let s = part;\n          if (properties.endings === \"native\") {\n            s = convertLineEndingsToNative(part);\n          }\n          buffer = Buffer.from(s);\n        }\n        buffers.push(buffer);\n      }\n    }\n    this._buffer = Buffer.concat(buffers);\n    this.type = properties.type;\n    if (/[^\\u0020-\\u007E]/.test(this.type)) {\n      this.type = \"\";\n    } else {\n      this.type = this.type.toLowerCase();\n    }\n  }\n  get size() {\n    return this._buffer.length;\n  }\n  slice(start, end, contentType) {\n    const {\n      size\n    } = this;\n    let relativeStart;\n    let relativeEnd;\n    let relativeContentType;\n    if (start === undefined) {\n      relativeStart = 0;\n    } else if (start < 0) {\n      relativeStart = Math.max(size + start, 0);\n    } else {\n      relativeStart = Math.min(start, size);\n    }\n    if (end === undefined) {\n      relativeEnd = size;\n    } else if (end < 0) {\n      relativeEnd = Math.max(size + end, 0);\n    } else {\n      relativeEnd = Math.min(end, size);\n    }\n    if (contentType === undefined) {\n      relativeContentType = \"\";\n    } else {\n      // sanitization (lower case and invalid char check) is done in the\n      // constructor\n      relativeContentType = contentType;\n    }\n    const span = Math.max(relativeEnd - relativeStart, 0);\n    const buffer = this._buffer;\n    const slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\n    const blob = Blob.createImpl([[], {\n      type: relativeContentType\n    }], {});\n    blob._buffer = slicedBuffer;\n    return blob;\n  }\n};","map":{"version":3,"names":["EOL","require","Blob","convertLineEndingsToNative","s","replace","exports","implementation","BlobImpl","constructor","args","parts","properties","buffers","undefined","part","buffer","ArrayBuffer","Buffer","from","isView","byteOffset","byteLength","isImpl","_buffer","endings","push","concat","type","test","toLowerCase","size","length","slice","start","end","contentType","relativeStart","relativeEnd","relativeContentType","Math","max","min","span","slicedBuffer","blob","createImpl"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/file-api/Blob-impl.js"],"sourcesContent":["\"use strict\";\nconst { EOL } = require(\"os\");\nconst Blob = require(\"../generated/Blob\");\n\nfunction convertLineEndingsToNative(s) {\n  return s.replace(/\\r\\n|\\r|\\n/g, EOL);\n}\n\nexports.implementation = class BlobImpl {\n  constructor(args) {\n    const parts = args[0];\n    const properties = args[1];\n\n    const buffers = [];\n\n    if (parts !== undefined) {\n      for (const part of parts) {\n        let buffer;\n        if (part instanceof ArrayBuffer) {\n          buffer = Buffer.from(part);\n        } else if (ArrayBuffer.isView(part)) {\n          buffer = Buffer.from(part.buffer, part.byteOffset, part.byteLength);\n        } else if (Blob.isImpl(part)) {\n          buffer = part._buffer;\n        } else {\n          let s = part;\n          if (properties.endings === \"native\") {\n            s = convertLineEndingsToNative(part);\n          }\n          buffer = Buffer.from(s);\n        }\n        buffers.push(buffer);\n      }\n    }\n\n    this._buffer = Buffer.concat(buffers);\n\n    this.type = properties.type;\n    if (/[^\\u0020-\\u007E]/.test(this.type)) {\n      this.type = \"\";\n    } else {\n      this.type = this.type.toLowerCase();\n    }\n  }\n\n  get size() {\n    return this._buffer.length;\n  }\n\n  slice(start, end, contentType) {\n    const { size } = this;\n\n    let relativeStart;\n    let relativeEnd;\n    let relativeContentType;\n\n    if (start === undefined) {\n      relativeStart = 0;\n    } else if (start < 0) {\n      relativeStart = Math.max(size + start, 0);\n    } else {\n      relativeStart = Math.min(start, size);\n    }\n    if (end === undefined) {\n      relativeEnd = size;\n    } else if (end < 0) {\n      relativeEnd = Math.max(size + end, 0);\n    } else {\n      relativeEnd = Math.min(end, size);\n    }\n\n    if (contentType === undefined) {\n      relativeContentType = \"\";\n    } else {\n      // sanitization (lower case and invalid char check) is done in the\n      // constructor\n      relativeContentType = contentType;\n    }\n\n    const span = Math.max(relativeEnd - relativeStart, 0);\n\n    const buffer = this._buffer;\n    const slicedBuffer = buffer.slice(\n      relativeStart,\n      relativeStart + span\n    );\n\n    const blob = Blob.createImpl([[], { type: relativeContentType }], {});\n    blob._buffer = slicedBuffer;\n    return blob;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}