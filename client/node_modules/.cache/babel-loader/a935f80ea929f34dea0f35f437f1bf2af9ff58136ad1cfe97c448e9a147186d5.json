{"ast":null,"code":"\"use strict\";\n\nconst whatwgURL = require(\"whatwg-url\");\nconst arrayEqual = require(\"array-equal\");\nconst notImplemented = require(\"../../browser/not-implemented.js\");\nconst reportException = require(\"../helpers/runtime-script-errors.js\");\nconst idlUtils = require(\"../generated/utils.js\");\nexports.evaluateJavaScriptURL = (window, urlRecord) => {\n  const urlString = whatwgURL.serializeURL(urlRecord);\n  const scriptSource = whatwgURL.percentDecode(Buffer.from(urlString)).toString();\n  if (window._runScripts === \"dangerously\") {\n    try {\n      return window.eval(scriptSource);\n    } catch (e) {\n      reportException(window, e, urlString);\n    }\n  }\n  return undefined;\n};\n\n// https://html.spec.whatwg.org/#navigating-across-documents\nexports.navigate = (window, newURL, flags) => {\n  // This is NOT a spec-compliant implementation of navigation in any way. It implements a few selective steps that\n  // are nice for jsdom users, regarding hash changes and JavaScript URLs. Full navigation support is being worked on\n  // and will likely require some additional hooks to be implemented.\n\n  const document = idlUtils.implForWrapper(window._document);\n  const currentURL = document._URL;\n  if (!flags.reloadTriggered && urlEquals(currentURL, newURL, {\n    excludeFragments: true\n  })) {\n    if (newURL.fragment !== currentURL.fragment) {\n      navigateToFragment(window, newURL, flags);\n    }\n    return;\n  }\n\n  // NOT IMPLEMENTED: Prompt to unload the active document of browsingContext.\n\n  // NOT IMPLEMENTED: form submission algorithm\n  // const navigationType = 'other';\n\n  // NOT IMPLEMENTED: if resource is a response...\n  if (newURL.scheme === \"javascript\") {\n    window.setTimeout(() => {\n      const result = exports.evaluateJavaScriptURL(window, newURL);\n      if (typeof result === \"string\") {\n        notImplemented(\"string results from 'javascript:' URLs\", window);\n      }\n    }, 0);\n    return;\n  }\n  navigateFetch(window);\n};\n\n// https://html.spec.whatwg.org/#scroll-to-fragid\nfunction navigateToFragment(window, newURL, flags) {\n  const document = idlUtils.implForWrapper(window._document);\n  window._sessionHistory.clearHistoryTraversalTasks();\n  if (!flags.replacement) {\n    // handling replacement=true here deviates from spec, but matches real browser behaviour\n    // see https://github.com/whatwg/html/issues/2796 for spec bug\n    window._sessionHistory.removeAllEntriesAfterCurrentEntry();\n  }\n  const newEntry = {\n    document,\n    url: newURL\n  };\n  window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\n  window._sessionHistory.traverseHistory(newEntry, {\n    nonBlockingEvents: true,\n    replacement: flags.replacement\n  });\n}\n\n// https://html.spec.whatwg.org/#process-a-navigate-fetch\nfunction navigateFetch(window) {\n  // TODO:\n  notImplemented(\"navigation (except hash changes)\", window);\n}\nfunction urlEquals(a, b, flags) {\n  if (a.scheme !== b.scheme || a.username !== b.username || a.password !== b.password || a.host !== b.host || a.port !== b.port || !arrayEqual(a.path, b.path) || a.query !== b.query ||\n  // Omitted per spec: url.fragment !== this._url.fragment ||\n  a.cannotBeABaseURL !== b.cannotBeABaseURL) {\n    return false;\n  }\n  return flags.excludeFragments || a.fragment === b.fragment;\n}","map":{"version":3,"names":["whatwgURL","require","arrayEqual","notImplemented","reportException","idlUtils","exports","evaluateJavaScriptURL","window","urlRecord","urlString","serializeURL","scriptSource","percentDecode","Buffer","from","toString","_runScripts","eval","e","undefined","navigate","newURL","flags","document","implForWrapper","_document","currentURL","_URL","reloadTriggered","urlEquals","excludeFragments","fragment","navigateToFragment","scheme","setTimeout","result","navigateFetch","_sessionHistory","clearHistoryTraversalTasks","replacement","removeAllEntriesAfterCurrentEntry","newEntry","url","addEntryAfterCurrentEntry","traverseHistory","nonBlockingEvents","a","b","username","password","host","port","path","query","cannotBeABaseURL"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/window/navigation.js"],"sourcesContent":["\"use strict\";\nconst whatwgURL = require(\"whatwg-url\");\nconst arrayEqual = require(\"array-equal\");\nconst notImplemented = require(\"../../browser/not-implemented.js\");\nconst reportException = require(\"../helpers/runtime-script-errors.js\");\nconst idlUtils = require(\"../generated/utils.js\");\n\nexports.evaluateJavaScriptURL = (window, urlRecord) => {\n  const urlString = whatwgURL.serializeURL(urlRecord);\n  const scriptSource = whatwgURL.percentDecode(Buffer.from(urlString)).toString();\n  if (window._runScripts === \"dangerously\") {\n    try {\n      return window.eval(scriptSource);\n    } catch (e) {\n      reportException(window, e, urlString);\n    }\n  }\n  return undefined;\n};\n\n// https://html.spec.whatwg.org/#navigating-across-documents\nexports.navigate = (window, newURL, flags) => {\n  // This is NOT a spec-compliant implementation of navigation in any way. It implements a few selective steps that\n  // are nice for jsdom users, regarding hash changes and JavaScript URLs. Full navigation support is being worked on\n  // and will likely require some additional hooks to be implemented.\n\n  const document = idlUtils.implForWrapper(window._document);\n  const currentURL = document._URL;\n\n  if (!flags.reloadTriggered && urlEquals(currentURL, newURL, { excludeFragments: true })) {\n    if (newURL.fragment !== currentURL.fragment) {\n      navigateToFragment(window, newURL, flags);\n    }\n    return;\n  }\n\n  // NOT IMPLEMENTED: Prompt to unload the active document of browsingContext.\n\n  // NOT IMPLEMENTED: form submission algorithm\n  // const navigationType = 'other';\n\n  // NOT IMPLEMENTED: if resource is a response...\n  if (newURL.scheme === \"javascript\") {\n    window.setTimeout(() => {\n      const result = exports.evaluateJavaScriptURL(window, newURL);\n      if (typeof result === \"string\") {\n        notImplemented(\"string results from 'javascript:' URLs\", window);\n      }\n    }, 0);\n    return;\n  }\n  navigateFetch(window);\n};\n\n// https://html.spec.whatwg.org/#scroll-to-fragid\nfunction navigateToFragment(window, newURL, flags) {\n  const document = idlUtils.implForWrapper(window._document);\n\n  window._sessionHistory.clearHistoryTraversalTasks();\n\n  if (!flags.replacement) {\n    // handling replacement=true here deviates from spec, but matches real browser behaviour\n    // see https://github.com/whatwg/html/issues/2796 for spec bug\n    window._sessionHistory.removeAllEntriesAfterCurrentEntry();\n  }\n  const newEntry = { document, url: newURL };\n  window._sessionHistory.addEntryAfterCurrentEntry(newEntry);\n  window._sessionHistory.traverseHistory(newEntry, { nonBlockingEvents: true, replacement: flags.replacement });\n}\n\n// https://html.spec.whatwg.org/#process-a-navigate-fetch\nfunction navigateFetch(window) {\n  // TODO:\n  notImplemented(\"navigation (except hash changes)\", window);\n}\n\nfunction urlEquals(a, b, flags) {\n  if (a.scheme !== b.scheme ||\n      a.username !== b.username ||\n      a.password !== b.password ||\n      a.host !== b.host ||\n      a.port !== b.port ||\n      !arrayEqual(a.path, b.path) ||\n      a.query !== b.query ||\n      // Omitted per spec: url.fragment !== this._url.fragment ||\n      a.cannotBeABaseURL !== b.cannotBeABaseURL) {\n    return false;\n  }\n  return flags.excludeFragments || a.fragment === b.fragment;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}