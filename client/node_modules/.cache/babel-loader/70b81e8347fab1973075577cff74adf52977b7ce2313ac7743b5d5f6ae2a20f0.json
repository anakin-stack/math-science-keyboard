{"ast":null,"code":"\"use strict\";\n\nconst Document = require(\"../generated/Document\");\nconst {\n  applyDocumentFeatures\n} = require(\"../../browser/documentfeatures\");\nexports.implementation = class DOMParserImpl {\n  parseFromString(string, contentType) {\n    switch (String(contentType)) {\n      case \"text/html\":\n        {\n          return createScriptingDisabledDocument(\"html\", contentType, string);\n        }\n      case \"text/xml\":\n      case \"application/xml\":\n      case \"application/xhtml+xml\":\n      case \"image/svg+xml\":\n        {\n          // TODO: use a strict XML parser (sax's strict mode might work?) and create parsererror elements\n          try {\n            return createScriptingDisabledDocument(\"xml\", contentType, string);\n          } catch (error) {\n            const document = createScriptingDisabledDocument(\"xml\", contentType);\n            const element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n            element.textContent = error.message;\n            document.appendChild(element);\n            return document;\n          }\n        }\n      default:\n        throw new TypeError(\"Invalid contentType\");\n    }\n  }\n};\nfunction createScriptingDisabledDocument(parsingMode, contentType, string) {\n  const document = Document.createImpl([], {\n    options: {\n      parsingMode,\n      encoding: \"UTF-8\",\n      contentType\n      // TODO: somehow set URL to active document's URL\n    }\n  });\n\n  // \"scripting enabled\" set to false\n  applyDocumentFeatures(document, {\n    FetchExternalResources: [],\n    SkipExternalResources: false\n  });\n  if (string !== undefined) {\n    document._htmlToDom.appendToDocument(string, document);\n  }\n  document.close();\n  return document;\n}","map":{"version":3,"names":["Document","require","applyDocumentFeatures","exports","implementation","DOMParserImpl","parseFromString","string","contentType","String","createScriptingDisabledDocument","error","document","element","createElementNS","textContent","message","appendChild","TypeError","parsingMode","createImpl","options","encoding","FetchExternalResources","SkipExternalResources","undefined","_htmlToDom","appendToDocument","close"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/domparsing/DOMParser-impl.js"],"sourcesContent":["\"use strict\";\nconst Document = require(\"../generated/Document\");\nconst { applyDocumentFeatures } = require(\"../../browser/documentfeatures\");\n\nexports.implementation = class DOMParserImpl {\n  parseFromString(string, contentType) {\n    switch (String(contentType)) {\n      case \"text/html\": {\n        return createScriptingDisabledDocument(\"html\", contentType, string);\n      }\n\n      case \"text/xml\":\n      case \"application/xml\":\n      case \"application/xhtml+xml\":\n      case \"image/svg+xml\": {\n        // TODO: use a strict XML parser (sax's strict mode might work?) and create parsererror elements\n        try {\n          return createScriptingDisabledDocument(\"xml\", contentType, string);\n        } catch (error) {\n          const document = createScriptingDisabledDocument(\"xml\", contentType);\n          const element = document.createElementNS(\"http://www.mozilla.org/newlayout/xml/parsererror.xml\", \"parsererror\");\n\n          element.textContent = error.message;\n\n          document.appendChild(element);\n          return document;\n        }\n      }\n\n      default:\n        throw new TypeError(\"Invalid contentType\");\n    }\n  }\n};\n\nfunction createScriptingDisabledDocument(parsingMode, contentType, string) {\n  const document = Document.createImpl([], {\n    options: {\n      parsingMode,\n      encoding: \"UTF-8\",\n      contentType\n      // TODO: somehow set URL to active document's URL\n    }\n  });\n\n  // \"scripting enabled\" set to false\n  applyDocumentFeatures(document, {\n    FetchExternalResources: [],\n    SkipExternalResources: false\n  });\n\n  if (string !== undefined) {\n    document._htmlToDom.appendToDocument(string, document);\n  }\n  document.close();\n  return document;\n}\n"],"mappings":"AAAA,YAAY;;AACZ,MAAMA,QAAQ,GAAGC,OAAO,CAAC,uBAAuB,CAAC;AACjD,MAAM;EAAEC;AAAsB,CAAC,GAAGD,OAAO,CAAC,gCAAgC,CAAC;AAE3EE,OAAO,CAACC,cAAc,GAAG,MAAMC,aAAa,CAAC;EAC3CC,eAAeA,CAACC,MAAM,EAAEC,WAAW,EAAE;IACnC,QAAQC,MAAM,CAACD,WAAW,CAAC;MACzB,KAAK,WAAW;QAAE;UAChB,OAAOE,+BAA+B,CAAC,MAAM,EAAEF,WAAW,EAAED,MAAM,CAAC;QACrE;MAEA,KAAK,UAAU;MACf,KAAK,iBAAiB;MACtB,KAAK,uBAAuB;MAC5B,KAAK,eAAe;QAAE;UACpB;UACA,IAAI;YACF,OAAOG,+BAA+B,CAAC,KAAK,EAAEF,WAAW,EAAED,MAAM,CAAC;UACpE,CAAC,CAAC,OAAOI,KAAK,EAAE;YACd,MAAMC,QAAQ,GAAGF,+BAA+B,CAAC,KAAK,EAAEF,WAAW,CAAC;YACpE,MAAMK,OAAO,GAAGD,QAAQ,CAACE,eAAe,CAAC,sDAAsD,EAAE,aAAa,CAAC;YAE/GD,OAAO,CAACE,WAAW,GAAGJ,KAAK,CAACK,OAAO;YAEnCJ,QAAQ,CAACK,WAAW,CAACJ,OAAO,CAAC;YAC7B,OAAOD,QAAQ;UACjB;QACF;MAEA;QACE,MAAM,IAAIM,SAAS,CAAC,qBAAqB,CAAC;IAC9C;EACF;AACF,CAAC;AAED,SAASR,+BAA+BA,CAACS,WAAW,EAAEX,WAAW,EAAED,MAAM,EAAE;EACzE,MAAMK,QAAQ,GAAGZ,QAAQ,CAACoB,UAAU,CAAC,EAAE,EAAE;IACvCC,OAAO,EAAE;MACPF,WAAW;MACXG,QAAQ,EAAE,OAAO;MACjBd;MACA;IACF;EACF,CAAC,CAAC;;EAEF;EACAN,qBAAqB,CAACU,QAAQ,EAAE;IAC9BW,sBAAsB,EAAE,EAAE;IAC1BC,qBAAqB,EAAE;EACzB,CAAC,CAAC;EAEF,IAAIjB,MAAM,KAAKkB,SAAS,EAAE;IACxBb,QAAQ,CAACc,UAAU,CAACC,gBAAgB,CAACpB,MAAM,EAAEK,QAAQ,CAAC;EACxD;EACAA,QAAQ,CAACgB,KAAK,CAAC,CAAC;EAChB,OAAOhB,QAAQ;AACjB"},"metadata":{},"sourceType":"script","externalDependencies":[]}