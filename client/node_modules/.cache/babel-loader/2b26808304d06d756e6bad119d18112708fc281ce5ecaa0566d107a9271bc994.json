{"ast":null,"code":"\"use strict\";\n\nconst vm = require(\"vm\");\nconst conversions = require(\"webidl-conversions\");\nconst idlUtils = require(\"../generated/utils\");\nconst ErrorEvent = require(\"../generated/ErrorEvent\");\nconst reportException = require(\"./runtime-script-errors\");\nexports.appendHandler = function appendHandler(el, eventName) {\n  el.addEventListener(eventName, event => {\n    // https://html.spec.whatwg.org/#the-event-handler-processing-algorithm\n    event = idlUtils.implForWrapper(event);\n    const callback = el[\"on\" + eventName];\n    if (callback === null) {\n      return;\n    }\n    const specialError = ErrorEvent.isImpl(event) && event.type === \"error\" && event.currentTarget.constructor.name === \"Window\";\n    let returnValue = null;\n    const thisValue = idlUtils.tryWrapperForImpl(event.currentTarget);\n    // https://heycam.github.io/webidl/#es-invoking-callback-functions\n    if (typeof callback === \"function\") {\n      if (specialError) {\n        returnValue = callback.call(thisValue, event.message, event.filename, event.lineno, event.colno, event.error);\n      } else {\n        const eventWrapper = idlUtils.wrapperForImpl(event);\n        returnValue = callback.call(thisValue, eventWrapper);\n      }\n    }\n    if (event.type === \"beforeunload\") {\n      // TODO: we don't implement BeforeUnloadEvent so we can't brand-check here\n      // Perform conversion which in the spec is done by the event handler return type being DOMString?\n      returnValue = returnValue === undefined || returnValue === null ? null : conversions.DOMString(returnValue);\n      if (returnValue !== null) {\n        event._canceledFlag = true;\n        if (event.returnValue === \"\") {\n          event.returnValue = returnValue;\n        }\n      }\n    } else if (specialError) {\n      if (returnValue === true) {\n        event._canceledFlag = true;\n      }\n    } else if (returnValue === false) {\n      event._canceledFlag = true;\n    }\n  });\n};\n\n// \"Simple\" in this case means \"no content attributes involved\"\nexports.setupForSimpleEventAccessors = (prototype, events) => {\n  prototype._getEventHandlerFor = function (event) {\n    return this._eventHandlers ? this._eventHandlers[event] : undefined;\n  };\n  prototype._setEventHandlerFor = function (event, handler) {\n    if (!this._registeredHandlers) {\n      this._registeredHandlers = new Set();\n      this._eventHandlers = Object.create(null);\n    }\n    if (!this._registeredHandlers.has(event) && handler !== null) {\n      this._registeredHandlers.add(event);\n      exports.appendHandler(this, event);\n    }\n    this._eventHandlers[event] = handler;\n  };\n  for (const event of events) {\n    exports.createEventAccessor(prototype, event);\n  }\n};\n\n// https://html.spec.whatwg.org/#event-handler-idl-attributes\nexports.createEventAccessor = function createEventAccessor(obj, event) {\n  Object.defineProperty(obj, \"on\" + event, {\n    configurable: true,\n    enumerable: true,\n    get() {\n      // https://html.spec.whatwg.org/#getting-the-current-value-of-the-event-handler\n      const value = this._getEventHandlerFor(event);\n      if (!value) {\n        return null;\n      }\n      if (value.body !== undefined) {\n        let element;\n        let document;\n        if (this.constructor.name === \"Window\") {\n          element = null;\n          document = idlUtils.implForWrapper(this.document);\n        } else {\n          element = this;\n          document = element.ownerDocument;\n        }\n        const {\n          body\n        } = value;\n        const formOwner = element !== null && element.form ? element.form : null;\n        const window = this.constructor.name === \"Window\" && this._document ? this : document.defaultView;\n        try {\n          // eslint-disable-next-line no-new-func\n          Function(body); // properly error out on syntax errors\n          // Note: this won't execute body; that would require `Function(body)()`.\n        } catch (e) {\n          if (window) {\n            reportException(window, e);\n          }\n          this._setEventHandlerFor(event, null);\n          return null;\n        }\n\n        // Note: the with (window) { } is not necessary in Node, but is necessary in a browserified environment.\n\n        let fn;\n        const createFunction = vm.isContext(document._global) ? document.defaultView._globalProxy.Function : Function;\n        if (event === \"error\" && element === null) {\n          const wrapperBody = document ? body + `\\n//# sourceURL=${document.URL}` : body;\n\n          // eslint-disable-next-line no-new-func\n          fn = createFunction(\"window\", `with (window) { return function onerror(event, source, lineno, colno, error) {\n  ${wrapperBody}\n}; }`)(window);\n        } else {\n          const argNames = [];\n          const args = [];\n          argNames.push(\"window\");\n          args.push(window);\n          if (element !== null) {\n            argNames.push(\"document\");\n            args.push(idlUtils.wrapperForImpl(document));\n          }\n          if (formOwner !== null) {\n            argNames.push(\"formOwner\");\n            args.push(idlUtils.wrapperForImpl(formOwner));\n          }\n          if (element !== null) {\n            argNames.push(\"element\");\n            args.push(idlUtils.wrapperForImpl(element));\n          }\n          let wrapperBody = `\nreturn function on${event}(event) {\n  ${body}\n};`;\n          for (let i = argNames.length - 1; i >= 0; --i) {\n            wrapperBody = `with (${argNames[i]}) { ${wrapperBody} }`;\n          }\n          if (document) {\n            wrapperBody += `\\n//# sourceURL=${document.URL}`;\n          }\n          argNames.push(wrapperBody);\n          fn = createFunction(...argNames)(...args);\n        }\n        this._setEventHandlerFor(event, fn);\n      }\n      return this._getEventHandlerFor(event);\n    },\n    set(val) {\n      val = eventHandlerArgCoercion(val);\n      this._setEventHandlerFor(event, val);\n    }\n  });\n};\nfunction typeIsObject(v) {\n  return typeof v === \"object\" && v !== null || typeof v === \"function\";\n}\n\n// Implements:\n//     [TreatNonObjectAsNull]\n//     callback EventHandlerNonNull = any (Event event);\n//     typedef EventHandlerNonNull? EventHandler;\n// Also implements the part of https://heycam.github.io/webidl/#es-invoking-callback-functions which treats\n// non-callable callback functions as callback functions that return undefined.\n// TODO: replace with webidl2js typechecking when it has sufficient callback support\nfunction eventHandlerArgCoercion(val) {\n  if (!typeIsObject(val)) {\n    return null;\n  }\n  return val;\n}","map":{"version":3,"names":["vm","require","conversions","idlUtils","ErrorEvent","reportException","exports","appendHandler","el","eventName","addEventListener","event","implForWrapper","callback","specialError","isImpl","type","currentTarget","constructor","name","returnValue","thisValue","tryWrapperForImpl","call","message","filename","lineno","colno","error","eventWrapper","wrapperForImpl","undefined","DOMString","_canceledFlag","setupForSimpleEventAccessors","prototype","events","_getEventHandlerFor","_eventHandlers","_setEventHandlerFor","handler","_registeredHandlers","Set","Object","create","has","add","createEventAccessor","obj","defineProperty","configurable","enumerable","get","value","body","element","document","ownerDocument","formOwner","form","window","_document","defaultView","Function","e","fn","createFunction","isContext","_global","_globalProxy","wrapperBody","URL","argNames","args","push","i","length","set","val","eventHandlerArgCoercion","typeIsObject","v"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/helpers/create-event-accessor.js"],"sourcesContent":["\"use strict\";\n\nconst vm = require(\"vm\");\nconst conversions = require(\"webidl-conversions\");\nconst idlUtils = require(\"../generated/utils\");\nconst ErrorEvent = require(\"../generated/ErrorEvent\");\nconst reportException = require(\"./runtime-script-errors\");\n\nexports.appendHandler = function appendHandler(el, eventName) {\n  el.addEventListener(eventName, event => {\n    // https://html.spec.whatwg.org/#the-event-handler-processing-algorithm\n    event = idlUtils.implForWrapper(event);\n\n    const callback = el[\"on\" + eventName];\n    if (callback === null) {\n      return;\n    }\n\n    const specialError = ErrorEvent.isImpl(event) && event.type === \"error\" &&\n      event.currentTarget.constructor.name === \"Window\";\n\n    let returnValue = null;\n    const thisValue = idlUtils.tryWrapperForImpl(event.currentTarget);\n    // https://heycam.github.io/webidl/#es-invoking-callback-functions\n    if (typeof callback === \"function\") {\n      if (specialError) {\n        returnValue = callback.call(\n          thisValue, event.message,\n          event.filename, event.lineno, event.colno, event.error\n        );\n      } else {\n        const eventWrapper = idlUtils.wrapperForImpl(event);\n        returnValue = callback.call(thisValue, eventWrapper);\n      }\n    }\n\n    if (event.type === \"beforeunload\") { // TODO: we don't implement BeforeUnloadEvent so we can't brand-check here\n      // Perform conversion which in the spec is done by the event handler return type being DOMString?\n      returnValue = returnValue === undefined || returnValue === null ? null : conversions.DOMString(returnValue);\n\n      if (returnValue !== null) {\n        event._canceledFlag = true;\n        if (event.returnValue === \"\") {\n          event.returnValue = returnValue;\n        }\n      }\n    } else if (specialError) {\n      if (returnValue === true) {\n        event._canceledFlag = true;\n      }\n    } else if (returnValue === false) {\n      event._canceledFlag = true;\n    }\n  });\n};\n\n// \"Simple\" in this case means \"no content attributes involved\"\nexports.setupForSimpleEventAccessors = (prototype, events) => {\n  prototype._getEventHandlerFor = function (event) {\n    return this._eventHandlers ? this._eventHandlers[event] : undefined;\n  };\n\n  prototype._setEventHandlerFor = function (event, handler) {\n    if (!this._registeredHandlers) {\n      this._registeredHandlers = new Set();\n      this._eventHandlers = Object.create(null);\n    }\n\n    if (!this._registeredHandlers.has(event) && handler !== null) {\n      this._registeredHandlers.add(event);\n      exports.appendHandler(this, event);\n    }\n    this._eventHandlers[event] = handler;\n  };\n\n  for (const event of events) {\n    exports.createEventAccessor(prototype, event);\n  }\n};\n\n// https://html.spec.whatwg.org/#event-handler-idl-attributes\nexports.createEventAccessor = function createEventAccessor(obj, event) {\n  Object.defineProperty(obj, \"on\" + event, {\n    configurable: true,\n    enumerable: true,\n    get() { // https://html.spec.whatwg.org/#getting-the-current-value-of-the-event-handler\n      const value = this._getEventHandlerFor(event);\n      if (!value) {\n        return null;\n      }\n\n      if (value.body !== undefined) {\n        let element;\n        let document;\n        if (this.constructor.name === \"Window\") {\n          element = null;\n          document = idlUtils.implForWrapper(this.document);\n        } else {\n          element = this;\n          document = element.ownerDocument;\n        }\n        const { body } = value;\n\n        const formOwner = element !== null && element.form ? element.form : null;\n        const window = this.constructor.name === \"Window\" && this._document ? this : document.defaultView;\n\n        try {\n          // eslint-disable-next-line no-new-func\n          Function(body); // properly error out on syntax errors\n          // Note: this won't execute body; that would require `Function(body)()`.\n        } catch (e) {\n          if (window) {\n            reportException(window, e);\n          }\n          this._setEventHandlerFor(event, null);\n          return null;\n        }\n\n        // Note: the with (window) { } is not necessary in Node, but is necessary in a browserified environment.\n\n        let fn;\n        const createFunction = vm.isContext(document._global) ? document.defaultView._globalProxy.Function : Function;\n        if (event === \"error\" && element === null) {\n          const wrapperBody = document ? body + `\\n//# sourceURL=${document.URL}` : body;\n\n          // eslint-disable-next-line no-new-func\n          fn = createFunction(\"window\", `with (window) { return function onerror(event, source, lineno, colno, error) {\n  ${wrapperBody}\n}; }`)(window);\n        } else {\n          const argNames = [];\n          const args = [];\n\n          argNames.push(\"window\");\n          args.push(window);\n\n          if (element !== null) {\n            argNames.push(\"document\");\n            args.push(idlUtils.wrapperForImpl(document));\n          }\n          if (formOwner !== null) {\n            argNames.push(\"formOwner\");\n            args.push(idlUtils.wrapperForImpl(formOwner));\n          }\n          if (element !== null) {\n            argNames.push(\"element\");\n            args.push(idlUtils.wrapperForImpl(element));\n          }\n          let wrapperBody = `\nreturn function on${event}(event) {\n  ${body}\n};`;\n          for (let i = argNames.length - 1; i >= 0; --i) {\n            wrapperBody = `with (${argNames[i]}) { ${wrapperBody} }`;\n          }\n          if (document) {\n            wrapperBody += `\\n//# sourceURL=${document.URL}`;\n          }\n          argNames.push(wrapperBody);\n          fn = createFunction(...argNames)(...args);\n        }\n\n        this._setEventHandlerFor(event, fn);\n      }\n      return this._getEventHandlerFor(event);\n    },\n    set(val) {\n      val = eventHandlerArgCoercion(val);\n      this._setEventHandlerFor(event, val);\n    }\n  });\n};\n\nfunction typeIsObject(v) {\n  return (typeof v === \"object\" && v !== null) || typeof v === \"function\";\n}\n\n// Implements:\n//     [TreatNonObjectAsNull]\n//     callback EventHandlerNonNull = any (Event event);\n//     typedef EventHandlerNonNull? EventHandler;\n// Also implements the part of https://heycam.github.io/webidl/#es-invoking-callback-functions which treats\n// non-callable callback functions as callback functions that return undefined.\n// TODO: replace with webidl2js typechecking when it has sufficient callback support\nfunction eventHandlerArgCoercion(val) {\n  if (!typeIsObject(val)) {\n    return null;\n  }\n\n  return val;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}