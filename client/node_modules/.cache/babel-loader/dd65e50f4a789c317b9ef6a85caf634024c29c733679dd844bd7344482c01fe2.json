{"ast":null,"code":"\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\nconst convertSupportedType = require(\"./SupportedType.js\").convert;\nconst impl = utils.implSymbol;\nfunction DOMParser() {\n  if (new.target === undefined) {\n    throw new TypeError(\"Failed to construct 'DOMParser'. Please use the 'new' operator; this constructor \" + \"cannot be called as a function.\");\n  }\n  iface.setup(this);\n}\nObject.defineProperty(DOMParser, \"prototype\", {\n  value: DOMParser.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\nDOMParser.prototype.parseFromString = function parseFromString(str, type) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n  if (arguments.length < 2) {\n    throw new TypeError(\"Failed to execute 'parseFromString' on 'DOMParser': 2 arguments required, but only \" + arguments.length + \" present.\");\n  }\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = convertSupportedType(curArg, {\n      context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].parseFromString(...args));\n};\nObject.defineProperty(DOMParser.prototype, Symbol.toStringTag, {\n  value: \"DOMParser\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj) {\n    let {\n      context = \"The provided value\"\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'DOMParser'.`);\n  },\n  create(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {},\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n    privateData.wrapper = obj;\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: DOMParser,\n  expose: {\n    Window: {\n      DOMParser\n    }\n  }\n}; // iface\nmodule.exports = iface;\nconst Impl = require(\"../domparsing/DOMParser-impl.js\");","map":{"version":3,"names":["conversions","require","utils","convertSupportedType","convert","impl","implSymbol","DOMParser","new","target","undefined","TypeError","iface","setup","Object","defineProperty","value","prototype","writable","enumerable","configurable","parseFromString","str","type","module","exports","is","arguments","length","args","curArg","context","push","tryWrapperForImpl","Symbol","toStringTag","_mixedIntoPredicates","obj","hasOwn","Impl","implementation","isMixedInto","isImpl","wrapper","wrapperForImpl","implForWrapper","create","constructorArgs","privateData","createImpl","_internalSetup","wrapperSymbol","init","interface","expose","Window"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/generated/DOMParser.js"],"sourcesContent":["\"use strict\";\n\nconst conversions = require(\"webidl-conversions\");\nconst utils = require(\"./utils.js\");\n\nconst convertSupportedType = require(\"./SupportedType.js\").convert;\nconst impl = utils.implSymbol;\n\nfunction DOMParser() {\n  if (new.target === undefined) {\n    throw new TypeError(\n      \"Failed to construct 'DOMParser'. Please use the 'new' operator; this constructor \" +\n        \"cannot be called as a function.\"\n    );\n  }\n\n  iface.setup(this);\n}\n\nObject.defineProperty(DOMParser, \"prototype\", {\n  value: DOMParser.prototype,\n  writable: false,\n  enumerable: false,\n  configurable: false\n});\n\nDOMParser.prototype.parseFromString = function parseFromString(str, type) {\n  if (!this || !module.exports.is(this)) {\n    throw new TypeError(\"Illegal invocation\");\n  }\n\n  if (arguments.length < 2) {\n    throw new TypeError(\n      \"Failed to execute 'parseFromString' on 'DOMParser': 2 arguments required, but only \" +\n        arguments.length +\n        \" present.\"\n    );\n  }\n  const args = [];\n  {\n    let curArg = arguments[0];\n    curArg = conversions[\"DOMString\"](curArg, {\n      context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 1\"\n    });\n    args.push(curArg);\n  }\n  {\n    let curArg = arguments[1];\n    curArg = convertSupportedType(curArg, {\n      context: \"Failed to execute 'parseFromString' on 'DOMParser': parameter 2\"\n    });\n    args.push(curArg);\n  }\n  return utils.tryWrapperForImpl(this[impl].parseFromString(...args));\n};\n\nObject.defineProperty(DOMParser.prototype, Symbol.toStringTag, {\n  value: \"DOMParser\",\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\n\nconst iface = {\n  // When an interface-module that implements this interface as a mixin is loaded, it will append its own `.is()`\n  // method into this array. It allows objects that directly implements *those* interfaces to be recognized as\n  // implementing this mixin interface.\n  _mixedIntoPredicates: [],\n  is(obj) {\n    if (obj) {\n      if (utils.hasOwn(obj, impl) && obj[impl] instanceof Impl.implementation) {\n        return true;\n      }\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(obj)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  isImpl(obj) {\n    if (obj) {\n      if (obj instanceof Impl.implementation) {\n        return true;\n      }\n\n      const wrapper = utils.wrapperForImpl(obj);\n      for (const isMixedInto of module.exports._mixedIntoPredicates) {\n        if (isMixedInto(wrapper)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  },\n  convert(obj, { context = \"The provided value\" } = {}) {\n    if (module.exports.is(obj)) {\n      return utils.implForWrapper(obj);\n    }\n    throw new TypeError(`${context} is not of type 'DOMParser'.`);\n  },\n\n  create(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return obj;\n  },\n  createImpl(constructorArgs, privateData) {\n    let obj = Object.create(DOMParser.prototype);\n    obj = this.setup(obj, constructorArgs, privateData);\n    return utils.implForWrapper(obj);\n  },\n  _internalSetup(obj) {},\n  setup(obj, constructorArgs, privateData) {\n    if (!privateData) privateData = {};\n\n    privateData.wrapper = obj;\n\n    this._internalSetup(obj);\n    Object.defineProperty(obj, impl, {\n      value: new Impl.implementation(constructorArgs, privateData),\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n\n    obj[impl][utils.wrapperSymbol] = obj;\n    if (Impl.init) {\n      Impl.init(obj[impl], privateData);\n    }\n    return obj;\n  },\n  interface: DOMParser,\n  expose: {\n    Window: { DOMParser }\n  }\n}; // iface\nmodule.exports = iface;\n\nconst Impl = require(\"../domparsing/DOMParser-impl.js\");\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}