{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst {\n  stripAndCollapseASCIIWhitespace\n} = require(\"../helpers/strings\");\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\nconst {\n  closest\n} = require(\"../helpers/traversal\");\nclass HTMLOptionElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n    this._selectedness = false;\n    this._dirtyness = false;\n  }\n  _removeOtherSelectedness() {\n    // Remove the selectedness flag from all other options in this select\n    const select = this._selectNode;\n    if (select && !select.hasAttribute(\"multiple\")) {\n      for (const option of select.options) {\n        if (option !== this) {\n          option._selectedness = false;\n        }\n      }\n    }\n  }\n  _askForAReset() {\n    const select = this._selectNode;\n    if (select) {\n      select._askedForAReset();\n    }\n  }\n  _attrModified(name) {\n    if (!this._dirtyness && name === \"selected\") {\n      this._selectedness = this.hasAttribute(\"selected\");\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n      this._askForAReset();\n    }\n    super._attrModified.apply(this, arguments);\n  }\n  get _selectNode() {\n    let select = domSymbolTree.parent(this);\n    if (!select) {\n      return null;\n    }\n    if (select.nodeName.toUpperCase() !== \"SELECT\") {\n      select = domSymbolTree.parent(select);\n      if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n        return null;\n      }\n    }\n    return select;\n  }\n  get form() {\n    return closest(this, \"form\");\n  }\n  get text() {\n    // TODO is not correctly excluding script and SVG script descendants\n    return stripAndCollapseASCIIWhitespace(this.textContent);\n  }\n  set text(V) {\n    this.textContent = V;\n  }\n  get value() {\n    return this.hasAttribute(\"value\") ? this.getAttribute(\"value\") : this.text;\n  }\n  set value(val) {\n    this.setAttribute(\"value\", val);\n  }\n  get index() {\n    const select = closest(this, \"select\");\n    if (select === null) {\n      return 0;\n    }\n    return select.options.indexOf(this);\n  }\n  get selected() {\n    return this._selectedness;\n  }\n  set selected(s) {\n    this._dirtyness = true;\n    this._selectedness = Boolean(s);\n    if (this._selectedness) {\n      this._removeOtherSelectedness();\n    }\n    this._askForAReset();\n  }\n\n  // TODO this is quite wrong\n  get label() {\n    if (this.hasAttribute(\"label\")) {\n      return this.getAttribute(\"label\");\n    }\n    const select = this._selectNode;\n    if (select) {\n      return select.getAttribute(\"label\");\n    }\n    return null;\n  }\n  set label(V) {\n    const select = this._selectNode;\n    if (select) {\n      select.setAttribute(\"label\", V);\n    }\n  }\n}\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};","map":{"version":3,"names":["HTMLElementImpl","require","implementation","stripAndCollapseASCIIWhitespace","domSymbolTree","closest","HTMLOptionElementImpl","constructor","args","privateData","_selectedness","_dirtyness","_removeOtherSelectedness","select","_selectNode","hasAttribute","option","options","_askForAReset","_askedForAReset","_attrModified","name","apply","arguments","parent","nodeName","toUpperCase","form","text","textContent","V","value","getAttribute","val","setAttribute","index","indexOf","selected","s","Boolean","label","module","exports"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/nodes/HTMLOptionElement-impl.js"],"sourcesContent":["\"use strict\";\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { stripAndCollapseASCIIWhitespace } = require(\"../helpers/strings\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { closest } = require(\"../helpers/traversal\");\n\nclass HTMLOptionElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n\n    // whenever selectedness is set to true, make sure all\n    // other options set selectedness to false\n    this._selectedness = false;\n    this._dirtyness = false;\n  }\n  _removeOtherSelectedness() {\n    // Remove the selectedness flag from all other options in this select\n    const select = this._selectNode;\n\n    if (select && !select.hasAttribute(\"multiple\")) {\n      for (const option of select.options) {\n        if (option !== this) {\n          option._selectedness = false;\n        }\n      }\n    }\n  }\n  _askForAReset() {\n    const select = this._selectNode;\n    if (select) {\n      select._askedForAReset();\n    }\n  }\n  _attrModified(name) {\n    if (!this._dirtyness && name === \"selected\") {\n      this._selectedness = this.hasAttribute(\"selected\");\n      if (this._selectedness) {\n        this._removeOtherSelectedness();\n      }\n      this._askForAReset();\n    }\n    super._attrModified.apply(this, arguments);\n  }\n  get _selectNode() {\n    let select = domSymbolTree.parent(this);\n    if (!select) {\n      return null;\n    }\n\n    if (select.nodeName.toUpperCase() !== \"SELECT\") {\n      select = domSymbolTree.parent(select);\n      if (!select || select.nodeName.toUpperCase() !== \"SELECT\") {\n        return null;\n      }\n    }\n    return select;\n  }\n  get form() {\n    return closest(this, \"form\");\n  }\n  get text() {\n    // TODO is not correctly excluding script and SVG script descendants\n    return stripAndCollapseASCIIWhitespace(this.textContent);\n  }\n  set text(V) {\n    this.textContent = V;\n  }\n\n  get value() {\n    return this.hasAttribute(\"value\") ? this.getAttribute(\"value\") : this.text;\n  }\n  set value(val) {\n    this.setAttribute(\"value\", val);\n  }\n  get index() {\n    const select = closest(this, \"select\");\n    if (select === null) {\n      return 0;\n    }\n\n    return select.options.indexOf(this);\n  }\n  get selected() {\n    return this._selectedness;\n  }\n  set selected(s) {\n    this._dirtyness = true;\n    this._selectedness = Boolean(s);\n    if (this._selectedness) {\n      this._removeOtherSelectedness();\n    }\n    this._askForAReset();\n  }\n\n  // TODO this is quite wrong\n  get label() {\n    if (this.hasAttribute(\"label\")) {\n      return this.getAttribute(\"label\");\n    }\n    const select = this._selectNode;\n    if (select) {\n      return select.getAttribute(\"label\");\n    }\n    return null;\n  }\n\n  set label(V) {\n    const select = this._selectNode;\n    if (select) {\n      select.setAttribute(\"label\", V);\n    }\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLOptionElementImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}