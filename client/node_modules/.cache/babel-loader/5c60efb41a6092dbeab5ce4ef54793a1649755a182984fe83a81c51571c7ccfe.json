{"ast":null,"code":"\"use strict\";\n\nconst {\n  isValidFloatingPointNumber,\n  isValidSimpleColor,\n  parseFloatingPointNumber,\n  stripLeadingAndTrailingASCIIWhitespace,\n  stripNewlines,\n  splitOnCommas\n} = require(\"./strings\");\nconst {\n  isValidDateString,\n  isValidMonthString,\n  isValidTimeString,\n  isValidWeekString,\n  parseLocalDateAndTimeString,\n  serializeNormalizedDateAndTime\n} = require(\"./dates-and-times\");\nconst whatwgURL = require(\"whatwg-url\");\nconst NodeList = require(\"../generated/NodeList\");\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\nconst NODE_TYPE = require(\"../node-type\");\nconst submittableLocalNames = new Set([\"button\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"]);\nexports.isDisabled = formControl => {\n  if (formControl.localName === \"button\" || formControl.localName === \"input\" || formControl.localName === \"select\" || formControl.localName === \"textarea\") {\n    if (formControl.hasAttribute(\"disabled\")) {\n      return true;\n    }\n  }\n  let e = formControl.parentNode;\n  while (e) {\n    if (e.localName === \"fieldset\" && e.hasAttribute(\"disabled\")) {\n      const firstLegendElementChild = e.querySelector(\"legend\");\n      if (!firstLegendElementChild || !firstLegendElementChild.contains(formControl)) {\n        return true;\n      }\n    }\n    e = e.parentNode;\n  }\n  return false;\n};\nexports.isSubmittable = formControl => {\n  // https://html.spec.whatwg.org/multipage/forms.html#category-submit\n  return submittableLocalNames.has(formControl.localName);\n};\nexports.isButton = formControl => {\n  // https://html.spec.whatwg.org/multipage/forms.html#concept-button\n  return formControl.type === \"button\" || formControl.type === \"submit\" || formControl.type === \"reset\" || formControl.type === \"image\" || formControl.localName === \"button\";\n};\nexports.normalizeToCRLF = string => {\n  return string.replace(/\\r([^\\n])/g, \"\\r\\n$1\").replace(/\\r$/, \"\\r\\n\").replace(/([^\\r])\\n/g, \"$1\\r\\n\").replace(/^\\n/, \"\\r\\n\");\n};\nexports.isLabelable = node => {\n  // labelable logic defined at: https://html.spec.whatwg.org/multipage/forms.html#category-label\n  if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n    return false;\n  }\n  switch (node.tagName) {\n    case \"BUTTON\":\n    case \"METER\":\n    case \"OUTPUT\":\n    case \"PROGRESS\":\n    case \"SELECT\":\n    case \"TEXTAREA\":\n      return true;\n    case \"INPUT\":\n      return node.type !== \"hidden\";\n  }\n  return false;\n};\nexports.getLabelsForLabelable = labelable => {\n  if (!exports.isLabelable(labelable)) {\n    return null;\n  }\n  if (!labelable._labels) {\n    const root = labelable.getRootNode();\n    labelable._labels = NodeList.create([], {\n      element: root,\n      query: () => {\n        const nodes = [];\n        for (const descendant of domSymbolTree.treeIterator(root)) {\n          if (descendant.control === labelable) {\n            nodes.push(descendant);\n          }\n        }\n        return nodes;\n      }\n    });\n  }\n  return labelable._labels;\n};\n\n// https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\nexports.isValidEmailAddress = function (emailAddress) {\n  let multiple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  const emailAddressRegExp = new RegExp(\"^[a-zA-Z0-9.!#$%&'*+\\\\/=?^_`{|}~-]+@[a-zA-Z0-9]\" + \"(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}\" + \"[a-zA-Z0-9])?)*$\");\n  // A valid e-mail address list is a set of comma-separated tokens, where each token is itself\n  // a valid e - mail address.To obtain the list of tokens from a valid e - mail address list,\n  // an implementation must split the string on commas.\n  if (multiple) {\n    return splitOnCommas(emailAddress).every(value => emailAddressRegExp.test(value));\n  }\n  return emailAddressRegExp.test(emailAddress);\n};\nexports.isValidAbsoluteURL = url => {\n  return whatwgURL.parseURL(url) !== null;\n};\nexports.sanitizeValueByType = (input, val) => {\n  switch (input.type.toLowerCase()) {\n    case \"password\":\n    case \"search\":\n    case \"tel\":\n    case \"text\":\n      val = stripNewlines(val);\n      break;\n    case \"color\":\n      // https://html.spec.whatwg.org/multipage/forms.html#color-state-(type=color):value-sanitization-algorithm\n      val = isValidSimpleColor(val) ? val.toLowerCase() : \"#000000\";\n      break;\n    case \"date\":\n      // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):value-sanitization-algorithm\n      if (!isValidDateString(val)) {\n        val = \"\";\n      }\n      break;\n    case \"datetime-local\":\n      {\n        // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):value-sanitization-algorithm\n        const dateAndTime = parseLocalDateAndTimeString(val);\n        val = dateAndTime !== null ? serializeNormalizedDateAndTime(dateAndTime) : \"\";\n        break;\n      }\n    case \"email\":\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm-2\n      if (input.hasAttribute(\"multiple\")) {\n        val = val.split(\",\").map(token => stripLeadingAndTrailingASCIIWhitespace(token)).join(\",\");\n      } else {\n        val = stripNewlines(val);\n        val = stripLeadingAndTrailingASCIIWhitespace(val);\n      }\n      break;\n    case \"month\":\n      // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):value-sanitization-algorithm\n      if (!isValidMonthString(val)) {\n        val = \"\";\n      }\n      break;\n    case \"number\":\n      // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        val = \"\";\n      }\n      break;\n    case \"range\":\n      // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        const minimum = input._minimum;\n        const maximum = input._maximum;\n        const defaultValue = maximum < minimum ? minimum : (minimum + maximum) / 2;\n        val = `${defaultValue}`;\n      }\n      break;\n    case \"time\":\n      // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):value-sanitization-algorithm\n      if (!isValidTimeString(val)) {\n        val = \"\";\n      }\n      break;\n    case \"url\":\n      // https://html.spec.whatwg.org/multipage/forms.html#url-state-(type=url):value-sanitization-algorithm\n      val = stripNewlines(val);\n      val = stripLeadingAndTrailingASCIIWhitespace(val);\n      break;\n    case \"week\":\n      // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):value-sanitization-algorithm\n      if (!isValidWeekString(val)) {\n        val = \"\";\n      }\n  }\n  return val;\n};","map":{"version":3,"names":["isValidFloatingPointNumber","isValidSimpleColor","parseFloatingPointNumber","stripLeadingAndTrailingASCIIWhitespace","stripNewlines","splitOnCommas","require","isValidDateString","isValidMonthString","isValidTimeString","isValidWeekString","parseLocalDateAndTimeString","serializeNormalizedDateAndTime","whatwgURL","NodeList","domSymbolTree","NODE_TYPE","submittableLocalNames","Set","exports","isDisabled","formControl","localName","hasAttribute","e","parentNode","firstLegendElementChild","querySelector","contains","isSubmittable","has","isButton","type","normalizeToCRLF","string","replace","isLabelable","node","nodeType","ELEMENT_NODE","tagName","getLabelsForLabelable","labelable","_labels","root","getRootNode","create","element","query","nodes","descendant","treeIterator","control","push","isValidEmailAddress","emailAddress","multiple","arguments","length","undefined","emailAddressRegExp","RegExp","every","value","test","isValidAbsoluteURL","url","parseURL","sanitizeValueByType","input","val","toLowerCase","dateAndTime","split","map","token","join","isNaN","minimum","_minimum","maximum","_maximum","defaultValue"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/helpers/form-controls.js"],"sourcesContent":["\"use strict\";\n\nconst {\n  isValidFloatingPointNumber,\n  isValidSimpleColor,\n  parseFloatingPointNumber,\n  stripLeadingAndTrailingASCIIWhitespace,\n  stripNewlines,\n  splitOnCommas\n} = require(\"./strings\");\nconst {\n  isValidDateString,\n  isValidMonthString,\n  isValidTimeString,\n  isValidWeekString,\n  parseLocalDateAndTimeString,\n  serializeNormalizedDateAndTime\n} = require(\"./dates-and-times\");\nconst whatwgURL = require(\"whatwg-url\");\n\nconst NodeList = require(\"../generated/NodeList\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst NODE_TYPE = require(\"../node-type\");\nconst submittableLocalNames = new Set([\"button\", \"input\", \"keygen\", \"object\", \"select\", \"textarea\"]);\n\nexports.isDisabled = formControl => {\n  if (formControl.localName === \"button\" || formControl.localName === \"input\" || formControl.localName === \"select\" ||\n      formControl.localName === \"textarea\") {\n    if (formControl.hasAttribute(\"disabled\")) {\n      return true;\n    }\n  }\n\n  let e = formControl.parentNode;\n  while (e) {\n    if (e.localName === \"fieldset\" && e.hasAttribute(\"disabled\")) {\n      const firstLegendElementChild = e.querySelector(\"legend\");\n      if (!firstLegendElementChild || !firstLegendElementChild.contains(formControl)) {\n        return true;\n      }\n    }\n    e = e.parentNode;\n  }\n\n  return false;\n};\n\nexports.isSubmittable = formControl => {\n  // https://html.spec.whatwg.org/multipage/forms.html#category-submit\n  return submittableLocalNames.has(formControl.localName);\n};\n\nexports.isButton = formControl => {\n  // https://html.spec.whatwg.org/multipage/forms.html#concept-button\n  return formControl.type === \"button\" || formControl.type === \"submit\" || formControl.type === \"reset\" ||\n         formControl.type === \"image\" || formControl.localName === \"button\";\n};\n\nexports.normalizeToCRLF = string => {\n  return string.replace(/\\r([^\\n])/g, \"\\r\\n$1\")\n    .replace(/\\r$/, \"\\r\\n\")\n    .replace(/([^\\r])\\n/g, \"$1\\r\\n\")\n    .replace(/^\\n/, \"\\r\\n\");\n};\n\nexports.isLabelable = node => {\n  // labelable logic defined at: https://html.spec.whatwg.org/multipage/forms.html#category-label\n  if (node.nodeType !== NODE_TYPE.ELEMENT_NODE) {\n    return false;\n  }\n\n  switch (node.tagName) {\n    case \"BUTTON\":\n    case \"METER\":\n    case \"OUTPUT\":\n    case \"PROGRESS\":\n    case \"SELECT\":\n    case \"TEXTAREA\":\n      return true;\n\n    case \"INPUT\":\n      return node.type !== \"hidden\";\n  }\n\n  return false;\n};\n\nexports.getLabelsForLabelable = labelable => {\n  if (!exports.isLabelable(labelable)) {\n    return null;\n  }\n  if (!labelable._labels) {\n    const root = labelable.getRootNode();\n    labelable._labels = NodeList.create([], {\n      element: root,\n      query: () => {\n        const nodes = [];\n        for (const descendant of domSymbolTree.treeIterator(root)) {\n          if (descendant.control === labelable) {\n            nodes.push(descendant);\n          }\n        }\n        return nodes;\n      }\n    });\n  }\n  return labelable._labels;\n};\n\n// https://html.spec.whatwg.org/multipage/forms.html#valid-e-mail-address\nexports.isValidEmailAddress = (emailAddress, multiple = false) => {\n  const emailAddressRegExp = new RegExp(\"^[a-zA-Z0-9.!#$%&'*+\\\\/=?^_`{|}~-]+@[a-zA-Z0-9]\" +\n    \"(?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}\" +\n    \"[a-zA-Z0-9])?)*$\");\n  // A valid e-mail address list is a set of comma-separated tokens, where each token is itself\n  // a valid e - mail address.To obtain the list of tokens from a valid e - mail address list,\n  // an implementation must split the string on commas.\n  if (multiple) {\n    return splitOnCommas(emailAddress).every(value => emailAddressRegExp.test(value));\n  }\n  return emailAddressRegExp.test(emailAddress);\n};\n\nexports.isValidAbsoluteURL = url => {\n  return whatwgURL.parseURL(url) !== null;\n};\n\nexports.sanitizeValueByType = (input, val) => {\n  switch (input.type.toLowerCase()) {\n    case \"password\":\n    case \"search\":\n    case \"tel\":\n    case \"text\":\n      val = stripNewlines(val);\n      break;\n\n    case \"color\":\n      // https://html.spec.whatwg.org/multipage/forms.html#color-state-(type=color):value-sanitization-algorithm\n      val = isValidSimpleColor(val) ? val.toLowerCase() : \"#000000\";\n      break;\n\n    case \"date\":\n      // https://html.spec.whatwg.org/multipage/input.html#date-state-(type=date):value-sanitization-algorithm\n      if (!isValidDateString(val)) {\n        val = \"\";\n      }\n      break;\n\n    case \"datetime-local\": {\n      // https://html.spec.whatwg.org/multipage/input.html#local-date-and-time-state-(type=datetime-local):value-sanitization-algorithm\n      const dateAndTime = parseLocalDateAndTimeString(val);\n      val = dateAndTime !== null ? serializeNormalizedDateAndTime(dateAndTime) : \"\";\n      break;\n    }\n\n    case \"email\":\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm\n      // https://html.spec.whatwg.org/multipage/forms.html#e-mail-state-(type=email):value-sanitization-algorithm-2\n      if (input.hasAttribute(\"multiple\")) {\n        val = val.split(\",\").map(token => stripLeadingAndTrailingASCIIWhitespace(token)).join(\",\");\n      } else {\n        val = stripNewlines(val);\n        val = stripLeadingAndTrailingASCIIWhitespace(val);\n      }\n      break;\n\n    case \"month\":\n      // https://html.spec.whatwg.org/multipage/input.html#month-state-(type=month):value-sanitization-algorithm\n      if (!isValidMonthString(val)) {\n        val = \"\";\n      }\n      break;\n\n    case \"number\":\n      // https://html.spec.whatwg.org/multipage/input.html#number-state-(type=number):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        val = \"\";\n      }\n      break;\n\n    case \"range\":\n      // https://html.spec.whatwg.org/multipage/input.html#range-state-(type=range):value-sanitization-algorithm\n      // TODO: using parseFloatingPointNumber in addition to isValidFloatingPointNumber to pass number.html WPT.\n      // Possible spec bug.\n      if (!isValidFloatingPointNumber(val) || isNaN(parseFloatingPointNumber(val))) {\n        const minimum = input._minimum;\n        const maximum = input._maximum;\n        const defaultValue = maximum < minimum ? minimum : (minimum + maximum) / 2;\n        val = `${defaultValue}`;\n      }\n      break;\n\n    case \"time\":\n      // https://html.spec.whatwg.org/multipage/input.html#time-state-(type=time):value-sanitization-algorithm\n      if (!isValidTimeString(val)) {\n        val = \"\";\n      }\n      break;\n\n    case \"url\":\n      // https://html.spec.whatwg.org/multipage/forms.html#url-state-(type=url):value-sanitization-algorithm\n      val = stripNewlines(val);\n      val = stripLeadingAndTrailingASCIIWhitespace(val);\n      break;\n\n    case \"week\":\n      // https://html.spec.whatwg.org/multipage/input.html#week-state-(type=week):value-sanitization-algorithm\n      if (!isValidWeekString(val)) {\n        val = \"\";\n      }\n  }\n\n  return val;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}