{"ast":null,"code":"\"use strict\";\n\nconst enumerationValues = new Set([\"text/html\", \"text/xml\", \"application/xml\", \"application/xhtml+xml\", \"image/svg+xml\"]);\nmodule.exports = {\n  enumerationValues,\n  convert(value) {\n    let {\n      context = \"The provided value\"\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const string = `${value}`;\n    if (!enumerationValues.has(value)) {\n      throw new TypeError(`${context} '${value}' is not a valid enumeration value for SupportedType`);\n    }\n    return string;\n  }\n};","map":{"version":3,"names":["enumerationValues","Set","module","exports","convert","value","context","arguments","length","undefined","string","has","TypeError"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/generated/SupportedType.js"],"sourcesContent":["\"use strict\";\n\nconst enumerationValues = new Set([\n  \"text/html\",\n  \"text/xml\",\n  \"application/xml\",\n  \"application/xhtml+xml\",\n  \"image/svg+xml\"\n]);\nmodule.exports = {\n  enumerationValues,\n  convert(value, { context = \"The provided value\" } = {}) {\n    const string = `${value}`;\n    if (!enumerationValues.has(value)) {\n      throw new TypeError(`${context} '${value}' is not a valid enumeration value for SupportedType`);\n    }\n    return string;\n  }\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,iBAAiB,GAAG,IAAIC,GAAG,CAAC,CAChC,WAAW,EACX,UAAU,EACV,iBAAiB,EACjB,uBAAuB,EACvB,eAAe,CAChB,CAAC;AACFC,MAAM,CAACC,OAAO,GAAG;EACfH,iBAAiB;EACjBI,OAAOA,CAACC,KAAK,EAA2C;IAAA,IAAzC;MAAEC,OAAO,GAAG;IAAqB,CAAC,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IACpD,MAAMG,MAAM,GAAI,GAAEL,KAAM,EAAC;IACzB,IAAI,CAACL,iBAAiB,CAACW,GAAG,CAACN,KAAK,CAAC,EAAE;MACjC,MAAM,IAAIO,SAAS,CAAE,GAAEN,OAAQ,KAAID,KAAM,sDAAqD,CAAC;IACjG;IACA,OAAOK,MAAM;EACf;AACF,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}