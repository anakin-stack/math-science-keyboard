{"ast":null,"code":"\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst {\n  asciiLowercase\n} = require(\"../helpers/strings\");\nconst {\n  closest\n} = require(\"../helpers/traversal\");\nfunction reflectedAttributeClampedToRange(attrValue, min, max) {\n  let defaultValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;\n  if (attrValue === null) {\n    return defaultValue;\n  }\n  // We don't allow hexadecimal numbers here.\n  // eslint-disable-next-line radix\n  const parsed = parseInt(attrValue, 10);\n  if (isNaN(parsed) || parsed < 0) {\n    return defaultValue;\n  }\n  if (parsed < min) {\n    return min;\n  }\n  if (parsed > max) {\n    return max;\n  }\n  return parsed;\n}\nclass HTMLTableCellElementImpl extends HTMLElementImpl {\n  get colSpan() {\n    return reflectedAttributeClampedToRange(this.getAttribute(\"colspan\"), 1, 1000, 1);\n  }\n  set colSpan(V) {\n    this.setAttribute(\"colspan\", String(V));\n  }\n  get rowSpan() {\n    return reflectedAttributeClampedToRange(this.getAttribute(\"rowspan\"), 0, 65534, 1);\n  }\n  set rowSpan(V) {\n    this.setAttribute(\"rowspan\", String(V));\n  }\n  get cellIndex() {\n    const tr = closest(this, \"tr\");\n    if (tr === null) {\n      return -1;\n    }\n    return tr.cells.indexOf(this);\n  }\n  get scope() {\n    let value = this.getAttribute(\"scope\");\n    if (value === null) {\n      return \"\";\n    }\n\n    // Enumerated attribute is matched ASCII-case-insensitively.\n    value = asciiLowercase(value);\n    if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n      return value;\n    }\n    return \"\";\n  }\n  set scope(V) {\n    this.setAttribute(\"scope\", V);\n  }\n}\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};","map":{"version":3,"names":["HTMLElementImpl","require","implementation","asciiLowercase","closest","reflectedAttributeClampedToRange","attrValue","min","max","defaultValue","arguments","length","undefined","parsed","parseInt","isNaN","HTMLTableCellElementImpl","colSpan","getAttribute","V","setAttribute","String","rowSpan","cellIndex","tr","cells","indexOf","scope","value","module","exports"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/nodes/HTMLTableCellElement-impl.js"],"sourcesContent":["\"use strict\";\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\n\nconst { asciiLowercase } = require(\"../helpers/strings\");\nconst { closest } = require(\"../helpers/traversal\");\n\nfunction reflectedAttributeClampedToRange(attrValue, min, max, defaultValue = 0) {\n  if (attrValue === null) {\n    return defaultValue;\n  }\n  // We don't allow hexadecimal numbers here.\n  // eslint-disable-next-line radix\n  const parsed = parseInt(attrValue, 10);\n  if (isNaN(parsed) || parsed < 0) {\n    return defaultValue;\n  }\n  if (parsed < min) {\n    return min;\n  }\n  if (parsed > max) {\n    return max;\n  }\n  return parsed;\n}\n\nclass HTMLTableCellElementImpl extends HTMLElementImpl {\n  get colSpan() {\n    return reflectedAttributeClampedToRange(this.getAttribute(\"colspan\"), 1, 1000, 1);\n  }\n\n  set colSpan(V) {\n    this.setAttribute(\"colspan\", String(V));\n  }\n\n  get rowSpan() {\n    return reflectedAttributeClampedToRange(this.getAttribute(\"rowspan\"), 0, 65534, 1);\n  }\n\n  set rowSpan(V) {\n    this.setAttribute(\"rowspan\", String(V));\n  }\n\n  get cellIndex() {\n    const tr = closest(this, \"tr\");\n    if (tr === null) {\n      return -1;\n    }\n\n    return tr.cells.indexOf(this);\n  }\n\n  get scope() {\n    let value = this.getAttribute(\"scope\");\n    if (value === null) {\n      return \"\";\n    }\n\n    // Enumerated attribute is matched ASCII-case-insensitively.\n    value = asciiLowercase(value);\n    if (value === \"row\" || value === \"col\" || value === \"rowgroup\" || value === \"colgroup\") {\n      return value;\n    }\n\n    return \"\";\n  }\n\n  set scope(V) {\n    this.setAttribute(\"scope\", V);\n  }\n}\n\nmodule.exports = {\n  implementation: HTMLTableCellElementImpl\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,eAAe,GAAGC,OAAO,CAAC,oBAAoB,CAAC,CAACC,cAAc;AAEpE,MAAM;EAAEC;AAAe,CAAC,GAAGF,OAAO,CAAC,oBAAoB,CAAC;AACxD,MAAM;EAAEG;AAAQ,CAAC,GAAGH,OAAO,CAAC,sBAAsB,CAAC;AAEnD,SAASI,gCAAgCA,CAACC,SAAS,EAAEC,GAAG,EAAEC,GAAG,EAAoB;EAAA,IAAlBC,YAAY,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC;EAC7E,IAAIJ,SAAS,KAAK,IAAI,EAAE;IACtB,OAAOG,YAAY;EACrB;EACA;EACA;EACA,MAAMI,MAAM,GAAGC,QAAQ,CAACR,SAAS,EAAE,EAAE,CAAC;EACtC,IAAIS,KAAK,CAACF,MAAM,CAAC,IAAIA,MAAM,GAAG,CAAC,EAAE;IAC/B,OAAOJ,YAAY;EACrB;EACA,IAAII,MAAM,GAAGN,GAAG,EAAE;IAChB,OAAOA,GAAG;EACZ;EACA,IAAIM,MAAM,GAAGL,GAAG,EAAE;IAChB,OAAOA,GAAG;EACZ;EACA,OAAOK,MAAM;AACf;AAEA,MAAMG,wBAAwB,SAAShB,eAAe,CAAC;EACrD,IAAIiB,OAAOA,CAAA,EAAG;IACZ,OAAOZ,gCAAgC,CAAC,IAAI,CAACa,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,CAAC;EACnF;EAEA,IAAID,OAAOA,CAACE,CAAC,EAAE;IACb,IAAI,CAACC,YAAY,CAAC,SAAS,EAAEC,MAAM,CAACF,CAAC,CAAC,CAAC;EACzC;EAEA,IAAIG,OAAOA,CAAA,EAAG;IACZ,OAAOjB,gCAAgC,CAAC,IAAI,CAACa,YAAY,CAAC,SAAS,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;EACpF;EAEA,IAAII,OAAOA,CAACH,CAAC,EAAE;IACb,IAAI,CAACC,YAAY,CAAC,SAAS,EAAEC,MAAM,CAACF,CAAC,CAAC,CAAC;EACzC;EAEA,IAAII,SAASA,CAAA,EAAG;IACd,MAAMC,EAAE,GAAGpB,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC;IAC9B,IAAIoB,EAAE,KAAK,IAAI,EAAE;MACf,OAAO,CAAC,CAAC;IACX;IAEA,OAAOA,EAAE,CAACC,KAAK,CAACC,OAAO,CAAC,IAAI,CAAC;EAC/B;EAEA,IAAIC,KAAKA,CAAA,EAAG;IACV,IAAIC,KAAK,GAAG,IAAI,CAACV,YAAY,CAAC,OAAO,CAAC;IACtC,IAAIU,KAAK,KAAK,IAAI,EAAE;MAClB,OAAO,EAAE;IACX;;IAEA;IACAA,KAAK,GAAGzB,cAAc,CAACyB,KAAK,CAAC;IAC7B,IAAIA,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,KAAK,IAAIA,KAAK,KAAK,UAAU,IAAIA,KAAK,KAAK,UAAU,EAAE;MACtF,OAAOA,KAAK;IACd;IAEA,OAAO,EAAE;EACX;EAEA,IAAID,KAAKA,CAACR,CAAC,EAAE;IACX,IAAI,CAACC,YAAY,CAAC,OAAO,EAAED,CAAC,CAAC;EAC/B;AACF;AAEAU,MAAM,CAACC,OAAO,GAAG;EACf5B,cAAc,EAAEc;AAClB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}