{"ast":null,"code":"\"use strict\";\n\nconst DOMException = require(\"domexception\");\nconst {\n  filter,\n  FILTER_ACCEPT,\n  FILTER_REJECT,\n  FILTER_SKIP\n} = require(\"./helpers\");\nconst FIRST = false;\nconst LAST = true;\nconst NEXT = false;\nconst PREVIOUS = true;\nexports.implementation = class TreeWalkerImpl {\n  constructor(args, privateData) {\n    this._active = false;\n    this.root = privateData.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n    this.currentNode = this.root;\n  }\n  get currentNode() {\n    return this._currentNode;\n  }\n  set currentNode(node) {\n    if (node === null) {\n      throw new DOMException(\"Cannot set currentNode to null\", \"NotSupportedError\");\n    }\n    this._currentNode = node;\n  }\n  parentNode() {\n    let node = this._currentNode;\n    while (node !== null && node !== this.root) {\n      node = node.parentNode;\n      if (node !== null && filter(this, node) === FILTER_ACCEPT) {\n        return this._currentNode = node;\n      }\n    }\n    return null;\n  }\n  firstChild() {\n    return this._traverseChildren(FIRST);\n  }\n  lastChild() {\n    return this._traverseChildren(LAST);\n  }\n  previousSibling() {\n    return this._traverseSiblings(PREVIOUS);\n  }\n  nextSibling() {\n    return this._traverseSiblings(NEXT);\n  }\n  previousNode() {\n    let node = this._currentNode;\n    while (node !== this.root) {\n      let sibling = node.previousSibling;\n      while (sibling !== null) {\n        node = sibling;\n        let result = filter(this, node);\n        while (result !== FILTER_REJECT && node.hasChildNodes()) {\n          node = node.lastChild;\n          result = filter(this, node);\n        }\n        if (result === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n        sibling = node.previousSibling;\n      }\n      if (node === this.root || node.parentNode === null) {\n        return null;\n      }\n      node = node.parentNode;\n      if (filter(this, node) === FILTER_ACCEPT) {\n        return this._currentNode = node;\n      }\n    }\n    return null;\n  }\n  nextNode() {\n    let node = this._currentNode;\n    let result = FILTER_ACCEPT;\n    for (;;) {\n      while (result !== FILTER_REJECT && node.hasChildNodes()) {\n        node = node.firstChild;\n        result = filter(this, node);\n        if (result === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n      }\n      do {\n        if (node === this.root) {\n          return null;\n        }\n        const sibling = node.nextSibling;\n        if (sibling !== null) {\n          node = sibling;\n          break;\n        }\n        node = node.parentNode;\n      } while (node !== null);\n      if (node === null) {\n        return null;\n      }\n      result = filter(this, node);\n      if (result === FILTER_ACCEPT) {\n        return this._currentNode = node;\n      }\n    }\n  }\n  _traverseChildren(type) {\n    let node = this._currentNode;\n    node = type === FIRST ? node.firstChild : node.lastChild;\n    if (node === null) {\n      return null;\n    }\n    main: for (;;) {\n      const result = filter(this, node);\n      if (result === FILTER_ACCEPT) {\n        return this._currentNode = node;\n      }\n      if (result === FILTER_SKIP) {\n        const child = type === FIRST ? node.firstChild : node.lastChild;\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n      for (;;) {\n        const sibling = type === FIRST ? node.nextSibling : node.previousSibling;\n        if (sibling !== null) {\n          node = sibling;\n          continue main;\n        }\n        const parent = node.parentNode;\n        if (parent === null || parent === this.root || parent === this._currentNode) {\n          return null;\n        }\n        node = parent;\n      }\n    }\n  }\n  _traverseSiblings(type) {\n    let node = this._currentNode;\n    if (node === this.root) {\n      return null;\n    }\n    for (;;) {\n      let sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n      while (sibling !== null) {\n        node = sibling;\n        const result = filter(this, node);\n        if (result === FILTER_ACCEPT) {\n          return this._currentNode = node;\n        }\n        sibling = type === NEXT ? node.firstChild : node.lastChild;\n        if (result === FILTER_REJECT || sibling === null) {\n          sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n        }\n      }\n      node = node.parentNode;\n      if (node === null || node === this.root) {\n        return null;\n      }\n      if (filter(this, node) === FILTER_ACCEPT) {\n        return null;\n      }\n    }\n  }\n};","map":{"version":3,"names":["DOMException","require","filter","FILTER_ACCEPT","FILTER_REJECT","FILTER_SKIP","FIRST","LAST","NEXT","PREVIOUS","exports","implementation","TreeWalkerImpl","constructor","args","privateData","_active","root","whatToShow","currentNode","_currentNode","node","parentNode","firstChild","_traverseChildren","lastChild","previousSibling","_traverseSiblings","nextSibling","previousNode","sibling","result","hasChildNodes","nextNode","type","main","child","parent"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/traversal/TreeWalker-impl.js"],"sourcesContent":["\"use strict\";\n\nconst DOMException = require(\"domexception\");\nconst { filter, FILTER_ACCEPT, FILTER_REJECT, FILTER_SKIP } = require(\"./helpers\");\n\nconst FIRST = false;\nconst LAST = true;\nconst NEXT = false;\nconst PREVIOUS = true;\n\nexports.implementation = class TreeWalkerImpl {\n  constructor(args, privateData) {\n    this._active = false;\n    this.root = privateData.root;\n    this.whatToShow = privateData.whatToShow;\n    this.filter = privateData.filter;\n\n    this.currentNode = this.root;\n  }\n\n  get currentNode() {\n    return this._currentNode;\n  }\n\n  set currentNode(node) {\n    if (node === null) {\n      throw new DOMException(\"Cannot set currentNode to null\", \"NotSupportedError\");\n    }\n\n    this._currentNode = node;\n  }\n\n  parentNode() {\n    let node = this._currentNode;\n    while (node !== null && node !== this.root) {\n      node = node.parentNode;\n\n      if (node !== null && filter(this, node) === FILTER_ACCEPT) {\n        return (this._currentNode = node);\n      }\n    }\n    return null;\n  }\n\n  firstChild() {\n    return this._traverseChildren(FIRST);\n  }\n\n  lastChild() {\n    return this._traverseChildren(LAST);\n  }\n\n  previousSibling() {\n    return this._traverseSiblings(PREVIOUS);\n  }\n\n  nextSibling() {\n    return this._traverseSiblings(NEXT);\n  }\n\n  previousNode() {\n    let node = this._currentNode;\n\n    while (node !== this.root) {\n      let sibling = node.previousSibling;\n\n      while (sibling !== null) {\n        node = sibling;\n        let result = filter(this, node);\n\n        while (result !== FILTER_REJECT && node.hasChildNodes()) {\n          node = node.lastChild;\n          result = filter(this, node);\n        }\n\n        if (result === FILTER_ACCEPT) {\n          return (this._currentNode = node);\n        }\n\n        sibling = node.previousSibling;\n      }\n\n      if (node === this.root || node.parentNode === null) {\n        return null;\n      }\n\n      node = node.parentNode;\n\n      if (filter(this, node) === FILTER_ACCEPT) {\n        return (this._currentNode = node);\n      }\n    }\n\n    return null;\n  }\n\n  nextNode() {\n    let node = this._currentNode;\n    let result = FILTER_ACCEPT;\n\n    for (;;) {\n      while (result !== FILTER_REJECT && node.hasChildNodes()) {\n        node = node.firstChild;\n        result = filter(this, node);\n        if (result === FILTER_ACCEPT) {\n          return (this._currentNode = node);\n        }\n      }\n\n      do {\n        if (node === this.root) {\n          return null;\n        }\n\n        const sibling = node.nextSibling;\n\n        if (sibling !== null) {\n          node = sibling;\n          break;\n        }\n\n        node = node.parentNode;\n      } while (node !== null);\n\n      if (node === null) {\n        return null;\n      }\n\n      result = filter(this, node);\n\n      if (result === FILTER_ACCEPT) {\n        return (this._currentNode = node);\n      }\n    }\n  }\n\n  _traverseChildren(type) {\n    let node = this._currentNode;\n    node = type === FIRST ? node.firstChild : node.lastChild;\n\n    if (node === null) {\n      return null;\n    }\n\n    main: for (;;) {\n      const result = filter(this, node);\n\n      if (result === FILTER_ACCEPT) {\n        return (this._currentNode = node);\n      }\n\n      if (result === FILTER_SKIP) {\n        const child = type === FIRST ? node.firstChild : node.lastChild;\n\n        if (child !== null) {\n          node = child;\n          continue;\n        }\n      }\n\n      for (;;) {\n        const sibling = type === FIRST ? node.nextSibling : node.previousSibling;\n\n        if (sibling !== null) {\n          node = sibling;\n          continue main;\n        }\n\n        const parent = node.parentNode;\n\n        if (parent === null || parent === this.root || parent === this._currentNode) {\n          return null;\n        }\n\n        node = parent;\n      }\n    }\n  }\n\n  _traverseSiblings(type) {\n    let node = this._currentNode;\n\n    if (node === this.root) {\n      return null;\n    }\n\n    for (;;) {\n      let sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n\n      while (sibling !== null) {\n        node = sibling;\n        const result = filter(this, node);\n\n        if (result === FILTER_ACCEPT) {\n          return (this._currentNode = node);\n        }\n\n        sibling = type === NEXT ? node.firstChild : node.lastChild;\n\n        if (result === FILTER_REJECT || sibling === null) {\n          sibling = type === NEXT ? node.nextSibling : node.previousSibling;\n        }\n      }\n\n      node = node.parentNode;\n\n      if (node === null || node === this.root) {\n        return null;\n      }\n\n      if (filter(this, node) === FILTER_ACCEPT) {\n        return null;\n      }\n    }\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}