{"ast":null,"code":"/*********************************************************************\n *\n *  main.js\n *\n *  Implements an API to MathJax in Node.js so that MathJax can be\n *  used server-side to generate HTML+CSS, SVG, or MathML.\n *\n *  This API converts single math expressions while giving control\n *  over the input format, the SVG font caching, and a number of other\n *  features.\n *\n * ----------------------------------------------------------------------\n *\n *  Copyright (c) 2014--2016 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nvar http = require('http');\nvar fs = require('fs');\nvar path = require('path');\nvar url = require('url');\nvar jsdom = require('jsdom');\nvar JSDOM = jsdom.JSDOM;\nvar isFullwidthCodePoint = require('is-fullwidth-code-point');\nrequire('./patch/jsdom.js').patch(JSDOM); //  Fix some bugs in jsdom\n\nvar displayMessages = false; // don't log Message.Set() calls\nvar displayErrors = true; // show error messages on the console\nvar undefinedChar = false; // unknown characters are not saved in the error array\nvar extensions = ''; // no additional extensions used\nvar paths = {}; // additional paths (for third party extensions)\nvar fontURL = ''; // location of web fonts for CHTML\n\nvar defaults = {\n  ex: 6,\n  // ex-size in pixels\n  width: 100,\n  // width of container (in ex) for linebreaking and tags\n  useFontCache: true,\n  // use <defs> and <use> in svg output?\n  useGlobalCache: false,\n  // use common <defs> for all equations?\n  linebreaks: false,\n  // do linebreaking?\n  equationNumbers: \"none\",\n  // or \"AMS\" or \"all\"\n  cjkCharWidth: 13,\n  // width of CJK character\n\n  math: \"\",\n  // the math to typeset\n  format: \"TeX\",\n  // the input format (TeX, inline-TeX, AsciiMath, or MathML)\n  xmlns: \"mml\",\n  // the namespace to use for MathML\n\n  html: false,\n  // return HTML output?\n  htmlNode: false,\n  // DOM element for HTML output?\n  css: false,\n  // return CSS for HTML output?\n  mml: false,\n  // return mml output?\n  mmlNode: false,\n  // DOM element for MML output?\n  svg: false,\n  // return svg output?\n  svgNode: false,\n  // DOM element for SVG output?\n  speakText: true,\n  // add spoken annotations\n  timeout: 10 * 1000 // 10 second timeout before restarting MathJax\n};\n\n//\n//  The MathJax server states\n//\nvar STATE = {\n  STOPPED: 1,\n  // no DOM or MathJax available\n  STARTED: 2,\n  // DOM loaded, MathJax starting up\n  READY: 3,\n  // MathJax initialized and ready to process math\n  BUSY: 4,\n  // MathJax currently processing math\n  RESTART: 5 // start() called while MathJax is starting up\n};\n\n//\n// The MathJaxPath is normaized against file:/// so that Windows paths are correct\n//\nvar MathJaxPath = url.resolve(\"file:///\", \"file:\" + require.resolve('mathjax'));\nvar MathJaxConfig; // configuration for when starting MathJax\nvar MathJax; // filled in once MathJax is loaded\nvar serverState = STATE.STOPPED; // nothing loaded yet\nvar timer; // used to reset MathJax if it runs too long\n\nvar document, window, content, html; // the DOM elements\n\nvar queue = []; // queue of typesetting requests of the form [data,callback]\nvar data, callback, originalData; // the current queue item\nvar errors = []; // errors collected durring the typesetting\nvar sErrors = []; // errors collected durring MathJax startup\nvar ID = 0; // id for this SVG element\n\n//\n//  The delimiters used for each of the input formats\n//\nvar TYPES = {\n  TeX: \"tex; mode=display\",\n  \"inline-TeX\": \"tex\",\n  AsciiMath: \"asciimath\",\n  MathML: \"mml\"\n};\nvar CHTMLSTYLES; // filled in when CommonHTML is loaded\n\n/********************************************************************/\n\n//\n//  Create the DOM window and set up the console wtihin it\n//  Add an error handler to trap unexpected errors (requires\n//    modifying jsdom)\n//  Add a <div> where we can put the math to be typeset\n//    and typeset math in the three formats we use (to force\n//    the jax to be loaded completely)\n//\nfunction GetWindow() {\n  var virtualConsole = new jsdom.VirtualConsole();\n  virtualConsole.sendTo(console);\n  window = new JSDOM('', {\n    virtualConsole: virtualConsole,\n    userAgent: \"Node.js\",\n    runScripts: \"dangerously\",\n    resources: \"usable\"\n  }).window;\n  document = window.document;\n  html = document.firstChild;\n  window.addEventListener(\"error\", function (event) {\n    AddError(\"Error: \" + event.error.stack);\n  });\n  content = document.body.appendChild(document.createElement(\"div\"));\n  content.id = \"MathJax_Content\";\n  content.innerHTML = '<script type=\"math/tex\">x</script>' + '<script type=\"math/asciimath\">x</script>' + '<script type=\"math/mml\"><math><mi>x</mi></math></script>';\n}\n\n//\n//  Set up a Mathjax configuration within the window\n//\nfunction ConfigureMathJax() {\n  window.MathJax = {\n    //\n    //  Load all input jax and preprocessors\n    //  Load AMS extensions and the autoload extension for TeX\n    //  Create stand-alone SVG elements with font caches by default\n    //    (users can override that)\n    //\n    jax: [\"input/TeX\", \"input/MathML\", \"input/AsciiMath\", \"output/SVG\", \"output/CommonHTML\"],\n    extensions: [\"toMathML.js\"],\n    TeX: {\n      extensions: window.Array(\"AMSmath.js\", \"AMSsymbols.js\", \"autoload-all.js\")\n    },\n    SVG: {\n      useFontCache: true,\n      useGlobalCache: false,\n      EqnChunk: 1000000,\n      EqnDelay: 0\n    },\n    CommonHTML: {\n      EqnChunk: 1000000,\n      EqnDelay: 0,\n      undefinedFamily: \"monospace\"\n    },\n    //\n    //  This gets run before MathJax queues any actions\n    //\n    AuthorInit: function () {\n      MathJax = window.MathJax;\n\n      // Add custom paths to configuration\n      for (let key in paths) {\n        MathJax.Ajax.config.path[key] = paths[key];\n      }\n      delete MathJax.Hub.config.styles; // don't need any styles\n      MathJax.Hub.Startup.MenuZoom = function () {}; // don't load menu or zoom code\n      MathJax.Extension.MathEvents = {\n        Event: {},\n        Touch: {},\n        Hover: {} // fake structure to avid errors\n      };\n\n      MathJax.Ajax.loaded[MathJax.Ajax.fileURL(\"[MathJax]/extensions/MathEvents.js\")] = true;\n\n      //\n      //  When creating stylesheets, no need to wait for them\n      //  to become active, so just do the callback\n      //\n      MathJax.Ajax.timer.create = function (callback, node) {\n        callback = MathJax.Callback(callback);\n        callback(this.STATUS.OK);\n        return callback;\n      };\n\n      //\n      //  Use the console for messages, if we are requesting them\n      //\n      MathJax.Message.Set = function (text, n, delay) {\n        if (displayMessages && n !== 0) {\n          if (text instanceof window.Array) {\n            text = MathJax.Localization._.apply(MathJax.Localization, text);\n          }\n          console.error(text);\n        }\n      };\n      MathJax.Message.Clear = function () {};\n      MathJax.Message.Remove = function () {};\n      MathJax.Message.Init = function () {};\n\n      //\n      //  Trap Math Processing Errors\n      //\n      MathJax.Hub.Register.MessageHook(\"Math Processing Error\", function (message) {\n        AddError(\"Math Processing Error: \" + message[2].message);\n      });\n      MathJax.Hub.Register.MessageHook(\"SVG Jax - unknown char\", function (message) {\n        AddError(\"SVG - Unknown character: U+\" + message[1].toString(16).toUpperCase() + \" in \" + (message[2].fonts || [\"unknown\"]).join(\",\"), !undefinedChar);\n      });\n      MathJax.Hub.Register.MessageHook(\"CommonHTML Jax - unknown char\", function (message) {\n        AddError(\"CHTML - Unknown character: U+\" + message[1].toString(16).toUpperCase() + \" in \" + (message[2].fonts || [\"unknown\"]).join(\",\"), !undefinedChar);\n      });\n      MathJax.Hub.Register.MessageHook(\"MathML Jax - unknown node type\", function (message) {\n        AddError(\"MathML - Unknown node type: \" + message[1]);\n      });\n      MathJax.Hub.Register.MessageHook(\"MathML Jax - parse error\", function (message) {\n        AddError(\"MathML - \" + message[1]);\n      });\n      MathJax.Hub.Register.MessageHook(\"AsciiMath Jax - parse error\", function (message) {\n        AddError(\"AsciiMath parse error: \" + message[1]);\n      });\n      MathJax.Hub.Register.MessageHook(\"TeX Jax - parse error\", function (message) {\n        AddError(\"TeX parse error: \" + message[1]);\n      });\n      MathJax.Hub.Register.MessageHook(\"file load error\", function (message) {\n        AddError(\"File load error: \" + message[1]);\n      });\n\n      //\n      //  Set the delays to 0 (we don't need to update the screen)\n      //\n      MathJax.Hub.processSectionDelay = 0;\n      MathJax.Hub.processUpdateTime = 10000000; // don't interrupt processing of output\n      MathJax.Hub.processUpdateDelay = 0;\n\n      //\n      //  Adjust the SVG output jax\n      //\n      MathJax.Hub.Register.StartupHook(\"SVG Jax Config\", function () {\n        var SVG = MathJax.OutputJax.SVG,\n          HTML = MathJax.HTML;\n\n        //\n        //  Don't need the styles\n        //\n        delete SVG.config.styles;\n        SVG.Augment({\n          //\n          //  Set up the default ex-size and width\n          //\n          InitializeSVG: function () {\n            this.pxPerInch = 96;\n            this.defaultEx = 6;\n            this.defaultWidth = 100;\n          },\n          //\n          //  Adjust preTranslate() to not try to find the ex-size or\n          //  the container widths.\n          //\n          preTranslate: function (state) {\n            var scripts = state.jax[this.id],\n              i,\n              m = scripts.length,\n              script,\n              prev,\n              span,\n              div,\n              jax,\n              ex,\n              em,\n              maxwidth = 100000,\n              relwidth = false,\n              cwidth,\n              linebreak = this.config.linebreaks.automatic,\n              width = this.config.linebreaks.width;\n            //\n            //  Loop through the scripts\n            //\n            for (i = 0; i < m; i++) {\n              script = scripts[i];\n              if (!script.parentNode) continue;\n              //\n              //  Remove any existing output\n              //\n              prev = script.previousSibling;\n              if (prev && String(prev.className).match(/^MathJax(_SVG)?(_Display)?( MathJax(_SVG)?_Processing)?$/)) {\n                prev.parentNode.removeChild(prev);\n              }\n              //\n              //  Add the span, and a div if in display mode,\n              //  then mark it as being processed\n              //\n              jax = script.MathJax.elementJax;\n              if (!jax) continue;\n              jax.SVG = {\n                display: jax.root.Get(\"display\") === \"block\"\n              };\n              span = div = HTML.Element(\"span\", {\n                style: {\n                  \"font-size\": this.config.scale + \"%\",\n                  display: \"inline-block\"\n                },\n                className: \"MathJax_SVG\",\n                id: jax.inputID + \"-Frame\",\n                isMathJax: true,\n                jaxID: this.id\n              });\n              if (jax.SVG.display) {\n                div = HTML.Element(\"div\", {\n                  className: \"MathJax_SVG_Display\"\n                });\n                div.appendChild(span);\n              }\n              div.className += \" MathJax_SVG_Processing\";\n              script.parentNode.insertBefore(div, script);\n              //\n              //  Set SVG data for jax\n              //\n              jax.SVG.ex = ex = (data || defaults).ex;\n              jax.SVG.em = em = ex / SVG.TeX.x_height * 1000; // scale ex to x_height\n              jax.SVG.cwidth = width / em * 1000;\n              jax.SVG.lineWidth = linebreak ? width / em * 1000 : SVG.BIGDIMEN;\n            }\n            //\n            //  Set state variables used for displaying equations in chunks\n            //\n            state.SVGeqn = state.SVGlast = 0;\n            state.SVGi = -1;\n            state.SVGchunk = this.config.EqnChunk;\n            state.SVGdelay = false;\n          }\n        });\n\n        //\n        //  TEXT boxes use getBBox, which isn't implemented, so\n        //  use a monspace font and fake the size.  Since these\n        //  are used only for error messages and undefined characters,\n        //  this should be good enough for now.\n        //\n        SVG.BBOX.TEXT.Augment({\n          Init: function (scale, text, def) {\n            if (!def) {\n              def = {};\n            }\n            ;\n            def.stroke = \"none\";\n            if (def[\"font-style\"] === \"\") delete def[\"font-style\"];\n            if (def[\"font-weight\"] === \"\") delete def[\"font-weight\"];\n            this.SUPER(arguments).Init.call(this, def);\n            SVG.addText(this.element, text);\n            // tweaking font fallback behavior: https://github.com/mathjax/MathJax-node/issues/299\n            var textWidth = text.split('').map(function (c) {\n              return isFullwidthCodePoint(c.codePointAt()) ? data.cjkCharWidth : 8.5;\n            }).reduce(function (a, b) {\n              return a + b;\n            }, 0);\n            var bbox = {\n              width: textWidth,\n              height: 18,\n              y: -12\n            };\n            scale *= 1000 / SVG.em;\n            this.element.setAttribute(\"font-family\", \"monospace\");\n            this.element.setAttribute(\"transform\", \"scale(\" + scale + \") matrix(1 0 0 -1 0 0)\");\n            this.w = this.r = bbox.width * scale;\n            this.l = 0;\n            this.h = this.H = -bbox.y * scale;\n            this.d = this.D = (bbox.height + bbox.y) * scale;\n          }\n        });\n\n        //\n        //  Don't have mglyph load images\n        //\n        MathJax.Hub.Register.StartupHook(\"SVG mglyph Ready\", function () {\n          var MML = MathJax.ElementJax.mml;\n          var MGLYPH = MML.mglyph;\n          var TOSVG = MGLYPH.prototype.toSVG;\n          MGLYPH.Augment({\n            toSVG: function (variant, scale) {\n              var values = this.getValues(\"src\", \"width\", \"height\");\n              if (values.src !== \"\" && !MGLYPH.GLYPH[values.src]) {\n                if (!values.width || !values.height) {\n                  AddError(\"mglyphs must have explicit width and height in mathjax-node\");\n                }\n                MGLYPH.GLYPH[values.src] = {\n                  img: {\n                    SRC: values.src,\n                    width: 0,\n                    height: 0\n                  },\n                  status: \"OK\"\n                };\n              }\n              return TOSVG.apply(this, arguments);\n            }\n          });\n        });\n      });\n\n      //\n      //  Adjust the CommonHTML output jax\n      //\n      MathJax.Hub.Register.StartupHook(\"CommonHTML Jax Config\", function () {\n        var CHTML = MathJax.OutputJax.CommonHTML,\n          HTML = MathJax.HTML;\n\n        //\n        //  Don't need these styles\n        //\n        var STYLES = CHTML.config.styles;\n        delete STYLES[\"#MathJax_CHTML_Tooltip\"];\n        delete STYLES[\".MJXc-processing\"];\n        delete STYLES[\".MJXc-processed\"];\n        delete STYLES[\".mjx-chartest\"];\n        delete STYLES[\".mjx-chartest .mjx-char\"];\n        delete STYLES[\".mjx-chartest .mjx-box\"];\n        delete STYLES[\".mjx-test\"];\n        delete STYLES[\".mjx-ex-boxtest\"];\n        //  fontURL to current MathJax version\n        if (!fontURL) {\n          fontURL = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/' + MathJax.version + '/fonts/HTML-CSS';\n        }\n        CHTML.Augment({\n          webfontDir: fontURL,\n          //\n          //  Set up the default ex-size and width\n          //\n          getDefaultExEm: function () {\n            var styles = document.head.getElementsByTagName(\"style\");\n            CHTMLSTYLES = styles[styles.length - 1].innerHTML;\n            this.pxPerInch = 96;\n            this.defaultEx = 6;\n            this.defaultEm = 6 / CHTML.TEX.x_height * 1000;\n            this.defaultWidth = 100;\n          },\n          //\n          //  Adjust preTranslate() to not try to find the ex-size or\n          //  the container widths.\n          //\n          preTranslate: function (state) {\n            var scripts = state.jax[this.id],\n              i,\n              m = scripts.length,\n              script,\n              prev,\n              node,\n              jax,\n              ex,\n              em,\n              maxwidth = 100000,\n              relwidth = false,\n              cwidth = 0,\n              linebreak = this.config.linebreaks.automatic,\n              width = this.config.linebreaks.width;\n            //\n            //  Loop through the scripts\n            //\n            for (i = 0; i < m; i++) {\n              script = scripts[i];\n              if (!script.parentNode) continue;\n              //\n              //  Remove any existing output\n              //\n              prev = script.previousSibling;\n              if (prev && prev.className && String(prev.className).substr(0, 9) === \"mjx-chtml\") prev.parentNode.removeChild(prev);\n              //\n              //  Add the node for the math and mark it as being processed\n              //\n              jax = script.MathJax.elementJax;\n              if (!jax) continue;\n              jax.CHTML = {\n                display: jax.root.Get(\"display\") === \"block\"\n              };\n              node = CHTML.Element(\"mjx-chtml\", {\n                id: jax.inputID + \"-Frame\",\n                isMathJax: true,\n                jaxID: this.id\n              });\n              if (jax.CHTML.display) {\n                //\n                // Zoom box requires an outer container to get the positioning right.\n                //\n                var NODE = CHTML.Element(\"mjx-chtml\", {\n                  className: \"MJXc-display\",\n                  isMathJax: false\n                });\n                NODE.appendChild(node);\n                node = NODE;\n              }\n              node.className += \" MJXc-processing\";\n              script.parentNode.insertBefore(node, script);\n              //\n              //  Set CHTML data for jax\n              //\n              jax.CHTML.ex = ex = (data || defaults).ex;\n              jax.CHTML.em = jax.CHTML.outerEm = em = ex / CHTML.TEX.x_height; // scale ex to x_height\n              jax.CHTML.cwidth = width / em;\n              jax.CHTML.lineWidth = linebreak ? width / em : 1000000;\n              jax.CHTML.scale = 1;\n              jax.CHTML.fontsize = \"100%\";\n            }\n            //\n            //  Set state variables used for displaying equations in chunks\n            //\n            state.CHTMLeqn = state.CHTMLlast = 0;\n            state.CHTMLi = -1;\n            state.CHTMLchunk = this.config.EqnChunk;\n            state.CHTMLdelay = false;\n          },\n          //\n          //  We are using a monospaced font, so fake the size\n          //\n          getHDW: function (c, name, styles) {\n            return {\n              h: .8,\n              d: .2,\n              w: c.length * .5\n            };\n          }\n        });\n\n        //\n        //  Don't have mglyph load images\n        //\n        MathJax.Hub.Register.StartupHook(\"CommonHTML mglyph Ready\", function () {\n          var MML = MathJax.ElementJax.mml;\n          var MGLYPH = MML.mglyph;\n          var TOCHTML = MGLYPH.prototype.toCommonHTML;\n          MGLYPH.Augment({\n            toCommonHTML: function (node, options) {\n              var values = this.getValues(\"src\", \"width\", \"height\");\n              if (values.src !== \"\" && !MGLYPH.GLYPH[values.src]) {\n                if (!values.width || !values.height) {\n                  AddError(\"mglyphs must have explicit width and height in mathjax-node\");\n                }\n                MGLYPH.GLYPH[values.src] = {\n                  img: {\n                    SRC: values.src,\n                    width: 0,\n                    height: 0\n                  },\n                  status: \"OK\"\n                };\n              }\n              return TOCHTML.apply(this, arguments);\n            }\n          });\n        });\n      });\n\n      //\n      //  Set up None output jax (for when only MathML output is needed)\n      //\n      MathJax.Hub.Register.StartupHook(\"End Jax\", function () {\n        MathJax.OutputJax.None = MathJax.OutputJax({\n          id: \"None\",\n          preTranslate: function () {},\n          Translate: function () {},\n          postTranslate: function () {}\n        });\n        MathJax.OutputJax.None.loadComplete(\"jax.js\");\n        MathJax.OutputJax.None.Register(\"jax/mml\");\n      });\n\n      //\n      //  Reset the color extension after `autoload-all`\n      //\n      if (MathJax.AuthorConfig.extensions.indexOf(\"TeX/color.js\") == -1 && MathJax.AuthorConfig.extensions.indexOf(\"TeX/autoload-all.js\") == -1) {\n        MathJax.Hub.Register.StartupHook(\"TeX autoload-all Ready\", function () {\n          var macros = MathJax.InputJax.TeX.Definitions.macros;\n          macros.color = \"Color\";\n          delete macros.textcolor;\n          delete macros.colorbox;\n          delete macros.fcolorbox;\n          delete macros.definecolor;\n        });\n      }\n\n      //\n      //  Start the typesetting queue when MathJax is ready\n      //    (reseting the counters so that the initial math doesn't affect them)\n      //\n      MathJax.Hub.Register.StartupHook(\"End\", function () {\n        if (MathJax.OutputJax.SVG.resetGlyphs) MathJax.OutputJax.SVG.resetGlyphs(true);\n        MathJax.ElementJax.mml.ID = 0;\n        if (serverState === STATE.RESTART) {\n          setTimeout(RestartMathJax, 100);\n        } else {\n          serverState = STATE.READY;\n          MathJax.Hub.Queue(function () {\n            sErrors = errors;\n          }, StartQueue);\n        }\n      });\n    }\n  };\n  if (extensions) {\n    //\n    // Parse added extensions list and add to standard ones\n    //\n    var extensionList = extensions.split(/\\s*,\\s*/);\n    for (var i = 0; i < extensionList.length; i++) {\n      var matches = extensionList[i].match(/^(.*?)(\\.js)?$/);\n      window.MathJax.extensions.push(matches[1] + '.js');\n    }\n  }\n\n  //\n  //  Turn arrays into jsdom window arrays\n  //  (so \"instanceof Array\" will identify them properly)\n  //\n  var adjustArrays = function (obj) {\n    for (var id in obj) {\n      if (obj.hasOwnProperty(id)) {\n        if (obj[id] instanceof Array) {\n          var A = window.Array();\n          obj[id] = A.concat.apply(A, obj[id]);\n        } else if (typeof obj[id] === \"object\") {\n          adjustArrays(obj[id]);\n        }\n      }\n    }\n  };\n  if (MathJaxConfig) {\n    adjustArrays(MathJaxConfig);\n    // merge the defaults into the user configuration (to sanitize)\n    window.MathJax = Insert(Insert({}, MathJaxConfig), window.MathJax);\n    if (MathJaxConfig.extensions) {\n      window.MathJax.extensions = window.MathJax.extensions.concat(MathJaxConfig.extensions);\n    }\n  }\n}\n\n//\n//  Insert one objects into another\n//\nfunction Insert(dst, src) {\n  for (var id in src) {\n    if (src.hasOwnProperty(id)) {\n      // allow for concatenation of arrays?\n      if (typeof src[id] === 'object' && !(src[id] instanceof Array) && (typeof dst[id] === 'object' || typeof dst[id] === 'function')) {\n        Insert(dst[id], src[id]);\n      } else {\n        dst[id] = src[id];\n      }\n    }\n  }\n  return dst;\n}\n\n//\n//  Load MathJax into the DOM\n//\nfunction StartMathJax() {\n  serverState = STATE.STARTED;\n  var script = document.createElement(\"script\");\n  script.src = MathJaxPath;\n  script.onerror = function () {\n    AddError(\"Can't load MathJax.js from \" + MathJaxPath);\n  };\n  document.head.appendChild(script);\n}\n\n/********************************************************************/\n\n//\n//  Return an error value (and report it to console)\n//\nfunction ReportError(message, currentCallback) {\n  AddError(message);\n  (currentCallback || callback)({\n    errors: errors\n  });\n}\n\n//\n//  Add an error to the error list and display it on the console\n//\nfunction AddError(message, nopush) {\n  if (displayErrors) console.error(message);\n  if (!nopush) errors.push(message);\n}\n\n/********************************************************************/\n\n//\n//  Creates the MathML output (taking MathJax resets\n//  into account)\n//\nfunction GetMML(result) {\n  if (!data.mml && !data.mmlNode) return;\n  var jax = MathJax.Hub.getAllJax()[0];\n  if (data.speakText && !jax.root.alttext) {\n    jax.root.alttext = result.speakText;\n    var attrNames = jax.root.attrNames;\n    if (attrNames && attrNames.indexOf(\"alttext\") === -1) {\n      attrNames.push(\"alttext\");\n    }\n  }\n  try {\n    var mml = jax.root.toMathML('', jax);\n  } catch (err) {\n    if (!err.restart) {\n      throw err;\n    } // an actual error\n    return MathJax.Callback.After(window.Array(GetMML, result), err.restart);\n  }\n  if (data.mml) result.mml = mml;\n  if (data.mmlNode) result.mmlNode = JSDOM.fragment(mml).firstChild;\n}\n\n//\n//  Creates speech string and updates the MathML to include it, if needed\n//\nfunction GetSpeech(result) {\n  if (!data.speakText) return;\n  result.speakText = \"Equation\";\n  if (data.format !== \"MathML\") result.speakText = data.math;else {\n    var jax = MathJax.Hub.getAllJax()[0];\n    if (jax.root.alttext) result.speakText = jax.root.alttext;\n  }\n}\n\n//\n//  Create HTML and CSS output, if requested\n//\nfunction GetHTML(result) {\n  if (data.css) result.css = CHTMLSTYLES;\n  if (!data.html && !data.htmlNode) return;\n  var jax = MathJax.Hub.getAllJax()[0];\n  if (!jax) return;\n  var script = jax.SourceElement(),\n    html = script.previousSibling;\n\n  // add speech text if there isn't one\n  if (data.speakText) {\n    var labelTarget = html.querySelector('.mjx-math');\n    for (child of labelTarget.childNodes) child.setAttribute(\"aria-hidden\", true);\n    if (!labelTarget.getAttribute(\"aria-label\")) {\n      labelTarget.setAttribute(\"aria-label\", result.speakText);\n    }\n  }\n  // remove automatically generated IDs\n  var ids = html.querySelectorAll('[id^=\"MJXc-Node-\"]');\n  for (var i = 0; i < ids.length; i++) {\n    ids[i].removeAttribute(\"id\");\n  }\n  // remove extreneous frame element\n  var frame = html.querySelector('[id^=\"MathJax-Element-\"]');\n  if (frame) {\n    // in display-mode, the frame is inside the display-style wrapper\n    html.insertBefore(frame.firstChild, frame);\n    html.removeChild(frame);\n  } else {\n    // otherwise (inline-mode) the frame is the root element\n    html.removeAttribute(\"id\");\n  }\n  if (data.html) result.html = html.outerHTML;\n  if (data.htmlNode) result.htmlNode = html;\n}\n\n//\n//  Create SVG output, if requested\n//\nfunction GetSVG(result) {\n  if (!data.svg && !data.svgNode) return;\n  var jax = MathJax.Hub.getAllJax()[0];\n  if (!jax) return;\n  var script = jax.SourceElement(),\n    svg = script.previousSibling.getElementsByTagName(\"svg\")[0];\n  svg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n\n  //\n  //  Add the speech text and mark the SVG appropriately\n  //\n  if (data.speakText) {\n    for (var i = 0, m = svg.childNodes.length; i < m; i++) svg.childNodes[i].setAttribute(\"aria-hidden\", true);\n    // Note: if aria-label exists, getSpeech preserved it in speakText\n    // remove aria-label since labelled-by title is preferred\n    svg.removeAttribute(\"aria-label\");\n    ID++;\n    var id = \"MathJax-SVG-\" + ID + \"-Title\";\n    svg.setAttribute(\"aria-labelledby\", id);\n    var node = MathJax.HTML.Element(\"title\", {\n      id: id\n    }, [result.speakText]);\n    svg.insertBefore(node, svg.firstChild);\n  }\n  if (data.svg) {\n    //\n    //  SVG data is modified to add linebreaks for readability,\n    //  and to put back the xlink namespace that is removed in HTML5\n    //\n    var svgdata = svg.outerHTML.replace(/><([^/])/g, \">\\n<$1\").replace(/(<\\/[a-z]*>)(?=<\\/)/g, \"$1\\n\").replace(/(<(?:use|image) [^>]*)(href=)/g, ' $1xlink:$2');\n\n    //\n    //  Add the requested data to the results\n    //\n    result.svg = svgdata;\n  }\n  if (data.svgNode) result.svgNode = svg;\n  result.width = svg.getAttribute(\"width\");\n  result.height = svg.getAttribute(\"height\");\n  result.style = svg.style.cssText;\n}\n\n/********************************************************************/\n\n//\n//  Start typesetting the queued expressions\n//\nfunction StartQueue() {\n  data = callback = originalData = null; //  clear existing equation, if any\n  errors = sErrors;\n  sErrors = []; //  clear any errors\n  if (!queue.length) return; //  return if nothing to do\n\n  serverState = STATE.BUSY;\n  var result = {},\n    $$ = window.Array;\n\n  //\n  //  Get the math data and callback\n  // and set the content with the proper script type\n  //\n  var item = queue.shift();\n  data = item[0];\n  callback = item[1];\n  originalData = item[2];\n  content.innerHTML = \"\";\n  MathJax.HTML.addElement(content, \"script\", {\n    type: \"math/\" + TYPES[data.format]\n  }, [data.math]);\n  html.setAttribute(\"xmlns:\" + data.xmlns, \"http://www.w3.org/1998/Math/MathML\");\n\n  //\n  //  Set the SVG and TeX parameters\n  //  according to the requested data\n  //\n  var CHTML = MathJax.OutputJax.CommonHTML,\n    SVG = MathJax.OutputJax.SVG,\n    TEX = MathJax.InputJax.TeX,\n    HUB = MathJax.Hub;\n  SVG.defaultEx = CHTML.defaultEx = data.ex;\n  SVG.defaultWidth = CHTMLdefaultWidth = data.width * data.ex;\n  SVG.config.linebreaks.automatic = CHTML.config.linebreaks.automatic = data.linebreaks;\n  SVG.config.linebreaks.width = CHTML.config.linebreaks.width = data.width * data.ex;\n  SVG.config.useFontCache = data.useFontCache;\n  SVG.config.useGlobalCache = data.useGlobalCache;\n  TEX.config.equationNumbers.autoNumber = data.equationNumbers;\n\n  //\n  // Set the state from data.state or clear it\n  //\n  GetState(data.state);\n\n  //\n  // Get the renderer to use\n  //\n  var renderer = data.html || data.htmlNode || data.css ? \"CommonHTML\" : data.svg || data.svgNode ? \"SVG\" : \"None\";\n\n  //\n  //  Set up a timeout timer to restart MathJax if it runs too long,\n  //  Then push the Typeset call, the MathML, speech, and SVG calls,\n  //  and our TypesetDone routine\n  //\n  timer = setTimeout(RestartMathJax, data.timeout);\n  HUB.Queue($$(SetRenderer, renderer), $$(\"Process\", HUB), $$(TypesetDone, result), $$(GetSpeech, result), $$(GetMML, result), $$(GetHTML, result), $$(RerenderSVG, result), $$(GetSVG, result), $$(ReturnResult, result));\n}\n\n//\n//  Update the MathJax values from the state,\n//  or clear them if there is no state.\n//\nfunction GetState(state) {\n  var SVG = MathJax.OutputJax.SVG,\n    TEX = MathJax.InputJax.TeX,\n    MML = MathJax.ElementJax.mml,\n    AMS = MathJax.Extension[\"TeX/AMSmath\"],\n    HUB = MathJax.Hub,\n    HTML = MathJax.HTML,\n    GLYPH = (SVG.BBOX || {}).GLYPH;\n  if (state && state.AMS) {\n    AMS.startNumber = state.AMS.startNumber;\n    AMS.labels = state.AMS.labels;\n    AMS.IDs = state.AMS.IDs;\n    MML.SUPER.ID = state.mmlID;\n    GLYPH.glyphs = state.glyphs;\n    GLYPH.defs = state.defs;\n    GLYPH.n = state.n;\n    ID = state.ID;\n  } else {\n    if (state) {\n      state.AMS = {};\n    }\n    if (SVG.resetGlyphs) SVG.resetGlyphs(true);\n    if (data.useGlobalCache) {\n      state.glyphs = {};\n      state.defs = HTML.Element(\"defs\");\n      state.n = 0;\n    }\n    if (TEX.resetEquationNumbers) TEX.resetEquationNumbers();\n    MML.SUPER.ID = ID = 0;\n    MathJax.OutputJax.CommonHTML.ID = 0;\n  }\n}\n\n//\n//  When the expression is typeset,\n//    clear the timeout timer, if any,\n//    and update the MathJax state,\n//\nfunction TypesetDone(result) {\n  if (timer) {\n    clearTimeout(timer);\n    timer = null;\n  }\n  html.removeAttribute(\"xmlns:\" + data.xmlns);\n}\n\n//\n//  Return the result object, and\n//  do the next queued expression\n//\nfunction ReturnResult(result) {\n  if (errors.length) {\n    result.errors = errors;\n  }\n  var state = data.state;\n  if (state) {\n    var AMS = MathJax.Extension[\"TeX/AMSmath\"];\n    var GLYPH = (MathJax.OutputJax.SVG || {}).BBOX.GLYPH;\n    state.AMS.startNumber = AMS.startNumber;\n    state.AMS.labels = AMS.labels;\n    state.AMS.IDs = AMS.IDs;\n    state.mmlID = MathJax.ElementJax.mml.SUPER.ID;\n    state.glyphs = GLYPH.glyphs;\n    state.defs = GLYPH.defs;\n    state.n = GLYPH.n;\n    state.ID = ID;\n  }\n  serverState = STATE.READY;\n  callback(result, originalData);\n  if (serverState === STATE.READY) StartQueue();\n}\n\n//\n//  Set the MathJax renderer\n//\nfunction SetRenderer(renderer) {\n  return MathJax.Hub.setRenderer(renderer);\n}\nfunction RerenderSVG(result) {\n  if ((data.html || data.htmlNode || data.css) && (data.svg || data.svgNode)) {\n    timer = setTimeout(RestartMathJax, data.timeout);\n    var queue = MathJax.Callback.Queue(),\n      $$ = window.Array;\n    return queue.Push($$(SetRenderer, \"SVG\"), $$(\"Rerender\", MathJax.Hub), $$(TypesetDone, result));\n  }\n}\n\n/********************************************************************/\n\n//\n//  If MathJax times out, discard the DOM\n//  and load a new one (get a fresh MathJax)\n//\nfunction RestartMathJax() {\n  if (timer) {\n    MathJax.Hub.queue.queue = []; // clear MathJax queue, so pending operations won't fire\n    MathJax = timer = window = document = html = content = null;\n    ReportError(\"Timeout waiting for MathJax:  restarting\");\n  }\n  serverState = STATE.STOPPED;\n  GetWindow();\n  ConfigureMathJax();\n  StartMathJax();\n}\n\n/********************************************************************/\n\n//\n//  The API call to typeset an equation\n//\n//     %%% cache results?\n//     %%% check types and values of parameters\n//\n\n// callback API for compatibility with MathJax\nvar cbTypeset = function (data, callback) {\n  if (!callback || typeof callback !== \"function\") {\n    if (displayErrors) console.error(\"Missing callback\");\n    return;\n  }\n  var options = {};\n  for (var id in defaults) {\n    if (defaults.hasOwnProperty(id)) {\n      options[id] = data.hasOwnProperty(id) ? data[id] : defaults[id];\n    }\n  }\n  if (data.state) {\n    options.state = data.state;\n  }\n  if (!TYPES[options.format]) {\n    ReportError(\"Unknown format: \" + options.format, callback);\n    return;\n  }\n  queue.push([options, callback, Object.assign({}, data)]);\n  if (serverState == STATE.STOPPED) {\n    RestartMathJax();\n  }\n  if (serverState == STATE.READY) StartQueue();\n};\n\n// main API, callback and promise compatible\nexports.typeset = function (data, callback) {\n  if (callback) cbTypeset(data, callback);else return new Promise(function (resolve, reject) {\n    cbTypeset(data, function (output, input) {\n      if (output.errors) reject(output.errors);else resolve(output, input);\n    });\n  });\n};\n\n//\n//  Manually start MathJax (this is done automatically\n//  when the first typeset() call is made), but delay\n//  restart if we are already starting up (prevents\n//  multiple calls to start() from causing confusion).\n//\nexports.start = function () {\n  if (serverState === STATE.STARTED) {\n    serverState = STATE.RESTART;\n  } else if (serverState !== STATE.ABORT) {\n    RestartMathJax();\n  }\n};\n\n//\n//  Configure MathJax and the API\n//  You can pass additional configuration options to MathJax using the\n//    MathJax property, and can set displayErrors and displayMessages\n//    that control the display of error messages, and extensions to add\n//    additional MathJax extensions to the base or to sub-categories.\n//\n//  E.g.\n//     mjAPI.config({\n//       MathJax: {SVG: {font: \"STIX-Web\"}},\n//       displayErrors: false,\n//       extensions: 'Safe,TeX/noUndefined'\n//     });\n//\nexports.config = function (config) {\n  if (config.displayMessages != null) {\n    displayMessages = config.displayMessages;\n  }\n  if (config.displayErrors != null) {\n    displayErrors = config.displayErrors;\n  }\n  if (config.undefinedCharError != null) {\n    undefinedChar = config.undefinedCharError;\n  }\n  if (config.extensions != null) {\n    extensions = config.extensions;\n  }\n  if (config.paths != null) {\n    paths = config.paths;\n  }\n  if (config.fontURL != null) {\n    fontURL = config.fontURL;\n  }\n  if (config.MathJax) {\n    // strip MathJax config blocks to avoid errors\n    if (config.MathJax.config) delete config.MathJax.config;\n    MathJaxConfig = config.MathJax;\n  }\n};","map":{"version":3,"names":["http","require","fs","path","url","jsdom","JSDOM","isFullwidthCodePoint","patch","displayMessages","displayErrors","undefinedChar","extensions","paths","fontURL","defaults","ex","width","useFontCache","useGlobalCache","linebreaks","equationNumbers","cjkCharWidth","math","format","xmlns","html","htmlNode","css","mml","mmlNode","svg","svgNode","speakText","timeout","STATE","STOPPED","STARTED","READY","BUSY","RESTART","MathJaxPath","resolve","MathJaxConfig","MathJax","serverState","timer","document","window","content","queue","data","callback","originalData","errors","sErrors","ID","TYPES","TeX","AsciiMath","MathML","CHTMLSTYLES","GetWindow","virtualConsole","VirtualConsole","sendTo","console","userAgent","runScripts","resources","firstChild","addEventListener","event","AddError","error","stack","body","appendChild","createElement","id","innerHTML","ConfigureMathJax","jax","Array","SVG","EqnChunk","EqnDelay","CommonHTML","undefinedFamily","AuthorInit","key","Ajax","config","Hub","styles","Startup","MenuZoom","Extension","MathEvents","Event","Touch","Hover","loaded","fileURL","create","node","Callback","STATUS","OK","Message","Set","text","n","delay","Localization","_","apply","Clear","Remove","Init","Register","MessageHook","message","toString","toUpperCase","fonts","join","processSectionDelay","processUpdateTime","processUpdateDelay","StartupHook","OutputJax","HTML","Augment","InitializeSVG","pxPerInch","defaultEx","defaultWidth","preTranslate","state","scripts","i","m","length","script","prev","span","div","em","maxwidth","relwidth","cwidth","linebreak","automatic","parentNode","previousSibling","String","className","match","removeChild","elementJax","display","root","Get","Element","style","scale","inputID","isMathJax","jaxID","insertBefore","x_height","lineWidth","BIGDIMEN","SVGeqn","SVGlast","SVGi","SVGchunk","SVGdelay","BBOX","TEXT","def","stroke","SUPER","arguments","call","addText","element","textWidth","split","map","c","codePointAt","reduce","a","b","bbox","height","y","setAttribute","w","r","l","h","H","d","D","MML","ElementJax","MGLYPH","mglyph","TOSVG","prototype","toSVG","variant","values","getValues","src","GLYPH","img","SRC","status","CHTML","STYLES","version","webfontDir","getDefaultExEm","head","getElementsByTagName","defaultEm","TEX","substr","NODE","outerEm","fontsize","CHTMLeqn","CHTMLlast","CHTMLi","CHTMLchunk","CHTMLdelay","getHDW","name","TOCHTML","toCommonHTML","options","None","Translate","postTranslate","loadComplete","AuthorConfig","indexOf","macros","InputJax","Definitions","color","textcolor","colorbox","fcolorbox","definecolor","resetGlyphs","setTimeout","RestartMathJax","Queue","StartQueue","extensionList","matches","push","adjustArrays","obj","hasOwnProperty","A","concat","Insert","dst","StartMathJax","onerror","ReportError","currentCallback","nopush","GetMML","result","getAllJax","alttext","attrNames","toMathML","err","restart","After","fragment","GetSpeech","GetHTML","SourceElement","labelTarget","querySelector","child","childNodes","getAttribute","ids","querySelectorAll","removeAttribute","frame","outerHTML","GetSVG","svgdata","replace","cssText","$$","item","shift","addElement","type","HUB","CHTMLdefaultWidth","autoNumber","GetState","renderer","SetRenderer","TypesetDone","RerenderSVG","ReturnResult","AMS","startNumber","labels","IDs","mmlID","glyphs","defs","resetEquationNumbers","clearTimeout","setRenderer","Push","cbTypeset","Object","assign","exports","typeset","Promise","reject","output","input","start","ABORT","undefinedCharError"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/lib/main.js"],"sourcesContent":["/*********************************************************************\n *\n *  main.js\n *\n *  Implements an API to MathJax in Node.js so that MathJax can be\n *  used server-side to generate HTML+CSS, SVG, or MathML.\n *\n *  This API converts single math expressions while giving control\n *  over the input format, the SVG font caching, and a number of other\n *  features.\n *\n * ----------------------------------------------------------------------\n *\n *  Copyright (c) 2014--2016 The MathJax Consortium\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\nvar http = require('http');\nvar fs = require('fs');\nvar path = require('path');\nvar url = require('url');\nvar jsdom = require('jsdom');\nvar JSDOM = jsdom.JSDOM;\nvar isFullwidthCodePoint = require('is-fullwidth-code-point');\n\nrequire('./patch/jsdom.js').patch(JSDOM);  //  Fix some bugs in jsdom\n\nvar displayMessages = false;      // don't log Message.Set() calls\nvar displayErrors = true;         // show error messages on the console\nvar undefinedChar = false;        // unknown characters are not saved in the error array\nvar extensions = '';              // no additional extensions used\nvar paths = {};                   // additional paths (for third party extensions)\nvar fontURL = '';  // location of web fonts for CHTML\n\nvar defaults = {\n  ex: 6,                          // ex-size in pixels\n  width: 100,                     // width of container (in ex) for linebreaking and tags\n  useFontCache: true,             // use <defs> and <use> in svg output?\n  useGlobalCache: false,          // use common <defs> for all equations?\n  linebreaks: false,              // do linebreaking?\n  equationNumbers: \"none\",        // or \"AMS\" or \"all\"\n  cjkCharWidth: 13,               // width of CJK character\n\n  math: \"\",                       // the math to typeset\n  format: \"TeX\",                  // the input format (TeX, inline-TeX, AsciiMath, or MathML)\n  xmlns: \"mml\",                   // the namespace to use for MathML\n\n  html: false,                    // return HTML output?\n  htmlNode: false,             // DOM element for HTML output?\n  css: false,                     // return CSS for HTML output?\n  mml: false,                     // return mml output?\n  mmlNode: false,              // DOM element for MML output?\n  svg: false,                     // return svg output?\n  svgNode: false,              // DOM element for SVG output?\n  speakText: true,               // add spoken annotations\n  timeout: 10 * 1000,             // 10 second timeout before restarting MathJax\n};\n\n//\n//  The MathJax server states\n//\nvar STATE = {\n  STOPPED: 1,          // no DOM or MathJax available\n  STARTED: 2,          // DOM loaded, MathJax starting up\n  READY:   3,          // MathJax initialized and ready to process math\n  BUSY:    4,          // MathJax currently processing math\n  RESTART: 5,          // start() called while MathJax is starting up\n};\n\n//\n// The MathJaxPath is normaized against file:/// so that Windows paths are correct\n//\nvar MathJaxPath = url.resolve(\"file:///\",\"file:\"+require.resolve('mathjax'));\nvar MathJaxConfig;                   // configuration for when starting MathJax\nvar MathJax;                         // filled in once MathJax is loaded\nvar serverState = STATE.STOPPED;     // nothing loaded yet\nvar timer;                           // used to reset MathJax if it runs too long\n\nvar document, window, content, html; // the DOM elements\n\nvar queue = [];       // queue of typesetting requests of the form [data,callback]\nvar data, callback, originalData;   // the current queue item\nvar errors = [];      // errors collected durring the typesetting\nvar sErrors = [];     // errors collected durring MathJax startup\nvar ID = 0;           // id for this SVG element\n\n//\n//  The delimiters used for each of the input formats\n//\nvar TYPES = {\n  TeX: \"tex; mode=display\",\n  \"inline-TeX\": \"tex\",\n  AsciiMath: \"asciimath\",\n  MathML: \"mml\"\n};\n\nvar CHTMLSTYLES;         // filled in when CommonHTML is loaded\n\n/********************************************************************/\n\n//\n//  Create the DOM window and set up the console wtihin it\n//  Add an error handler to trap unexpected errors (requires\n//    modifying jsdom)\n//  Add a <div> where we can put the math to be typeset\n//    and typeset math in the three formats we use (to force\n//    the jax to be loaded completely)\n//\nfunction GetWindow() {\n  var virtualConsole = new jsdom.VirtualConsole();\n  virtualConsole.sendTo(console);\n  window = new JSDOM('',{\n    virtualConsole: virtualConsole,\n    userAgent: \"Node.js\",\n    runScripts: \"dangerously\",\n    resources: \"usable\"\n  }).window;\n  document = window.document;\n  html = document.firstChild;\n  window.addEventListener(\"error\",function (event) {AddError(\"Error: \"+event.error.stack)});\n  content = document.body.appendChild(document.createElement(\"div\"));\n  content.id = \"MathJax_Content\";\n  content.innerHTML = '<script type=\"math/tex\">x</script>' +\n                      '<script type=\"math/asciimath\">x</script>' +\n                      '<script type=\"math/mml\"><math><mi>x</mi></math></script>';\n}\n\n//\n//  Set up a Mathjax configuration within the window\n//\nfunction ConfigureMathJax() {\n  window.MathJax = {\n    //\n    //  Load all input jax and preprocessors\n    //  Load AMS extensions and the autoload extension for TeX\n    //  Create stand-alone SVG elements with font caches by default\n    //    (users can override that)\n    //\n    jax: [\"input/TeX\", \"input/MathML\", \"input/AsciiMath\", \"output/SVG\", \"output/CommonHTML\"],\n    extensions: [\"toMathML.js\"],\n    TeX: {extensions: window.Array(\"AMSmath.js\",\"AMSsymbols.js\",\"autoload-all.js\")},\n    SVG: {useFontCache: true, useGlobalCache: false, EqnChunk: 1000000, EqnDelay: 0},\n    CommonHTML: {EqnChunk: 1000000, EqnDelay: 0, undefinedFamily:\"monospace\"},\n\n    //\n    //  This gets run before MathJax queues any actions\n    //\n    AuthorInit: function () {\n      MathJax = window.MathJax;\n\n      // Add custom paths to configuration\n      for (let key in paths) {\n        MathJax.Ajax.config.path[key] = paths[key];\n      }\n\n      delete MathJax.Hub.config.styles;               // don't need any styles\n      MathJax.Hub.Startup.MenuZoom = function () {};  // don't load menu or zoom code\n      MathJax.Extension.MathEvents = {\n        Event:{}, Touch:{}, Hover:{}                  // fake structure to avid errors\n      };\n      MathJax.Ajax.loaded[MathJax.Ajax.fileURL(\"[MathJax]/extensions/MathEvents.js\")] = true;\n\n      //\n      //  When creating stylesheets, no need to wait for them\n      //  to become active, so just do the callback\n      //\n      MathJax.Ajax.timer.create = function (callback,node) {\n        callback = MathJax.Callback(callback);\n        callback(this.STATUS.OK);\n        return callback;\n      };\n\n      //\n      //  Use the console for messages, if we are requesting them\n      //\n      MathJax.Message.Set = function (text,n,delay) {\n        if (displayMessages && n !== 0) {\n          if (text instanceof window.Array)\n            {text = MathJax.Localization._.apply(MathJax.Localization,text)}\n          console.error(text);\n        }\n      };\n      MathJax.Message.Clear = function () {};\n      MathJax.Message.Remove = function () {};\n      MathJax.Message.Init = function () {};\n\n      //\n      //  Trap Math Processing Errors\n      //\n      MathJax.Hub.Register.MessageHook(\"Math Processing Error\",function (message) {\n        AddError(\"Math Processing Error: \"+message[2].message);\n      });\n      MathJax.Hub.Register.MessageHook(\"SVG Jax - unknown char\",function (message) {\n        AddError(\"SVG - Unknown character: U+\"+message[1].toString(16).toUpperCase()+\n                    \" in \"+(message[2].fonts||[\"unknown\"]).join(\",\"),!undefinedChar);\n      });\n      MathJax.Hub.Register.MessageHook(\"CommonHTML Jax - unknown char\",function (message) {\n        AddError(\"CHTML - Unknown character: U+\"+message[1].toString(16).toUpperCase()+\n                    \" in \"+(message[2].fonts||[\"unknown\"]).join(\",\"),!undefinedChar);\n      });\n      MathJax.Hub.Register.MessageHook(\"MathML Jax - unknown node type\",function (message) {\n        AddError(\"MathML - Unknown node type: \"+message[1]);\n      });\n      MathJax.Hub.Register.MessageHook(\"MathML Jax - parse error\",function (message) {\n        AddError(\"MathML - \"+message[1]);\n      });\n      MathJax.Hub.Register.MessageHook(\"AsciiMath Jax - parse error\",function (message) {\n        AddError(\"AsciiMath parse error: \"+message[1]);\n      });\n      MathJax.Hub.Register.MessageHook(\"TeX Jax - parse error\",function (message) {\n        AddError(\"TeX parse error: \"+message[1]);\n      });\n      MathJax.Hub.Register.MessageHook(\"file load error\",function (message) {\n        AddError(\"File load error: \"+message[1]);\n      });\n\n      //\n      //  Set the delays to 0 (we don't need to update the screen)\n      //\n      MathJax.Hub.processSectionDelay = 0;\n      MathJax.Hub.processUpdateTime = 10000000;  // don't interrupt processing of output\n      MathJax.Hub.processUpdateDelay = 0;\n\n      //\n      //  Adjust the SVG output jax\n      //\n      MathJax.Hub.Register.StartupHook(\"SVG Jax Config\",function () {\n        var SVG = MathJax.OutputJax.SVG, HTML = MathJax.HTML;\n\n        //\n        //  Don't need the styles\n        //\n        delete SVG.config.styles\n\n        SVG.Augment({\n          //\n          //  Set up the default ex-size and width\n          //\n          InitializeSVG: function () {\n            this.pxPerInch    = 96;\n            this.defaultEx    = 6;\n            this.defaultWidth = 100;\n          },\n          //\n          //  Adjust preTranslate() to not try to find the ex-size or\n          //  the container widths.\n          //\n          preTranslate: function (state) {\n            var scripts = state.jax[this.id], i, m = scripts.length,\n                script, prev, span, div, jax, ex, em,\n                maxwidth = 100000, relwidth = false, cwidth,\n                linebreak = this.config.linebreaks.automatic,\n                width = this.config.linebreaks.width;\n            //\n            //  Loop through the scripts\n            //\n            for (i = 0; i < m; i++) {\n              script = scripts[i]; if (!script.parentNode) continue;\n              //\n              //  Remove any existing output\n              //\n              prev = script.previousSibling;\n              if (prev && String(prev.className).match(/^MathJax(_SVG)?(_Display)?( MathJax(_SVG)?_Processing)?$/))\n                {prev.parentNode.removeChild(prev)}\n              //\n              //  Add the span, and a div if in display mode,\n              //  then mark it as being processed\n              //\n              jax = script.MathJax.elementJax; if (!jax) continue;\n              jax.SVG = {display: (jax.root.Get(\"display\") === \"block\")}\n              span = div = HTML.Element(\"span\",{\n                style: {\"font-size\": this.config.scale+\"%\", display:\"inline-block\"},\n                className:\"MathJax_SVG\", id:jax.inputID+\"-Frame\", isMathJax:true, jaxID:this.id\n              });\n              if (jax.SVG.display) {\n                div = HTML.Element(\"div\",{className:\"MathJax_SVG_Display\"});\n                div.appendChild(span);\n              }\n              div.className += \" MathJax_SVG_Processing\";\n              script.parentNode.insertBefore(div,script);\n              //\n              //  Set SVG data for jax\n              //\n              jax.SVG.ex = ex = (data||defaults).ex;\n              jax.SVG.em = em = ex / SVG.TeX.x_height * 1000; // scale ex to x_height\n              jax.SVG.cwidth = width / em * 1000;\n              jax.SVG.lineWidth = (linebreak ? width / em * 1000 : SVG.BIGDIMEN);\n            }\n            //\n            //  Set state variables used for displaying equations in chunks\n            //\n            state.SVGeqn = state.SVGlast = 0; state.SVGi = -1;\n            state.SVGchunk = this.config.EqnChunk;\n            state.SVGdelay = false;\n          }\n        });\n\n        //\n        //  TEXT boxes use getBBox, which isn't implemented, so\n        //  use a monspace font and fake the size.  Since these\n        //  are used only for error messages and undefined characters,\n        //  this should be good enough for now.\n        //\n        SVG.BBOX.TEXT.Augment({\n          Init: function (scale,text,def) {\n            if (!def) {def = {}}; def.stroke = \"none\";\n            if (def[\"font-style\"] === \"\") delete def[\"font-style\"];\n            if (def[\"font-weight\"] === \"\") delete def[\"font-weight\"];\n            this.SUPER(arguments).Init.call(this,def);\n            SVG.addText(this.element,text);\n            // tweaking font fallback behavior: https://github.com/mathjax/MathJax-node/issues/299\n            var textWidth = text.split('')\n              .map(function(c) { return isFullwidthCodePoint(c.codePointAt()) ? data.cjkCharWidth : 8.5 })\n              .reduce(function(a, b) { return a + b }, 0);\n            var bbox = {width: textWidth, height: 18, y: -12};\n            scale *= 1000/SVG.em;\n            this.element.setAttribute(\"font-family\",\"monospace\");\n            this.element.setAttribute(\"transform\",\"scale(\"+scale+\") matrix(1 0 0 -1 0 0)\");\n            this.w = this.r = bbox.width*scale; this.l = 0;\n            this.h = this.H = -bbox.y*scale;\n            this.d = this.D = (bbox.height + bbox.y)*scale;\n          }\n        });\n\n        //\n        //  Don't have mglyph load images\n        //\n        MathJax.Hub.Register.StartupHook(\"SVG mglyph Ready\",function () {\n          var MML = MathJax.ElementJax.mml;\n          var MGLYPH = MML.mglyph;\n          var TOSVG = MGLYPH.prototype.toSVG;\n          MGLYPH.Augment({\n            toSVG: function (variant,scale) {\n              var values = this.getValues(\"src\",\"width\",\"height\");\n              if (values.src !== \"\" && !MGLYPH.GLYPH[values.src]) {\n                if (!values.width || !values.height) {\n                  AddError(\"mglyphs must have explicit width and height in mathjax-node\");\n                }\n                MGLYPH.GLYPH[values.src] = {\n                  img: {SRC: values.src, width: 0, height: 0},\n                  status: \"OK\"\n                };\n              }\n              return TOSVG.apply(this,arguments);\n            }\n          });\n        });\n\n      });\n\n      //\n      //  Adjust the CommonHTML output jax\n      //\n      MathJax.Hub.Register.StartupHook(\"CommonHTML Jax Config\",function () {\n        var CHTML = MathJax.OutputJax.CommonHTML, HTML = MathJax.HTML;\n\n        //\n        //  Don't need these styles\n        //\n        var STYLES = CHTML.config.styles;\n        delete STYLES[\"#MathJax_CHTML_Tooltip\"];\n        delete STYLES[\".MJXc-processing\"];\n        delete STYLES[\".MJXc-processed\"];\n        delete STYLES[\".mjx-chartest\"];\n        delete STYLES[\".mjx-chartest .mjx-char\"];\n        delete STYLES[\".mjx-chartest .mjx-box\"];\n        delete STYLES[\".mjx-test\"];\n        delete STYLES[\".mjx-ex-boxtest\"];\n        //  fontURL to current MathJax version\n        if (!fontURL){\n          fontURL = 'https://cdnjs.cloudflare.com/ajax/libs/mathjax/' + MathJax.version + '/fonts/HTML-CSS';\n        }\n        CHTML.Augment({\n          webfontDir: fontURL,\n          //\n          //  Set up the default ex-size and width\n          //\n          getDefaultExEm: function () {\n            var styles = document.head.getElementsByTagName(\"style\");\n            CHTMLSTYLES = styles[styles.length-1].innerHTML;\n            this.pxPerInch    = 96;\n            this.defaultEx    = 6;\n            this.defaultEm    = 6 / CHTML.TEX.x_height * 1000;\n            this.defaultWidth = 100;\n          },\n          //\n          //  Adjust preTranslate() to not try to find the ex-size or\n          //  the container widths.\n          //\n          preTranslate: function (state) {\n            var scripts = state.jax[this.id], i, m = scripts.length,\n                script, prev, node, jax, ex, em,\n                maxwidth = 100000, relwidth = false, cwidth = 0,\n                linebreak = this.config.linebreaks.automatic,\n                width = this.config.linebreaks.width;\n            //\n            //  Loop through the scripts\n            //\n            for (i = 0; i < m; i++) {\n              script = scripts[i]; if (!script.parentNode) continue;\n              //\n              //  Remove any existing output\n              //\n              prev = script.previousSibling;\n              if (prev && prev.className && String(prev.className).substr(0,9) === \"mjx-chtml\")\n                prev.parentNode.removeChild(prev);\n              //\n              //  Add the node for the math and mark it as being processed\n              //\n              jax = script.MathJax.elementJax; if (!jax) continue;\n              jax.CHTML = {display: (jax.root.Get(\"display\") === \"block\")}\n              node = CHTML.Element(\"mjx-chtml\",{\n                id:jax.inputID+\"-Frame\", isMathJax:true, jaxID:this.id\n              });\n              if (jax.CHTML.display) {\n                //\n                // Zoom box requires an outer container to get the positioning right.\n                //\n                var NODE = CHTML.Element(\"mjx-chtml\",{className:\"MJXc-display\",isMathJax:false});\n                NODE.appendChild(node); node = NODE;\n              }\n\n              node.className += \" MJXc-processing\";\n              script.parentNode.insertBefore(node,script);\n              //\n              //  Set CHTML data for jax\n              //\n              jax.CHTML.ex = ex = (data||defaults).ex;\n              jax.CHTML.em = jax.CHTML.outerEm = em = ex / CHTML.TEX.x_height; // scale ex to x_height\n              jax.CHTML.cwidth = width / em;\n              jax.CHTML.lineWidth = (linebreak ? width / em : 1000000);\n              jax.CHTML.scale = 1; jax.CHTML.fontsize = \"100%\";\n            }\n            //\n            //  Set state variables used for displaying equations in chunks\n            //\n            state.CHTMLeqn = state.CHTMLlast = 0; state.CHTMLi = -1;\n            state.CHTMLchunk = this.config.EqnChunk;\n            state.CHTMLdelay = false;\n          },\n\n          //\n          //  We are using a monospaced font, so fake the size\n          //\n          getHDW: function (c,name,styles) {\n            return {h:.8, d:.2, w:c.length*.5};\n          }\n\n        });\n\n        //\n        //  Don't have mglyph load images\n        //\n        MathJax.Hub.Register.StartupHook(\"CommonHTML mglyph Ready\",function () {\n          var MML = MathJax.ElementJax.mml;\n          var MGLYPH = MML.mglyph;\n          var TOCHTML = MGLYPH.prototype.toCommonHTML;\n          MGLYPH.Augment({\n            toCommonHTML: function (node,options) {\n              var values = this.getValues(\"src\",\"width\",\"height\");\n              if (values.src !== \"\" && !MGLYPH.GLYPH[values.src]) {\n                if (!values.width || !values.height) {\n                  AddError(\"mglyphs must have explicit width and height in mathjax-node\");\n                }\n                MGLYPH.GLYPH[values.src] = {\n                  img: {SRC: values.src, width: 0, height: 0},\n                  status: \"OK\"\n                };\n              }\n              return TOCHTML.apply(this,arguments);\n            }\n          });\n        });\n\n      });\n\n      //\n      //  Set up None output jax (for when only MathML output is needed)\n      //\n      MathJax.Hub.Register.StartupHook(\"End Jax\", function () {\n        MathJax.OutputJax.None = MathJax.OutputJax({\n          id: \"None\",\n          preTranslate: function () {},\n          Translate: function () {},\n          postTranslate: function () {}\n        });\n        MathJax.OutputJax.None.loadComplete(\"jax.js\");\n        MathJax.OutputJax.None.Register(\"jax/mml\");\n      });\n\n      //\n      //  Reset the color extension after `autoload-all`\n      //\n      if (MathJax.AuthorConfig.extensions.indexOf(\"TeX/color.js\") == -1 && MathJax.AuthorConfig.extensions.indexOf(\"TeX/autoload-all.js\") == -1) {\n              MathJax.Hub.Register.StartupHook(\"TeX autoload-all Ready\",function () {\n                var macros = MathJax.InputJax.TeX.Definitions.macros;\n                macros.color = \"Color\";\n                delete macros.textcolor;\n                delete macros.colorbox;\n                delete macros.fcolorbox;\n                delete macros.definecolor;\n              });\n            }\n\n      //\n      //  Start the typesetting queue when MathJax is ready\n      //    (reseting the counters so that the initial math doesn't affect them)\n      //\n      MathJax.Hub.Register.StartupHook(\"End\",function () {\n        if (MathJax.OutputJax.SVG.resetGlyphs) MathJax.OutputJax.SVG.resetGlyphs(true);\n        MathJax.ElementJax.mml.ID = 0;\n        if (serverState === STATE.RESTART) {\n          setTimeout(RestartMathJax, 100);\n        } else {\n          serverState = STATE.READY;\n          MathJax.Hub.Queue(\n            function () {sErrors = errors},\n            StartQueue\n          );\n        }\n      });\n    }\n  };\n\n  if (extensions) {\n    //\n    // Parse added extensions list and add to standard ones\n    //\n    var extensionList = extensions.split(/\\s*,\\s*/);\n    for (var i = 0; i < extensionList.length; i++) {\n      var matches = extensionList[i].match(/^(.*?)(\\.js)?$/);\n      window.MathJax.extensions.push(matches[1] + '.js');\n    }\n  }\n\n  //\n  //  Turn arrays into jsdom window arrays\n  //  (so \"instanceof Array\" will identify them properly)\n  //\n  var adjustArrays = function (obj) {\n    for (var id in obj) {if (obj.hasOwnProperty(id)) {\n      if (obj[id] instanceof Array) {\n        var A = window.Array();\n        obj[id] = A.concat.apply(A,obj[id]);\n      } else if (typeof obj[id] === \"object\") {\n        adjustArrays(obj[id]);\n      }\n    }}\n  }\n  if (MathJaxConfig) {\n    adjustArrays(MathJaxConfig);\n    // merge the defaults into the user configuration (to sanitize)\n    window.MathJax = Insert(Insert({},MathJaxConfig),window.MathJax);\n    if (MathJaxConfig.extensions) {\n      window.MathJax.extensions = window.MathJax.extensions.concat(MathJaxConfig.extensions);\n    }\n  }\n}\n\n//\n//  Insert one objects into another\n//\nfunction Insert(dst,src) {\n  for (var id in src) {if (src.hasOwnProperty(id)) {\n    // allow for concatenation of arrays?\n    if (typeof src[id] === 'object' && !(src[id] instanceof Array) &&\n       (typeof dst[id] === 'object' || typeof dst[id] === 'function'))\n         {Insert(dst[id],src[id])} else {dst[id] = src[id]}\n  }}\n  return dst;\n}\n\n//\n//  Load MathJax into the DOM\n//\nfunction StartMathJax() {\n  serverState = STATE.STARTED;\n  var script = document.createElement(\"script\");\n  script.src = MathJaxPath;\n  script.onerror = function () {AddError(\"Can't load MathJax.js from \"+MathJaxPath)};\n  document.head.appendChild(script);\n}\n\n/********************************************************************/\n\n//\n//  Return an error value (and report it to console)\n//\nfunction ReportError(message,currentCallback) {\n  AddError(message);\n  (currentCallback||callback)({errors: errors});\n}\n\n//\n//  Add an error to the error list and display it on the console\n//\nfunction AddError(message,nopush) {\n  if (displayErrors) console.error(message);\n  if (!nopush) errors.push(message);\n}\n\n\n/********************************************************************/\n\n//\n//  Creates the MathML output (taking MathJax resets\n//  into account)\n//\nfunction GetMML(result) {\n  if (!data.mml && !data.mmlNode) return;\n  var jax = MathJax.Hub.getAllJax()[0];\n  if (data.speakText && !jax.root.alttext) {\n    jax.root.alttext = result.speakText;\n    var attrNames = jax.root.attrNames;\n    if (attrNames && attrNames.indexOf(\"alttext\") === -1) {\n      attrNames.push(\"alttext\");\n    }\n  }\n  try {\n    var mml = jax.root.toMathML('',jax);\n  } catch(err) {\n    if (!err.restart) {throw err;} // an actual error\n    return MathJax.Callback.After(window.Array(GetMML,result),err.restart);\n  }\n  if (data.mml) result.mml = mml;\n  if (data.mmlNode) result.mmlNode = JSDOM.fragment(mml).firstChild;\n}\n\n//\n//  Creates speech string and updates the MathML to include it, if needed\n//\nfunction GetSpeech(result) {\n  if (!data.speakText) return;\n  result.speakText = \"Equation\";\n  if (data.format !== \"MathML\") result.speakText = data.math;\n  else {\n    var jax = MathJax.Hub.getAllJax()[0];\n    if (jax.root.alttext) result.speakText = jax.root.alttext;\n  }\n}\n\n//\n//  Create HTML and CSS output, if requested\n//\nfunction GetHTML(result) {\n  if (data.css) result.css = CHTMLSTYLES;\n  if (!data.html && !data.htmlNode) return;\n  var jax = MathJax.Hub.getAllJax()[0]; if (!jax) return;\n  var script = jax.SourceElement(), html = script.previousSibling;\n\n  // add speech text if there isn't one\n  if (data.speakText){\n    var labelTarget = html.querySelector('.mjx-math');\n    for (child of labelTarget.childNodes) child.setAttribute(\"aria-hidden\",true);\n    if (!labelTarget.getAttribute(\"aria-label\")){\n    labelTarget.setAttribute(\"aria-label\",result.speakText);\n    }\n  }\n  // remove automatically generated IDs\n  var ids = html.querySelectorAll('[id^=\"MJXc-Node-\"]');\n  for (var i = 0; i < ids.length; i++){\n    ids[i].removeAttribute(\"id\");\n  }\n  // remove extreneous frame element\n  var frame = html.querySelector('[id^=\"MathJax-Element-\"]');\n  if (frame){\n    // in display-mode, the frame is inside the display-style wrapper\n    html.insertBefore(frame.firstChild, frame);\n    html.removeChild(frame);\n  }\n  else{\n    // otherwise (inline-mode) the frame is the root element\n    html.removeAttribute(\"id\");\n  }\n  if (data.html) result.html = html.outerHTML;\n  if (data.htmlNode) result.htmlNode = html;\n}\n\n//\n//  Create SVG output, if requested\n//\nfunction GetSVG(result) {\n  if (!data.svg && !data.svgNode) return;\n  var jax = MathJax.Hub.getAllJax()[0]; if (!jax) return;\n  var script = jax.SourceElement(),\n      svg = script.previousSibling.getElementsByTagName(\"svg\")[0];\n  svg.setAttribute(\"xmlns\",\"http://www.w3.org/2000/svg\");\n\n  //\n  //  Add the speech text and mark the SVG appropriately\n  //\n  if (data.speakText){\n    for (var i=0, m=svg.childNodes.length; i < m; i++)\n      svg.childNodes[i].setAttribute(\"aria-hidden\",true);\n    // Note: if aria-label exists, getSpeech preserved it in speakText\n    // remove aria-label since labelled-by title is preferred\n    svg.removeAttribute(\"aria-label\");\n    ID++; var id = \"MathJax-SVG-\"+ID+\"-Title\";\n    svg.setAttribute(\"aria-labelledby\",id);\n    var node = MathJax.HTML.Element(\"title\",{id:id},[result.speakText]);\n    svg.insertBefore(node,svg.firstChild);\n  }\n\n  if (data.svg){\n    //\n    //  SVG data is modified to add linebreaks for readability,\n    //  and to put back the xlink namespace that is removed in HTML5\n    //\n    var svgdata = svg.outerHTML.replace(/><([^/])/g,\">\\n<$1\")\n                               .replace(/(<\\/[a-z]*>)(?=<\\/)/g,\"$1\\n\")\n                               .replace(/(<(?:use|image) [^>]*)(href=)/g,' $1xlink:$2');\n\n    //\n    //  Add the requested data to the results\n    //\n    result.svg = svgdata;\n  }\n  if (data.svgNode) result.svgNode = svg;\n  result.width = svg.getAttribute(\"width\");\n  result.height = svg.getAttribute(\"height\");\n  result.style =  svg.style.cssText;\n}\n\n/********************************************************************/\n\n//\n//  Start typesetting the queued expressions\n//\nfunction StartQueue() {\n  data = callback = originalData = null;       //  clear existing equation, if any\n  errors = sErrors; sErrors = [];              //  clear any errors\n  if (!queue.length) return;    //  return if nothing to do\n\n  serverState = STATE.BUSY;\n  var result = {}, $$ = window.Array;\n\n  //\n  //  Get the math data and callback\n  // and set the content with the proper script type\n  //\n  var item = queue.shift();\n  data = item[0]; callback = item[1]; originalData = item[2];\n  content.innerHTML = \"\";\n  MathJax.HTML.addElement(content,\"script\",{type: \"math/\"+TYPES[data.format]},[data.math]);\n  html.setAttribute(\"xmlns:\"+data.xmlns,\"http://www.w3.org/1998/Math/MathML\");\n\n  //\n  //  Set the SVG and TeX parameters\n  //  according to the requested data\n  //\n  var CHTML = MathJax.OutputJax.CommonHTML,\n      SVG = MathJax.OutputJax.SVG,\n      TEX = MathJax.InputJax.TeX,\n      HUB = MathJax.Hub;\n\n  SVG.defaultEx = CHTML.defaultEx = data.ex;\n  SVG.defaultWidth = CHTMLdefaultWidth = data.width * data.ex;\n  SVG.config.linebreaks.automatic = CHTML.config.linebreaks.automatic = data.linebreaks;\n  SVG.config.linebreaks.width = CHTML.config.linebreaks.width = data.width * data.ex;\n  SVG.config.useFontCache = data.useFontCache;\n  SVG.config.useGlobalCache = data.useGlobalCache;\n  TEX.config.equationNumbers.autoNumber = data.equationNumbers;\n\n  //\n  // Set the state from data.state or clear it\n  //\n  GetState(data.state);\n\n  //\n  // Get the renderer to use\n  //\n  var renderer = (\n      (data.html || data.htmlNode || data.css) ? \"CommonHTML\" :\n          (data.svg || data.svgNode) ? \"SVG\" : \"None\"\n  );\n\n  //\n  //  Set up a timeout timer to restart MathJax if it runs too long,\n  //  Then push the Typeset call, the MathML, speech, and SVG calls,\n  //  and our TypesetDone routine\n  //\n  timer = setTimeout(RestartMathJax,data.timeout);\n  HUB.Queue(\n    $$(SetRenderer,renderer),\n    $$(\"Process\",HUB),\n    $$(TypesetDone,result),\n    $$(GetSpeech,result),\n    $$(GetMML,result),\n    $$(GetHTML,result),\n    $$(RerenderSVG,result),\n    $$(GetSVG,result),\n    $$(ReturnResult,result)\n  );\n}\n\n//\n//  Update the MathJax values from the state,\n//  or clear them if there is no state.\n//\nfunction GetState(state) {\n  var SVG = MathJax.OutputJax.SVG,\n      TEX = MathJax.InputJax.TeX,\n      MML = MathJax.ElementJax.mml,\n      AMS = MathJax.Extension[\"TeX/AMSmath\"],\n      HUB = MathJax.Hub, HTML = MathJax.HTML,\n      GLYPH = (SVG.BBOX||{}).GLYPH;\n\n  if (state && state.AMS) {\n    AMS.startNumber = state.AMS.startNumber;\n    AMS.labels = state.AMS.labels;\n    AMS.IDs = state.AMS.IDs;\n    MML.SUPER.ID = state.mmlID;\n    GLYPH.glyphs = state.glyphs;\n    GLYPH.defs = state.defs;\n    GLYPH.n = state.n;\n    ID = state.ID;\n  } else {\n    if (state) {state.AMS = {}}\n    if (SVG.resetGlyphs) SVG.resetGlyphs(true);\n    if (data.useGlobalCache) {\n      state.glyphs = {};\n      state.defs = HTML.Element(\"defs\");\n      state.n = 0;\n    }\n    if (TEX.resetEquationNumbers) TEX.resetEquationNumbers();\n    MML.SUPER.ID = ID = 0;\n    MathJax.OutputJax.CommonHTML.ID = 0;\n  }\n}\n\n//\n//  When the expression is typeset,\n//    clear the timeout timer, if any,\n//    and update the MathJax state,\n//\nfunction TypesetDone(result) {\n  if (timer) {clearTimeout(timer); timer = null}\n  html.removeAttribute(\"xmlns:\"+data.xmlns);\n}\n\n//\n//  Return the result object, and\n//  do the next queued expression\n//\nfunction ReturnResult(result) {\n  if (errors.length) {\n    result.errors = errors;\n  }\n  var state = data.state;\n  if (state) {\n    var AMS = MathJax.Extension[\"TeX/AMSmath\"];\n    var GLYPH = (MathJax.OutputJax.SVG||{}).BBOX.GLYPH;\n    state.AMS.startNumber = AMS.startNumber;\n    state.AMS.labels = AMS.labels;\n    state.AMS.IDs = AMS.IDs;\n    state.mmlID = MathJax.ElementJax.mml.SUPER.ID;\n    state.glyphs = GLYPH.glyphs;\n    state.defs = GLYPH.defs;\n    state.n = GLYPH.n;\n    state.ID = ID;\n  }\n  serverState = STATE.READY;\n  callback(result, originalData);\n  if (serverState === STATE.READY) StartQueue();\n}\n\n//\n//  Set the MathJax renderer\n//\nfunction SetRenderer(renderer) {\n  return MathJax.Hub.setRenderer(renderer);\n}\n\nfunction RerenderSVG(result) {\n  if ((data.html || data.htmlNode || data.css) && (data.svg || data.svgNode)) {\n    timer = setTimeout(RestartMathJax,data.timeout);\n    var queue = MathJax.Callback.Queue(), $$ = window.Array;\n    return queue.Push(\n      $$(SetRenderer,\"SVG\"),\n      $$(\"Rerender\",MathJax.Hub),\n      $$(TypesetDone,result)\n    );\n  }\n}\n\n\n/********************************************************************/\n\n//\n//  If MathJax times out, discard the DOM\n//  and load a new one (get a fresh MathJax)\n//\nfunction RestartMathJax() {\n  if (timer) {\n    MathJax.Hub.queue.queue = [];  // clear MathJax queue, so pending operations won't fire\n    MathJax = timer = window = document = html = content = null;\n    ReportError(\"Timeout waiting for MathJax:  restarting\");\n  }\n  serverState = STATE.STOPPED;\n  GetWindow();\n  ConfigureMathJax();\n  StartMathJax();\n}\n\n/********************************************************************/\n\n//\n//  The API call to typeset an equation\n//\n//     %%% cache results?\n//     %%% check types and values of parameters\n//\n\n// callback API for compatibility with MathJax\nvar cbTypeset = function (data, callback) {\n  if (!callback || typeof(callback) !== \"function\") {\n    if (displayErrors) console.error(\"Missing callback\");\n    return;\n  }\n  var options = {};\n  for (var id in defaults) {if (defaults.hasOwnProperty(id)) {\n    options[id] = (data.hasOwnProperty(id) ? data[id]: defaults[id]);\n  }}\n  if (data.state) {options.state = data.state}\n  if (!TYPES[options.format]) {ReportError(\"Unknown format: \"+options.format,callback); return}\n  queue.push([options,callback,Object.assign({},data)]);\n  if (serverState == STATE.STOPPED) {RestartMathJax()}\n  if (serverState == STATE.READY) StartQueue();\n}\n\n// main API, callback and promise compatible\nexports.typeset = function (data, callback) {\n    if (callback) cbTypeset(data, callback);\n    else return new Promise(function (resolve, reject) {\n        cbTypeset(data, function (output, input) {\n            if (output.errors) reject(output.errors);\n            else resolve(output, input);\n        });\n    });\n};\n\n//\n//  Manually start MathJax (this is done automatically\n//  when the first typeset() call is made), but delay\n//  restart if we are already starting up (prevents\n//  multiple calls to start() from causing confusion).\n//\nexports.start = function () {\n  if (serverState === STATE.STARTED) {\n    serverState = STATE.RESTART;\n  } else if (serverState !== STATE.ABORT) {\n    RestartMathJax();\n  }\n}\n\n//\n//  Configure MathJax and the API\n//  You can pass additional configuration options to MathJax using the\n//    MathJax property, and can set displayErrors and displayMessages\n//    that control the display of error messages, and extensions to add\n//    additional MathJax extensions to the base or to sub-categories.\n//\n//  E.g.\n//     mjAPI.config({\n//       MathJax: {SVG: {font: \"STIX-Web\"}},\n//       displayErrors: false,\n//       extensions: 'Safe,TeX/noUndefined'\n//     });\n//\nexports.config = function (config) {\n  if (config.displayMessages != null)    {displayMessages = config.displayMessages}\n  if (config.displayErrors != null)      {displayErrors   = config.displayErrors}\n  if (config.undefinedCharError != null) {undefinedChar   = config.undefinedCharError}\n  if (config.extensions != null)         {extensions      = config.extensions}\n  if (config.paths != null)              {paths           = config.paths}\n  if (config.fontURL != null)            {fontURL         = config.fontURL}\n  if (config.MathJax) {\n    // strip MathJax config blocks to avoid errors\n    if (config.MathJax.config) delete config.MathJax.config\n    MathJaxConfig = config.MathJax\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}