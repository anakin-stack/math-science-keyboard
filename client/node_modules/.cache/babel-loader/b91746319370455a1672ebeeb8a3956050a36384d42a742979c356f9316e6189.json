{"ast":null,"code":"\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst querystring = require(\"querystring\");\nconst DOMException = require(\"domexception\");\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\nconst ProgressEvent = require(\"../generated/ProgressEvent\");\nconst {\n  setupForSimpleEventAccessors\n} = require(\"../helpers/create-event-accessor\");\nconst READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\nconst events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\nclass FileReaderImpl extends EventTargetImpl {\n  constructor(args, privateData) {\n    super([], privateData);\n    this.error = null;\n    this.readyState = READY_STATES.EMPTY;\n    this.result = null;\n    this._ownerDocument = privateData.window.document;\n    this._terminated = false;\n  }\n  readAsArrayBuffer(file) {\n    this._readFile(file, \"buffer\");\n  }\n  readAsBinaryString(file) {\n    this._readFile(file, \"binaryString\");\n  }\n  readAsDataURL(file) {\n    this._readFile(file, \"dataURL\");\n  }\n  readAsText(file, encoding) {\n    this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n  }\n  abort() {\n    if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n      this.result = null;\n      return;\n    }\n    if (this.readyState === READY_STATES.LOADING) {\n      this.readyState = READY_STATES.DONE;\n      this.result = null;\n    }\n    this._terminated = true;\n    this._fireProgressEvent(\"abort\");\n    this._fireProgressEvent(\"loadend\");\n  }\n  _fireProgressEvent(name, props) {\n    const event = ProgressEvent.createImpl([name, Object.assign({\n      bubbles: false,\n      cancelable: false\n    }, props)], {});\n    this.dispatchEvent(event);\n  }\n  _readFile(file, format, encoding) {\n    if (this.readyState === READY_STATES.LOADING) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n    this.readyState = READY_STATES.LOADING;\n    setImmediate(() => {\n      if (this._terminated) {\n        this._terminated = false;\n        return;\n      }\n      this._fireProgressEvent(\"loadstart\");\n      let data = file._buffer;\n      if (!data) {\n        data = Buffer.alloc(0);\n      }\n      this._fireProgressEvent(\"progress\", {\n        lengthComputable: !isNaN(file.size),\n        total: file.size,\n        loaded: data.length\n      });\n      setImmediate(() => {\n        if (this._terminated) {\n          this._terminated = false;\n          return;\n        }\n        switch (format) {\n          default:\n          case \"buffer\":\n            {\n              this.result = new Uint8Array(data).buffer;\n              break;\n            }\n          case \"binaryString\":\n            {\n              this.result = data.toString(\"binary\");\n              break;\n            }\n          case \"dataURL\":\n            {\n              // Spec seems very unclear here; see https://github.com/whatwg/fetch/issues/665#issuecomment-362930079.\n              let dataUrl = \"data:\";\n              const contentType = MIMEType.parse(file.type);\n              if (contentType && contentType.type === \"text\") {\n                const fallbackEncoding = whatwgEncoding.getBOMEncoding(data) || whatwgEncoding.labelToName(contentType.parameters.get(\"charset\")) || \"UTF-8\";\n                const decoded = whatwgEncoding.decode(data, fallbackEncoding);\n                contentType.parameters.set(\"charset\", encoding);\n                dataUrl += contentType.toString();\n                dataUrl += \",\";\n                dataUrl += querystring.escape(decoded);\n              } else {\n                if (contentType) {\n                  dataUrl += contentType.toString();\n                }\n                dataUrl += \";base64,\";\n                dataUrl += data.toString(\"base64\");\n              }\n              this.result = dataUrl;\n              break;\n            }\n          case \"text\":\n            {\n              this.result = whatwgEncoding.decode(data, encoding);\n              break;\n            }\n        }\n        this.readyState = READY_STATES.DONE;\n        this._fireProgressEvent(\"load\");\n        this._fireProgressEvent(\"loadend\");\n      });\n    });\n  }\n}\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\nexports.implementation = FileReaderImpl;","map":{"version":3,"names":["whatwgEncoding","require","MIMEType","querystring","DOMException","EventTargetImpl","implementation","ProgressEvent","setupForSimpleEventAccessors","READY_STATES","Object","freeze","EMPTY","LOADING","DONE","events","FileReaderImpl","constructor","args","privateData","error","readyState","result","_ownerDocument","window","document","_terminated","readAsArrayBuffer","file","_readFile","readAsBinaryString","readAsDataURL","readAsText","encoding","labelToName","abort","_fireProgressEvent","name","props","event","createImpl","assign","bubbles","cancelable","dispatchEvent","format","setImmediate","data","_buffer","Buffer","alloc","lengthComputable","isNaN","size","total","loaded","length","Uint8Array","buffer","toString","dataUrl","contentType","parse","type","fallbackEncoding","getBOMEncoding","parameters","get","decoded","decode","set","escape","prototype","exports"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/file-api/FileReader-impl.js"],"sourcesContent":["\"use strict\";\n\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst querystring = require(\"querystring\");\nconst DOMException = require(\"domexception\");\nconst EventTargetImpl = require(\"../events/EventTarget-impl\").implementation;\nconst ProgressEvent = require(\"../generated/ProgressEvent\");\nconst { setupForSimpleEventAccessors } = require(\"../helpers/create-event-accessor\");\n\nconst READY_STATES = Object.freeze({\n  EMPTY: 0,\n  LOADING: 1,\n  DONE: 2\n});\n\nconst events = [\"loadstart\", \"progress\", \"load\", \"abort\", \"error\", \"loadend\"];\n\nclass FileReaderImpl extends EventTargetImpl {\n  constructor(args, privateData) {\n    super([], privateData);\n\n    this.error = null;\n    this.readyState = READY_STATES.EMPTY;\n    this.result = null;\n\n    this._ownerDocument = privateData.window.document;\n    this._terminated = false;\n  }\n\n  readAsArrayBuffer(file) {\n    this._readFile(file, \"buffer\");\n  }\n  readAsBinaryString(file) {\n    this._readFile(file, \"binaryString\");\n  }\n  readAsDataURL(file) {\n    this._readFile(file, \"dataURL\");\n  }\n  readAsText(file, encoding) {\n    this._readFile(file, \"text\", whatwgEncoding.labelToName(encoding) || \"UTF-8\");\n  }\n\n  abort() {\n    if (this.readyState === READY_STATES.EMPTY || this.readyState === READY_STATES.DONE) {\n      this.result = null;\n      return;\n    }\n\n    if (this.readyState === READY_STATES.LOADING) {\n      this.readyState = READY_STATES.DONE;\n      this.result = null;\n    }\n\n    this._terminated = true;\n    this._fireProgressEvent(\"abort\");\n    this._fireProgressEvent(\"loadend\");\n  }\n\n  _fireProgressEvent(name, props) {\n    const event = ProgressEvent.createImpl([name, Object.assign({ bubbles: false, cancelable: false }, props)], {});\n    this.dispatchEvent(event);\n  }\n\n  _readFile(file, format, encoding) {\n    if (this.readyState === READY_STATES.LOADING) {\n      throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n    }\n\n    this.readyState = READY_STATES.LOADING;\n\n    setImmediate(() => {\n      if (this._terminated) {\n        this._terminated = false;\n        return;\n      }\n\n      this._fireProgressEvent(\"loadstart\");\n\n      let data = file._buffer;\n      if (!data) {\n        data = Buffer.alloc(0);\n      }\n      this._fireProgressEvent(\"progress\", {\n        lengthComputable: !isNaN(file.size),\n        total: file.size,\n        loaded: data.length\n      });\n\n      setImmediate(() => {\n        if (this._terminated) {\n          this._terminated = false;\n          return;\n        }\n\n        switch (format) {\n          default:\n          case \"buffer\": {\n            this.result = (new Uint8Array(data)).buffer;\n            break;\n          }\n          case \"binaryString\": {\n            this.result = data.toString(\"binary\");\n            break;\n          }\n          case \"dataURL\": {\n            // Spec seems very unclear here; see https://github.com/whatwg/fetch/issues/665#issuecomment-362930079.\n            let dataUrl = \"data:\";\n            const contentType = MIMEType.parse(file.type);\n            if (contentType && contentType.type === \"text\") {\n              const fallbackEncoding = whatwgEncoding.getBOMEncoding(data) ||\n                whatwgEncoding.labelToName(contentType.parameters.get(\"charset\")) || \"UTF-8\";\n              const decoded = whatwgEncoding.decode(data, fallbackEncoding);\n\n              contentType.parameters.set(\"charset\", encoding);\n              dataUrl += contentType.toString();\n              dataUrl += \",\";\n              dataUrl += querystring.escape(decoded);\n            } else {\n              if (contentType) {\n                dataUrl += contentType.toString();\n              }\n              dataUrl += \";base64,\";\n              dataUrl += data.toString(\"base64\");\n            }\n            this.result = dataUrl;\n            break;\n          }\n          case \"text\": {\n            this.result = whatwgEncoding.decode(data, encoding);\n            break;\n          }\n        }\n        this.readyState = READY_STATES.DONE;\n        this._fireProgressEvent(\"load\");\n        this._fireProgressEvent(\"loadend\");\n      });\n    });\n  }\n}\nsetupForSimpleEventAccessors(FileReaderImpl.prototype, events);\n\nexports.implementation = FileReaderImpl;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}