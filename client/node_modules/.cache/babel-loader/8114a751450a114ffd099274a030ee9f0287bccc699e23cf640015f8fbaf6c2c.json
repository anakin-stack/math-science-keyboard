{"ast":null,"code":"\"use strict\";\n\nconst path = require(\"path\");\nconst fs = require(\"pn/fs\");\nconst vm = require(\"vm\");\nconst toughCookie = require(\"tough-cookie\");\nconst request = require(\"request-promise-native\");\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\nconst whatwgURL = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst {\n  URL\n} = require(\"whatwg-url\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst idlUtils = require(\"./jsdom/living/generated/utils.js\");\nconst VirtualConsole = require(\"./jsdom/virtual-console.js\");\nconst Window = require(\"./jsdom/browser/Window.js\");\nconst {\n  domToHtml\n} = require(\"./jsdom/browser/domtohtml.js\");\nconst {\n  applyDocumentFeatures\n} = require(\"./jsdom/browser/documentfeatures.js\");\nconst {\n  wrapCookieJarForRequest\n} = require(\"./jsdom/browser/resource-loader.js\");\nconst {\n  version: packageVersion\n} = require(\"../package.json\");\nconst DEFAULT_USER_AGENT = `Mozilla/5.0 (${process.platform}) AppleWebKit/537.36 (KHTML, like Gecko) ` + `jsdom/${packageVersion}`;\n\n// This symbol allows us to smuggle a non-public option through to the JSDOM constructor, for use by JSDOM.fromURL.\nconst transportLayerEncodingLabelHiddenOption = Symbol(\"transportLayerEncodingLabel\");\nclass CookieJar extends toughCookie.CookieJar {\n  constructor(store, options) {\n    // jsdom cookie jars must be loose by default\n    super(store, Object.assign({\n      looseMode: true\n    }, options));\n  }\n}\nconst window = Symbol(\"window\");\nlet sharedFragmentDocument = null;\nclass JSDOM {\n  constructor(input) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    const {\n      html,\n      encoding\n    } = normalizeHTML(input, options[transportLayerEncodingLabelHiddenOption]);\n    options = transformOptions(options, encoding);\n    this[window] = new Window(options.windowOptions);\n\n    // TODO NEWAPI: the whole \"features\" infrastructure is horrible and should be re-built. When we switch to newapi\n    // wholesale, or perhaps before, we should re-do it. For now, just adapt the new, nice, public API into the old,\n    // ugly, internal API.\n    const features = {\n      FetchExternalResources: [],\n      SkipExternalResources: false\n    };\n    if (options.resources === \"usable\") {\n      features.FetchExternalResources = [\"link\", \"img\", \"frame\", \"iframe\"];\n      if (options.windowOptions.runScripts === \"dangerously\") {\n        features.FetchExternalResources.push(\"script\");\n      }\n\n      // Note that \"img\" will be ignored by the code in HTMLImageElement-impl.js if canvas is not installed.\n      // TODO NEWAPI: clean that up and centralize the logic here.\n    }\n\n    const documentImpl = idlUtils.implForWrapper(this[window]._document);\n    applyDocumentFeatures(documentImpl, features);\n    options.beforeParse(this[window]._globalProxy);\n\n    // TODO NEWAPI: this is still pretty hacky. It's also different than jsdom.jsdom. Does it work? Can it be better?\n    documentImpl._htmlToDom.appendToDocument(html, documentImpl);\n    documentImpl.close();\n  }\n  get window() {\n    // It's important to grab the global proxy, instead of just the result of `new Window(...)`, since otherwise things\n    // like `window.eval` don't exist.\n    return this[window]._globalProxy;\n  }\n  get virtualConsole() {\n    return this[window]._virtualConsole;\n  }\n  get cookieJar() {\n    // TODO NEWAPI move _cookieJar to window probably\n    return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n  }\n  serialize() {\n    return domToHtml([idlUtils.implForWrapper(this[window]._document)]);\n  }\n  nodeLocation(node) {\n    if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.locationInfo) {\n      throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n    }\n    return idlUtils.implForWrapper(node).__location;\n  }\n  runVMScript(script) {\n    if (!vm.isContext(this[window])) {\n      throw new TypeError(\"This jsdom was not configured to allow script running. \" + \"Use the runScripts option during creation.\");\n    }\n    return script.runInContext(this[window]);\n  }\n  reconfigure(settings) {\n    if (\"windowTop\" in settings) {\n      this[window]._top = settings.windowTop;\n    }\n    if (\"url\" in settings) {\n      const document = idlUtils.implForWrapper(this[window]._document);\n      const url = whatwgURL.parseURL(settings.url);\n      if (url === null) {\n        throw new TypeError(`Could not parse \"${settings.url}\" as a URL`);\n      }\n      document._URL = url;\n      document.origin = whatwgURL.serializeURLOrigin(document._URL);\n    }\n  }\n  static fragment(string) {\n    if (!sharedFragmentDocument) {\n      sharedFragmentDocument = new JSDOM().window.document;\n    }\n    const template = sharedFragmentDocument.createElement(\"template\");\n    template.innerHTML = string;\n    return template.content;\n  }\n  static fromURL(url) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return Promise.resolve().then(() => {\n      const parsedURL = new URL(url);\n      url = parsedURL.href;\n      options = normalizeFromURLOptions(options);\n      const requestOptions = {\n        resolveWithFullResponse: true,\n        encoding: null,\n        // i.e., give me the raw Buffer\n        gzip: true,\n        headers: {\n          \"User-Agent\": options.userAgent,\n          Referer: options.referrer,\n          Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n          \"Accept-Language\": \"en\"\n        },\n        jar: wrapCookieJarForRequest(options.cookieJar)\n      };\n      return request(url, requestOptions).then(res => {\n        let transportLayerEncodingLabel;\n        if (\"content-type\" in res.headers) {\n          const mimeType = new MIMEType(res.headers[\"content-type\"]);\n          transportLayerEncodingLabel = mimeType.parameters.get(\"charset\");\n        }\n        options = Object.assign(options, {\n          url: res.request.href + parsedURL.hash,\n          contentType: res.headers[\"content-type\"],\n          referrer: res.request.getHeader(\"referer\"),\n          [transportLayerEncodingLabelHiddenOption]: transportLayerEncodingLabel\n        });\n        return new JSDOM(res.body, options);\n      });\n    });\n  }\n  static fromFile(filename) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    return Promise.resolve().then(() => {\n      options = normalizeFromFileOptions(filename, options);\n      return fs.readFile(filename).then(buffer => {\n        return new JSDOM(buffer, options);\n      });\n    });\n  }\n}\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  }\n\n  // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n  const normalized = Object.assign({}, options);\n  if (options.userAgent === undefined) {\n    normalized.userAgent = DEFAULT_USER_AGENT;\n  }\n  if (options.referrer !== undefined) {\n    normalized.referrer = new URL(options.referrer).href;\n  }\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n  return normalized;\n\n  // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  const normalized = Object.assign({}, options);\n  if (normalized.contentType === undefined) {\n    const extname = path.extname(filename);\n    if (extname === \".xhtml\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n  return normalized;\n}\nfunction transformOptions(options, encoding) {\n  const transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      userAgent: DEFAULT_USER_AGENT,\n      parseOptions: {\n        locationInfo: false\n      },\n      runScripts: undefined,\n      encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n      // Defaults filled in later\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n    // Defaults\n    resources: undefined,\n    beforeParse() {}\n  };\n  if (options.contentType !== undefined) {\n    const mimeType = new MIMEType(options.contentType);\n    if (!mimeType.isHTML() && !mimeType.isXML()) {\n      throw new RangeError(`The given content type of \"${options.contentType}\" was not a HTML or XML content type`);\n    }\n    transformed.windowOptions.contentType = mimeType.essence;\n    transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n  }\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = new URL(options.url).href;\n  }\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = new URL(options.referrer).href;\n  }\n  if (options.userAgent !== undefined) {\n    transformed.windowOptions.userAgent = String(options.userAgent);\n  }\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n    transformed.windowOptions.parseOptions = {\n      locationInfo: true\n    };\n  }\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ? new CookieJar() : options.cookieJar;\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ? new VirtualConsole().sendTo(console) : options.virtualConsole;\n  if (options.resources !== undefined) {\n    transformed.resources = String(options.resources);\n    if (transformed.resources !== \"usable\") {\n      throw new RangeError(`resources must be undefined or \"usable\"`);\n    }\n  }\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n    if (transformed.windowOptions.runScripts !== \"dangerously\" && transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(`runScripts must be undefined, \"dangerously\", or \"outside-only\"`);\n    }\n  }\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  }\n\n  // concurrentNodeIterators??\n\n  return transformed;\n}\nfunction normalizeHTML() {\n  let html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"\";\n  let transportLayerEncodingLabel = arguments.length > 1 ? arguments[1] : undefined;\n  let encoding = \"UTF-8\";\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, {\n      defaultEncoding: \"windows-1252\",\n      transportLayerEncodingLabel\n    });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n  return {\n    html,\n    encoding\n  };\n}\nexports.JSDOM = JSDOM;\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\nexports.toughCookie = toughCookie;","map":{"version":3,"names":["path","require","fs","vm","toughCookie","request","sniffHTMLEncoding","whatwgURL","whatwgEncoding","URL","MIMEType","idlUtils","VirtualConsole","Window","domToHtml","applyDocumentFeatures","wrapCookieJarForRequest","version","packageVersion","DEFAULT_USER_AGENT","process","platform","transportLayerEncodingLabelHiddenOption","Symbol","CookieJar","constructor","store","options","Object","assign","looseMode","window","sharedFragmentDocument","JSDOM","input","arguments","length","undefined","html","encoding","normalizeHTML","transformOptions","windowOptions","features","FetchExternalResources","SkipExternalResources","resources","runScripts","push","documentImpl","implForWrapper","_document","beforeParse","_globalProxy","_htmlToDom","appendToDocument","close","virtualConsole","_virtualConsole","cookieJar","_cookieJar","serialize","nodeLocation","node","_parseOptions","locationInfo","Error","__location","runVMScript","script","isContext","TypeError","runInContext","reconfigure","settings","_top","windowTop","document","url","parseURL","_URL","origin","serializeURLOrigin","fragment","string","template","createElement","innerHTML","content","fromURL","Promise","resolve","then","parsedURL","href","normalizeFromURLOptions","requestOptions","resolveWithFullResponse","gzip","headers","userAgent","Referer","referrer","Accept","jar","res","transportLayerEncodingLabel","mimeType","parameters","get","hash","contentType","getHeader","body","fromFile","filename","normalizeFromFileOptions","readFile","buffer","normalized","extname","transformed","parsingMode","parseOptions","pretendToBeVisual","storageQuota","isHTML","isXML","RangeError","essence","String","includeNodeLocations","sendTo","console","Boolean","Number","ArrayBuffer","isView","Buffer","from","byteOffset","byteLength","isBuffer","defaultEncoding","decode","exports"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/api.js"],"sourcesContent":["\"use strict\";\nconst path = require(\"path\");\nconst fs = require(\"pn/fs\");\nconst vm = require(\"vm\");\nconst toughCookie = require(\"tough-cookie\");\nconst request = require(\"request-promise-native\");\nconst sniffHTMLEncoding = require(\"html-encoding-sniffer\");\nconst whatwgURL = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst { URL } = require(\"whatwg-url\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst idlUtils = require(\"./jsdom/living/generated/utils.js\");\nconst VirtualConsole = require(\"./jsdom/virtual-console.js\");\nconst Window = require(\"./jsdom/browser/Window.js\");\nconst { domToHtml } = require(\"./jsdom/browser/domtohtml.js\");\nconst { applyDocumentFeatures } = require(\"./jsdom/browser/documentfeatures.js\");\nconst { wrapCookieJarForRequest } = require(\"./jsdom/browser/resource-loader.js\");\nconst { version: packageVersion } = require(\"../package.json\");\n\nconst DEFAULT_USER_AGENT = `Mozilla/5.0 (${process.platform}) AppleWebKit/537.36 (KHTML, like Gecko) ` +\n                           `jsdom/${packageVersion}`;\n\n// This symbol allows us to smuggle a non-public option through to the JSDOM constructor, for use by JSDOM.fromURL.\nconst transportLayerEncodingLabelHiddenOption = Symbol(\"transportLayerEncodingLabel\");\n\nclass CookieJar extends toughCookie.CookieJar {\n  constructor(store, options) {\n    // jsdom cookie jars must be loose by default\n    super(store, Object.assign({ looseMode: true }, options));\n  }\n}\n\nconst window = Symbol(\"window\");\nlet sharedFragmentDocument = null;\n\nclass JSDOM {\n  constructor(input, options = {}) {\n    const { html, encoding } = normalizeHTML(input, options[transportLayerEncodingLabelHiddenOption]);\n    options = transformOptions(options, encoding);\n\n    this[window] = new Window(options.windowOptions);\n\n    // TODO NEWAPI: the whole \"features\" infrastructure is horrible and should be re-built. When we switch to newapi\n    // wholesale, or perhaps before, we should re-do it. For now, just adapt the new, nice, public API into the old,\n    // ugly, internal API.\n    const features = {\n      FetchExternalResources: [],\n      SkipExternalResources: false\n    };\n\n    if (options.resources === \"usable\") {\n      features.FetchExternalResources = [\"link\", \"img\", \"frame\", \"iframe\"];\n      if (options.windowOptions.runScripts === \"dangerously\") {\n        features.FetchExternalResources.push(\"script\");\n      }\n\n      // Note that \"img\" will be ignored by the code in HTMLImageElement-impl.js if canvas is not installed.\n      // TODO NEWAPI: clean that up and centralize the logic here.\n    }\n\n    const documentImpl = idlUtils.implForWrapper(this[window]._document);\n    applyDocumentFeatures(documentImpl, features);\n\n    options.beforeParse(this[window]._globalProxy);\n\n    // TODO NEWAPI: this is still pretty hacky. It's also different than jsdom.jsdom. Does it work? Can it be better?\n    documentImpl._htmlToDom.appendToDocument(html, documentImpl);\n    documentImpl.close();\n  }\n\n  get window() {\n    // It's important to grab the global proxy, instead of just the result of `new Window(...)`, since otherwise things\n    // like `window.eval` don't exist.\n    return this[window]._globalProxy;\n  }\n\n  get virtualConsole() {\n    return this[window]._virtualConsole;\n  }\n\n  get cookieJar() {\n    // TODO NEWAPI move _cookieJar to window probably\n    return idlUtils.implForWrapper(this[window]._document)._cookieJar;\n  }\n\n  serialize() {\n    return domToHtml([idlUtils.implForWrapper(this[window]._document)]);\n  }\n\n  nodeLocation(node) {\n    if (!idlUtils.implForWrapper(this[window]._document)._parseOptions.locationInfo) {\n      throw new Error(\"Location information was not saved for this jsdom. Use includeNodeLocations during creation.\");\n    }\n\n    return idlUtils.implForWrapper(node).__location;\n  }\n\n  runVMScript(script) {\n    if (!vm.isContext(this[window])) {\n      throw new TypeError(\"This jsdom was not configured to allow script running. \" +\n        \"Use the runScripts option during creation.\");\n    }\n\n    return script.runInContext(this[window]);\n  }\n\n  reconfigure(settings) {\n    if (\"windowTop\" in settings) {\n      this[window]._top = settings.windowTop;\n    }\n\n    if (\"url\" in settings) {\n      const document = idlUtils.implForWrapper(this[window]._document);\n\n      const url = whatwgURL.parseURL(settings.url);\n      if (url === null) {\n        throw new TypeError(`Could not parse \"${settings.url}\" as a URL`);\n      }\n\n      document._URL = url;\n      document.origin = whatwgURL.serializeURLOrigin(document._URL);\n    }\n  }\n\n  static fragment(string) {\n    if (!sharedFragmentDocument) {\n      sharedFragmentDocument = (new JSDOM()).window.document;\n    }\n\n    const template = sharedFragmentDocument.createElement(\"template\");\n    template.innerHTML = string;\n    return template.content;\n  }\n\n  static fromURL(url, options = {}) {\n    return Promise.resolve().then(() => {\n      const parsedURL = new URL(url);\n      url = parsedURL.href;\n      options = normalizeFromURLOptions(options);\n\n      const requestOptions = {\n        resolveWithFullResponse: true,\n        encoding: null, // i.e., give me the raw Buffer\n        gzip: true,\n        headers: {\n          \"User-Agent\": options.userAgent,\n          Referer: options.referrer,\n          Accept: \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\",\n          \"Accept-Language\": \"en\"\n        },\n        jar: wrapCookieJarForRequest(options.cookieJar)\n      };\n\n      return request(url, requestOptions).then(res => {\n        let transportLayerEncodingLabel;\n        if (\"content-type\" in res.headers) {\n          const mimeType = new MIMEType(res.headers[\"content-type\"]);\n          transportLayerEncodingLabel = mimeType.parameters.get(\"charset\");\n        }\n\n        options = Object.assign(options, {\n          url: res.request.href + parsedURL.hash,\n          contentType: res.headers[\"content-type\"],\n          referrer: res.request.getHeader(\"referer\"),\n          [transportLayerEncodingLabelHiddenOption]: transportLayerEncodingLabel\n        });\n\n        return new JSDOM(res.body, options);\n      });\n    });\n  }\n\n  static fromFile(filename, options = {}) {\n    return Promise.resolve().then(() => {\n      options = normalizeFromFileOptions(filename, options);\n\n      return fs.readFile(filename).then(buffer => {\n        return new JSDOM(buffer, options);\n      });\n    });\n  }\n}\n\nfunction normalizeFromURLOptions(options) {\n  // Checks on options that are invalid for `fromURL`\n  if (options.url !== undefined) {\n    throw new TypeError(\"Cannot supply a url option when using fromURL\");\n  }\n  if (options.contentType !== undefined) {\n    throw new TypeError(\"Cannot supply a contentType option when using fromURL\");\n  }\n\n  // Normalization of options which must be done before the rest of the fromURL code can use them, because they are\n  // given to request()\n  const normalized = Object.assign({}, options);\n  if (options.userAgent === undefined) {\n    normalized.userAgent = DEFAULT_USER_AGENT;\n  }\n\n  if (options.referrer !== undefined) {\n    normalized.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.cookieJar === undefined) {\n    normalized.cookieJar = new CookieJar();\n  }\n\n  return normalized;\n\n  // All other options don't need to be processed yet, and can be taken care of in the normal course of things when\n  // `fromURL` calls `new JSDOM(html, options)`.\n}\n\nfunction normalizeFromFileOptions(filename, options) {\n  const normalized = Object.assign({}, options);\n\n  if (normalized.contentType === undefined) {\n    const extname = path.extname(filename);\n    if (extname === \".xhtml\" || extname === \".xml\") {\n      normalized.contentType = \"application/xhtml+xml\";\n    }\n  }\n\n  if (normalized.url === undefined) {\n    normalized.url = new URL(\"file:\" + path.resolve(filename));\n  }\n\n  return normalized;\n}\n\nfunction transformOptions(options, encoding) {\n  const transformed = {\n    windowOptions: {\n      // Defaults\n      url: \"about:blank\",\n      referrer: \"\",\n      contentType: \"text/html\",\n      parsingMode: \"html\",\n      userAgent: DEFAULT_USER_AGENT,\n      parseOptions: { locationInfo: false },\n      runScripts: undefined,\n      encoding,\n      pretendToBeVisual: false,\n      storageQuota: 5000000,\n\n      // Defaults filled in later\n      virtualConsole: undefined,\n      cookieJar: undefined\n    },\n\n    // Defaults\n    resources: undefined,\n    beforeParse() { }\n  };\n\n  if (options.contentType !== undefined) {\n    const mimeType = new MIMEType(options.contentType);\n\n    if (!mimeType.isHTML() && !mimeType.isXML()) {\n      throw new RangeError(`The given content type of \"${options.contentType}\" was not a HTML or XML content type`);\n    }\n\n    transformed.windowOptions.contentType = mimeType.essence;\n    transformed.windowOptions.parsingMode = mimeType.isHTML() ? \"html\" : \"xml\";\n  }\n\n  if (options.url !== undefined) {\n    transformed.windowOptions.url = (new URL(options.url)).href;\n  }\n\n  if (options.referrer !== undefined) {\n    transformed.windowOptions.referrer = (new URL(options.referrer)).href;\n  }\n\n  if (options.userAgent !== undefined) {\n    transformed.windowOptions.userAgent = String(options.userAgent);\n  }\n\n  if (options.includeNodeLocations) {\n    if (transformed.windowOptions.parsingMode === \"xml\") {\n      throw new TypeError(\"Cannot set includeNodeLocations to true with an XML content type\");\n    }\n\n    transformed.windowOptions.parseOptions = { locationInfo: true };\n  }\n\n  transformed.windowOptions.cookieJar = options.cookieJar === undefined ?\n                                       new CookieJar() :\n                                       options.cookieJar;\n\n  transformed.windowOptions.virtualConsole = options.virtualConsole === undefined ?\n                                            (new VirtualConsole()).sendTo(console) :\n                                            options.virtualConsole;\n\n  if (options.resources !== undefined) {\n    transformed.resources = String(options.resources);\n    if (transformed.resources !== \"usable\") {\n      throw new RangeError(`resources must be undefined or \"usable\"`);\n    }\n  }\n\n  if (options.runScripts !== undefined) {\n    transformed.windowOptions.runScripts = String(options.runScripts);\n    if (transformed.windowOptions.runScripts !== \"dangerously\" &&\n        transformed.windowOptions.runScripts !== \"outside-only\") {\n      throw new RangeError(`runScripts must be undefined, \"dangerously\", or \"outside-only\"`);\n    }\n  }\n\n  if (options.beforeParse !== undefined) {\n    transformed.beforeParse = options.beforeParse;\n  }\n\n  if (options.pretendToBeVisual !== undefined) {\n    transformed.windowOptions.pretendToBeVisual = Boolean(options.pretendToBeVisual);\n  }\n\n  if (options.storageQuota !== undefined) {\n    transformed.windowOptions.storageQuota = Number(options.storageQuota);\n  }\n\n  // concurrentNodeIterators??\n\n  return transformed;\n}\n\nfunction normalizeHTML(html = \"\", transportLayerEncodingLabel) {\n  let encoding = \"UTF-8\";\n\n  if (ArrayBuffer.isView(html)) {\n    html = Buffer.from(html.buffer, html.byteOffset, html.byteLength);\n  } else if (html instanceof ArrayBuffer) {\n    html = Buffer.from(html);\n  }\n\n  if (Buffer.isBuffer(html)) {\n    encoding = sniffHTMLEncoding(html, { defaultEncoding: \"windows-1252\", transportLayerEncodingLabel });\n    html = whatwgEncoding.decode(html, encoding);\n  } else {\n    html = String(html);\n  }\n\n  return { html, encoding };\n}\n\nexports.JSDOM = JSDOM;\n\nexports.VirtualConsole = VirtualConsole;\nexports.CookieJar = CookieJar;\n\nexports.toughCookie = toughCookie;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}