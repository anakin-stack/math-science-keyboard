{"ast":null,"code":"\"use strict\";\n\nconst cssom = require(\"cssom\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst whatwgURL = require(\"whatwg-url\");\nconst resourceLoader = require(\"../../browser/resource-loader\");\n\n// TODO: this should really implement https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet\n// It (and the things it calls) is nowhere close right now.\nexports.fetchStylesheet = (elementImpl, urlString) => {\n  const parsedURL = whatwgURL.parseURL(urlString);\n  return fetchStylesheetInternal(elementImpl, urlString, parsedURL);\n};\n\n// https://drafts.csswg.org/cssom/#remove-a-css-style-sheet\nexports.removeStylesheet = (sheet, elementImpl) => {\n  const {\n    styleSheets\n  } = elementImpl._ownerDocument;\n  styleSheets.splice(styleSheets.indexOf(sheet, 1));\n\n  // Remove the association explicitly; in the spec it's implicit so this step doesn't exist.\n  elementImpl.sheet = null;\n\n  // TODO: \"Set the CSS style sheet’s parent CSS style sheet, owner node and owner CSS rule to null.\"\n  // Probably when we have a real CSSOM implementation.\n};\n\n// https://drafts.csswg.org/cssom/#create-a-css-style-sheet kinda:\n// - Parsing failures are not handled gracefully like they should be\n// - The import rules stuff seems out of place, and probably should affect the load event...\nexports.createStylesheet = (sheetText, elementImpl, baseURL) => {\n  let sheet;\n  try {\n    sheet = cssom.parse(sheetText);\n  } catch (e) {\n    if (elementImpl._ownerDocument._defaultView) {\n      const error = new Error(\"Could not parse CSS stylesheet\");\n      error.detail = sheetText;\n      error.type = \"css parsing\";\n      elementImpl._ownerDocument._defaultView._virtualConsole.emit(\"jsdomError\", error);\n    }\n    return;\n  }\n  scanForImportRules(elementImpl, sheet.cssRules, baseURL);\n  addStylesheet(sheet, elementImpl);\n};\n\n// https://drafts.csswg.org/cssom/#add-a-css-style-sheet\nfunction addStylesheet(sheet, elementImpl) {\n  elementImpl._ownerDocument.styleSheets.push(sheet);\n\n  // Set the association explicitly; in the spec it's implicit.\n  elementImpl.sheet = sheet;\n\n  // TODO: title and disabled stuff\n}\n\nfunction fetchStylesheetInternal(elementImpl, urlString, parsedURL) {\n  let defaultEncoding = elementImpl._ownerDocument._encoding;\n  if (elementImpl.localName === \"link\" && elementImpl.hasAttribute(\"charset\")) {\n    defaultEncoding = whatwgEncoding.labelToName(elementImpl.getAttribute(\"charset\"));\n  }\n  resourceLoader.load(elementImpl, urlString, {\n    defaultEncoding\n  }, data => {\n    // TODO: MIME type checking?\n    if (elementImpl.sheet) {\n      exports.removeStylesheet(elementImpl.sheet, elementImpl);\n    }\n    exports.createStylesheet(data, elementImpl, parsedURL);\n  });\n}\n\n// TODO this is actually really messed up and overwrites the sheet on elementImpl\n// Tracking in https://github.com/tmpvar/jsdom/issues/2124\nfunction scanForImportRules(elementImpl, cssRules, baseURL) {\n  if (!cssRules) {\n    return;\n  }\n  for (let i = 0; i < cssRules.length; ++i) {\n    if (cssRules[i].cssRules) {\n      // @media rule: keep searching inside it.\n      scanForImportRules(elementImpl, cssRules[i].cssRules, baseURL);\n    } else if (cssRules[i].href) {\n      // @import rule: fetch the resource and evaluate it.\n      // See http://dev.w3.org/csswg/cssom/#css-import-rule\n      //     If loading of the style sheet fails its cssRules list is simply\n      //     empty. I.e. an @import rule always has an associated style sheet.\n      const parsed = whatwgURL.parseURL(cssRules[i].href, {\n        baseURL\n      });\n      if (parsed === null) {\n        const window = elementImpl._ownerDocument._defaultView;\n        if (window) {\n          const error = new Error(`Could not parse CSS @import URL ${cssRules[i].href} relative to base URL ` + `\"${whatwgURL.serializeURL(baseURL)}\"`);\n          error.type = \"css @import URL parsing\";\n          window._virtualConsole.emit(\"jsdomError\", error);\n        }\n      } else {\n        fetchStylesheetInternal(elementImpl, whatwgURL.serializeURL(parsed), parsed);\n      }\n    }\n  }\n}","map":{"version":3,"names":["cssom","require","whatwgEncoding","whatwgURL","resourceLoader","exports","fetchStylesheet","elementImpl","urlString","parsedURL","parseURL","fetchStylesheetInternal","removeStylesheet","sheet","styleSheets","_ownerDocument","splice","indexOf","createStylesheet","sheetText","baseURL","parse","e","_defaultView","error","Error","detail","type","_virtualConsole","emit","scanForImportRules","cssRules","addStylesheet","push","defaultEncoding","_encoding","localName","hasAttribute","labelToName","getAttribute","load","data","i","length","href","parsed","window","serializeURL"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/helpers/stylesheets.js"],"sourcesContent":["\"use strict\";\nconst cssom = require(\"cssom\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst whatwgURL = require(\"whatwg-url\");\nconst resourceLoader = require(\"../../browser/resource-loader\");\n\n// TODO: this should really implement https://html.spec.whatwg.org/multipage/links.html#link-type-stylesheet\n// It (and the things it calls) is nowhere close right now.\nexports.fetchStylesheet = (elementImpl, urlString) => {\n  const parsedURL = whatwgURL.parseURL(urlString);\n  return fetchStylesheetInternal(elementImpl, urlString, parsedURL);\n};\n\n// https://drafts.csswg.org/cssom/#remove-a-css-style-sheet\nexports.removeStylesheet = (sheet, elementImpl) => {\n  const { styleSheets } = elementImpl._ownerDocument;\n  styleSheets.splice(styleSheets.indexOf(sheet, 1));\n\n  // Remove the association explicitly; in the spec it's implicit so this step doesn't exist.\n  elementImpl.sheet = null;\n\n  // TODO: \"Set the CSS style sheet’s parent CSS style sheet, owner node and owner CSS rule to null.\"\n  // Probably when we have a real CSSOM implementation.\n};\n\n// https://drafts.csswg.org/cssom/#create-a-css-style-sheet kinda:\n// - Parsing failures are not handled gracefully like they should be\n// - The import rules stuff seems out of place, and probably should affect the load event...\nexports.createStylesheet = (sheetText, elementImpl, baseURL) => {\n  let sheet;\n  try {\n    sheet = cssom.parse(sheetText);\n  } catch (e) {\n    if (elementImpl._ownerDocument._defaultView) {\n      const error = new Error(\"Could not parse CSS stylesheet\");\n      error.detail = sheetText;\n      error.type = \"css parsing\";\n\n      elementImpl._ownerDocument._defaultView._virtualConsole.emit(\"jsdomError\", error);\n    }\n    return;\n  }\n\n  scanForImportRules(elementImpl, sheet.cssRules, baseURL);\n\n  addStylesheet(sheet, elementImpl);\n};\n\n// https://drafts.csswg.org/cssom/#add-a-css-style-sheet\nfunction addStylesheet(sheet, elementImpl) {\n  elementImpl._ownerDocument.styleSheets.push(sheet);\n\n  // Set the association explicitly; in the spec it's implicit.\n  elementImpl.sheet = sheet;\n\n  // TODO: title and disabled stuff\n}\n\nfunction fetchStylesheetInternal(elementImpl, urlString, parsedURL) {\n  let defaultEncoding = elementImpl._ownerDocument._encoding;\n  if (elementImpl.localName === \"link\" && elementImpl.hasAttribute(\"charset\")) {\n    defaultEncoding = whatwgEncoding.labelToName(elementImpl.getAttribute(\"charset\"));\n  }\n\n  resourceLoader.load(elementImpl, urlString, { defaultEncoding }, data => {\n    // TODO: MIME type checking?\n    if (elementImpl.sheet) {\n      exports.removeStylesheet(elementImpl.sheet, elementImpl);\n    }\n    exports.createStylesheet(data, elementImpl, parsedURL);\n  });\n}\n\n// TODO this is actually really messed up and overwrites the sheet on elementImpl\n// Tracking in https://github.com/tmpvar/jsdom/issues/2124\nfunction scanForImportRules(elementImpl, cssRules, baseURL) {\n  if (!cssRules) {\n    return;\n  }\n\n  for (let i = 0; i < cssRules.length; ++i) {\n    if (cssRules[i].cssRules) {\n      // @media rule: keep searching inside it.\n      scanForImportRules(elementImpl, cssRules[i].cssRules, baseURL);\n    } else if (cssRules[i].href) {\n      // @import rule: fetch the resource and evaluate it.\n      // See http://dev.w3.org/csswg/cssom/#css-import-rule\n      //     If loading of the style sheet fails its cssRules list is simply\n      //     empty. I.e. an @import rule always has an associated style sheet.\n      const parsed = whatwgURL.parseURL(cssRules[i].href, { baseURL });\n      if (parsed === null) {\n        const window = elementImpl._ownerDocument._defaultView;\n        if (window) {\n          const error = new Error(`Could not parse CSS @import URL ${cssRules[i].href} relative to base URL ` +\n                                  `\"${whatwgURL.serializeURL(baseURL)}\"`);\n          error.type = \"css @import URL parsing\";\n          window._virtualConsole.emit(\"jsdomError\", error);\n        }\n      } else {\n        fetchStylesheetInternal(elementImpl, whatwgURL.serializeURL(parsed), parsed);\n      }\n    }\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}