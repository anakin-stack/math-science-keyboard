{"ast":null,"code":"/* This program is free software. It comes without any warranty, to\n     * the extent permitted by applicable law. You can redistribute it\n     * and/or modify it under the terms of the Do What The Fuck You Want\n     * To Public License, Version 2, as published by Sam Hocevar. See\n     * http://www.wtfpl.net/ for more details. */\n'use strict';\n\nmodule.exports = leftPad;\nvar cache = ['', ' ', '  ', '   ', '    ', '     ', '      ', '       ', '        ', '         '];\nfunction leftPad(str, len, ch) {\n  // convert `str` to a `string`\n  str = str + '';\n  // `len` is the `pad`'s length now\n  len = len - str.length;\n  // doesn't need to pad\n  if (len <= 0) return str;\n  // `ch` defaults to `' '`\n  if (!ch && ch !== 0) ch = ' ';\n  // convert `ch` to a `string` cuz it could be a number\n  ch = ch + '';\n  // cache common use cases\n  if (ch === ' ' && len < 10) return cache[len] + str;\n  // `pad` starts with an empty string\n  var pad = '';\n  // loop\n  while (true) {\n    // add `ch` to `pad` if `len` is odd\n    if (len & 1) pad += ch;\n    // divide `len` by 2, ditch the remainder\n    len >>= 1;\n    // \"double\" the `ch` so this operation count grows logarithmically on `len`\n    // each time `ch` is \"doubled\", the `len` would need to be \"doubled\" too\n    // similar to finding a value in binary search tree, hence O(log(n))\n    if (len) ch += ch;\n    // `len` is 0, exit the loop\n    else break;\n  }\n  // pad `str`!\n  return pad + str;\n}","map":{"version":3,"names":["module","exports","leftPad","cache","str","len","ch","length","pad"],"sources":["G:/scientificKeyboard/keyboard/node_modules/left-pad/index.js"],"sourcesContent":["/* This program is free software. It comes without any warranty, to\n     * the extent permitted by applicable law. You can redistribute it\n     * and/or modify it under the terms of the Do What The Fuck You Want\n     * To Public License, Version 2, as published by Sam Hocevar. See\n     * http://www.wtfpl.net/ for more details. */\n'use strict';\nmodule.exports = leftPad;\n\nvar cache = [\n  '',\n  ' ',\n  '  ',\n  '   ',\n  '    ',\n  '     ',\n  '      ',\n  '       ',\n  '        ',\n  '         '\n];\n\nfunction leftPad (str, len, ch) {\n  // convert `str` to a `string`\n  str = str + '';\n  // `len` is the `pad`'s length now\n  len = len - str.length;\n  // doesn't need to pad\n  if (len <= 0) return str;\n  // `ch` defaults to `' '`\n  if (!ch && ch !== 0) ch = ' ';\n  // convert `ch` to a `string` cuz it could be a number\n  ch = ch + '';\n  // cache common use cases\n  if (ch === ' ' && len < 10) return cache[len] + str;\n  // `pad` starts with an empty string\n  var pad = '';\n  // loop\n  while (true) {\n    // add `ch` to `pad` if `len` is odd\n    if (len & 1) pad += ch;\n    // divide `len` by 2, ditch the remainder\n    len >>= 1;\n    // \"double\" the `ch` so this operation count grows logarithmically on `len`\n    // each time `ch` is \"doubled\", the `len` would need to be \"doubled\" too\n    // similar to finding a value in binary search tree, hence O(log(n))\n    if (len) ch += ch;\n    // `len` is 0, exit the loop\n    else break;\n  }\n  // pad `str`!\n  return pad + str;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,YAAY;;AACZA,MAAM,CAACC,OAAO,GAAGC,OAAO;AAExB,IAAIC,KAAK,GAAG,CACV,EAAE,EACF,GAAG,EACH,IAAI,EACJ,KAAK,EACL,MAAM,EACN,OAAO,EACP,QAAQ,EACR,SAAS,EACT,UAAU,EACV,WAAW,CACZ;AAED,SAASD,OAAOA,CAAEE,GAAG,EAAEC,GAAG,EAAEC,EAAE,EAAE;EAC9B;EACAF,GAAG,GAAGA,GAAG,GAAG,EAAE;EACd;EACAC,GAAG,GAAGA,GAAG,GAAGD,GAAG,CAACG,MAAM;EACtB;EACA,IAAIF,GAAG,IAAI,CAAC,EAAE,OAAOD,GAAG;EACxB;EACA,IAAI,CAACE,EAAE,IAAIA,EAAE,KAAK,CAAC,EAAEA,EAAE,GAAG,GAAG;EAC7B;EACAA,EAAE,GAAGA,EAAE,GAAG,EAAE;EACZ;EACA,IAAIA,EAAE,KAAK,GAAG,IAAID,GAAG,GAAG,EAAE,EAAE,OAAOF,KAAK,CAACE,GAAG,CAAC,GAAGD,GAAG;EACnD;EACA,IAAII,GAAG,GAAG,EAAE;EACZ;EACA,OAAO,IAAI,EAAE;IACX;IACA,IAAIH,GAAG,GAAG,CAAC,EAAEG,GAAG,IAAIF,EAAE;IACtB;IACAD,GAAG,KAAK,CAAC;IACT;IACA;IACA;IACA,IAAIA,GAAG,EAAEC,EAAE,IAAIA,EAAE;IACjB;IAAA,KACK;EACP;EACA;EACA,OAAOE,GAAG,GAAGJ,GAAG;AAClB"},"metadata":{},"sourceType":"script","externalDependencies":[]}