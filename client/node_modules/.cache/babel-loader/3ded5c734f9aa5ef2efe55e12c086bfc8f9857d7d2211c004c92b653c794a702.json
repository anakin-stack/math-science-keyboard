{"ast":null,"code":"\"use strict\";\n\nconst {\n  domSymbolTree\n} = require(\"./internal-constants\");\nconst {\n  DOCUMENT_NODE\n} = require(\"../node-type\");\nconst {\n  HTML_NS\n} = require(\"./namespaces\");\n\n// All these operate on and return impls, not wrappers!\n\nexports.closest = (e, localName) => {\n  while (e) {\n    if (e.localName === localName && e.namespaceURI === HTML_NS) {\n      return e;\n    }\n    e = domSymbolTree.parent(e);\n  }\n  return null;\n};\nexports.isConnected = node => {\n  while (node) {\n    if (node.nodeType === DOCUMENT_NODE) {\n      return true;\n    }\n    node = domSymbolTree.parent(node);\n  }\n  return false;\n};\nexports.childrenByHTMLLocalName = (parent, localName) => {\n  return domSymbolTree.childrenToArray(parent, {\n    filter(node) {\n      return node._localName === localName && node._namespaceURI === HTML_NS;\n    }\n  });\n};\nexports.descendantsByHTMLLocalName = (parent, localName) => {\n  return domSymbolTree.treeToArray(parent, {\n    filter(node) {\n      return node._localName === localName && node._namespaceURI === HTML_NS && node !== parent;\n    }\n  });\n};\nexports.childrenByHTMLLocalNames = (parent, localNamesSet) => {\n  return domSymbolTree.childrenToArray(parent, {\n    filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === HTML_NS;\n    }\n  });\n};\nexports.descendantsByHTMLLocalNames = (parent, localNamesSet) => {\n  return domSymbolTree.treeToArray(parent, {\n    filter(node) {\n      return localNamesSet.has(node._localName) && node._namespaceURI === HTML_NS && node !== parent;\n    }\n  });\n};\nexports.firstChildWithHTMLLocalName = (parent, localName) => {\n  const iterator = domSymbolTree.childrenIterator(parent);\n  for (const child of iterator) {\n    if (child._localName === localName && child._namespaceURI === HTML_NS) {\n      return child;\n    }\n  }\n  return null;\n};\nexports.firstChildWithHTMLLocalNames = (parent, localNamesSet) => {\n  const iterator = domSymbolTree.childrenIterator(parent);\n  for (const child of iterator) {\n    if (localNamesSet.has(child._localName) && child._namespaceURI === HTML_NS) {\n      return child;\n    }\n  }\n  return null;\n};\nexports.firstDescendantWithHTMLLocalName = (parent, localName) => {\n  const iterator = domSymbolTree.treeIterator(parent);\n  for (const descendant of iterator) {\n    if (descendant._localName === localName && descendant._namespaceURI === HTML_NS) {\n      return descendant;\n    }\n  }\n  return null;\n};","map":{"version":3,"names":["domSymbolTree","require","DOCUMENT_NODE","HTML_NS","exports","closest","e","localName","namespaceURI","parent","isConnected","node","nodeType","childrenByHTMLLocalName","childrenToArray","filter","_localName","_namespaceURI","descendantsByHTMLLocalName","treeToArray","childrenByHTMLLocalNames","localNamesSet","has","descendantsByHTMLLocalNames","firstChildWithHTMLLocalName","iterator","childrenIterator","child","firstChildWithHTMLLocalNames","firstDescendantWithHTMLLocalName","treeIterator","descendant"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/helpers/traversal.js"],"sourcesContent":["\"use strict\";\nconst { domSymbolTree } = require(\"./internal-constants\");\nconst { DOCUMENT_NODE } = require(\"../node-type\");\nconst { HTML_NS } = require(\"./namespaces\");\n\n// All these operate on and return impls, not wrappers!\n\nexports.closest = (e, localName) => {\n  while (e) {\n    if (e.localName === localName && e.namespaceURI === HTML_NS) {\n      return e;\n    }\n    e = domSymbolTree.parent(e);\n  }\n\n  return null;\n};\n\nexports.isConnected = node => {\n  while (node) {\n    if (node.nodeType === DOCUMENT_NODE) {\n      return true;\n    }\n    node = domSymbolTree.parent(node);\n  }\n  return false;\n};\n\nexports.childrenByHTMLLocalName = (parent, localName) => {\n  return domSymbolTree.childrenToArray(parent, { filter(node) {\n    return node._localName === localName && node._namespaceURI === HTML_NS;\n  } });\n};\n\nexports.descendantsByHTMLLocalName = (parent, localName) => {\n  return domSymbolTree.treeToArray(parent, { filter(node) {\n    return node._localName === localName && node._namespaceURI === HTML_NS && node !== parent;\n  } });\n};\n\nexports.childrenByHTMLLocalNames = (parent, localNamesSet) => {\n  return domSymbolTree.childrenToArray(parent, { filter(node) {\n    return localNamesSet.has(node._localName) && node._namespaceURI === HTML_NS;\n  } });\n};\n\nexports.descendantsByHTMLLocalNames = (parent, localNamesSet) => {\n  return domSymbolTree.treeToArray(parent, { filter(node) {\n    return localNamesSet.has(node._localName) &&\n           node._namespaceURI === HTML_NS &&\n           node !== parent;\n  } });\n};\n\nexports.firstChildWithHTMLLocalName = (parent, localName) => {\n  const iterator = domSymbolTree.childrenIterator(parent);\n  for (const child of iterator) {\n    if (child._localName === localName && child._namespaceURI === HTML_NS) {\n      return child;\n    }\n  }\n  return null;\n};\n\nexports.firstChildWithHTMLLocalNames = (parent, localNamesSet) => {\n  const iterator = domSymbolTree.childrenIterator(parent);\n  for (const child of iterator) {\n    if (localNamesSet.has(child._localName) && child._namespaceURI === HTML_NS) {\n      return child;\n    }\n  }\n  return null;\n};\n\nexports.firstDescendantWithHTMLLocalName = (parent, localName) => {\n  const iterator = domSymbolTree.treeIterator(parent);\n  for (const descendant of iterator) {\n    if (descendant._localName === localName && descendant._namespaceURI === HTML_NS) {\n      return descendant;\n    }\n  }\n  return null;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}