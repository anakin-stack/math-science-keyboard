{"ast":null,"code":"\"use strict\";\n\nconst asciiWhitespaceRe = /^[\\t\\n\\f\\r ]$/;\nexports.asciiWhitespaceRe = asciiWhitespaceRe;\n\n// https://infra.spec.whatwg.org/#ascii-lowercase\nexports.asciiLowercase = s => {\n  return s.replace(/[A-Z]/g, l => l.toLowerCase());\n};\n\n// https://infra.spec.whatwg.org/#strip-newlines\nexports.stripNewlines = s => {\n  return s.replace(/[\\n\\r]+/g, \"\");\n};\n\n// https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace\nexports.stripLeadingAndTrailingASCIIWhitespace = s => {\n  return s.replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n};\n\n// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\nexports.stripAndCollapseASCIIWhitespace = s => {\n  return s.replace(/[ \\t\\n\\f\\r]+/g, \" \").replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n};\n\n// https://html.spec.whatwg.org/multipage/infrastructure.html#valid-simple-colour\nexports.isValidSimpleColor = s => {\n  return /^#[a-fA-F\\d]{6}$/.test(s);\n};\n\n// https://infra.spec.whatwg.org/#ascii-case-insensitive\nexports.asciiCaseInsensitiveMatch = (a, b) => {\n  if (a.length !== b.length) {\n    return false;\n  }\n  for (let i = 0; i < a.length; ++i) {\n    if ((a.charCodeAt(i) | 32) !== (b.charCodeAt(i) | 32)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number\nconst floatingPointNumRe = /^-?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?$/;\nexports.isValidFloatingPointNumber = str => floatingPointNumRe.test(str);\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values\nexports.parseFloatingPointNumber = str => {\n  const parsed = parseFloat(str);\n  return isFinite(parsed) ? parsed : NaN;\n};\n\n// https://infra.spec.whatwg.org/#split-on-ascii-whitespace\nexports.splitOnASCIIWhitespace = str => {\n  let position = 0;\n  const tokens = [];\n  while (position < str.length && asciiWhitespaceRe.test(str[position])) {\n    position++;\n  }\n  if (position === str.length) {\n    return tokens;\n  }\n  while (position < str.length) {\n    const start = position;\n    while (position < str.length && !asciiWhitespaceRe.test(str[position])) {\n      position++;\n    }\n    tokens.push(str.slice(start, position));\n    while (position < str.length && asciiWhitespaceRe.test(str[position])) {\n      position++;\n    }\n  }\n  return tokens;\n};\n\n// https://infra.spec.whatwg.org/#split-on-commas\nexports.splitOnCommas = str => {\n  let position = 0;\n  const tokens = [];\n  while (position < str.length) {\n    let start = position;\n    while (position < str.length && str[position] !== \",\") {\n      position++;\n    }\n    let end = position;\n    while (start < str.length && asciiWhitespaceRe.test(str[start])) {\n      start++;\n    }\n    while (end > start && asciiWhitespaceRe.test(str[end - 1])) {\n      end--;\n    }\n    tokens.push(str.slice(start, end));\n    if (position < str.length) {\n      position++;\n    }\n  }\n  return tokens;\n};","map":{"version":3,"names":["asciiWhitespaceRe","exports","asciiLowercase","s","replace","l","toLowerCase","stripNewlines","stripLeadingAndTrailingASCIIWhitespace","stripAndCollapseASCIIWhitespace","isValidSimpleColor","test","asciiCaseInsensitiveMatch","a","b","length","i","charCodeAt","floatingPointNumRe","isValidFloatingPointNumber","str","parseFloatingPointNumber","parsed","parseFloat","isFinite","NaN","splitOnASCIIWhitespace","position","tokens","start","push","slice","splitOnCommas","end"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/helpers/strings.js"],"sourcesContent":["\"use strict\";\n\nconst asciiWhitespaceRe = /^[\\t\\n\\f\\r ]$/;\nexports.asciiWhitespaceRe = asciiWhitespaceRe;\n\n// https://infra.spec.whatwg.org/#ascii-lowercase\nexports.asciiLowercase = s => {\n  return s.replace(/[A-Z]/g, l => l.toLowerCase());\n};\n\n// https://infra.spec.whatwg.org/#strip-newlines\nexports.stripNewlines = s => {\n  return s.replace(/[\\n\\r]+/g, \"\");\n};\n\n// https://infra.spec.whatwg.org/#strip-leading-and-trailing-ascii-whitespace\nexports.stripLeadingAndTrailingASCIIWhitespace = s => {\n  return s.replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n};\n\n// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace\nexports.stripAndCollapseASCIIWhitespace = s => {\n  return s.replace(/[ \\t\\n\\f\\r]+/g, \" \").replace(/^[ \\t\\n\\f\\r]+/, \"\").replace(/[ \\t\\n\\f\\r]+$/, \"\");\n};\n\n// https://html.spec.whatwg.org/multipage/infrastructure.html#valid-simple-colour\nexports.isValidSimpleColor = s => {\n  return /^#[a-fA-F\\d]{6}$/.test(s);\n};\n\n// https://infra.spec.whatwg.org/#ascii-case-insensitive\nexports.asciiCaseInsensitiveMatch = (a, b) => {\n  if (a.length !== b.length) {\n    return false;\n  }\n\n  for (let i = 0; i < a.length; ++i) {\n    if ((a.charCodeAt(i) | 32) !== (b.charCodeAt(i) | 32)) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#valid-floating-point-number\nconst floatingPointNumRe = /^-?(?:\\d+|\\d*\\.\\d+)(?:[eE][-+]?\\d+)?$/;\nexports.isValidFloatingPointNumber = str => floatingPointNumRe.test(str);\n\n// https://html.spec.whatwg.org/multipage/common-microsyntaxes.html#rules-for-parsing-floating-point-number-values\nexports.parseFloatingPointNumber = str => {\n  const parsed = parseFloat(str);\n  return isFinite(parsed) ? parsed : NaN;\n};\n\n// https://infra.spec.whatwg.org/#split-on-ascii-whitespace\nexports.splitOnASCIIWhitespace = str => {\n  let position = 0;\n  const tokens = [];\n  while (position < str.length && asciiWhitespaceRe.test(str[position])) {\n    position++;\n  }\n  if (position === str.length) {\n    return tokens;\n  }\n  while (position < str.length) {\n    const start = position;\n    while (position < str.length && !asciiWhitespaceRe.test(str[position])) {\n      position++;\n    }\n    tokens.push(str.slice(start, position));\n    while (position < str.length && asciiWhitespaceRe.test(str[position])) {\n      position++;\n    }\n  }\n  return tokens;\n};\n\n// https://infra.spec.whatwg.org/#split-on-commas\nexports.splitOnCommas = str => {\n  let position = 0;\n  const tokens = [];\n  while (position < str.length) {\n    let start = position;\n    while (position < str.length && str[position] !== \",\") {\n      position++;\n    }\n    let end = position;\n    while (start < str.length && asciiWhitespaceRe.test(str[start])) {\n      start++;\n    }\n    while (end > start && asciiWhitespaceRe.test(str[end - 1])) {\n      end--;\n    }\n    tokens.push(str.slice(start, end));\n    if (position < str.length) {\n      position++;\n    }\n  }\n  return tokens;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}