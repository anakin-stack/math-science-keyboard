{"ast":null,"code":"\"use strict\";\n\nconst HTTP_STATUS_CODES = require(\"http\").STATUS_CODES;\nconst {\n  spawnSync\n} = require(\"child_process\");\nconst {\n  URL\n} = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst tough = require(\"tough-cookie\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst conversions = require(\"webidl-conversions\");\nconst xhrUtils = require(\"./xhr-utils\");\nconst DOMException = require(\"domexception\");\nconst xhrSymbols = require(\"./xmlhttprequest-symbols\");\nconst {\n  addConstants\n} = require(\"../utils\");\nconst {\n  documentBaseURLSerialized\n} = require(\"./helpers/document-base-url\");\nconst {\n  asciiCaseInsensitiveMatch\n} = require(\"./helpers/strings\");\nconst idlUtils = require(\"./generated/utils\");\nconst Document = require(\"./generated/Document\");\nconst Blob = require(\"./generated/Blob\");\nconst FormData = require(\"./generated/FormData\");\nconst XMLHttpRequestEventTarget = require(\"./generated/XMLHttpRequestEventTarget\");\nconst XMLHttpRequestUpload = require(\"./generated/XMLHttpRequestUpload\");\nconst {\n  domToHtml\n} = require(\"../browser/domtohtml\");\nconst {\n  setupForSimpleEventAccessors\n} = require(\"./helpers/create-event-accessor\");\nconst {\n  parseJSONFromBytes\n} = require(\"./helpers/json\");\nconst syncWorkerFile = require.resolve ? require.resolve(\"./xhr-sync-worker.js\") : null;\nconst tokenRegexp = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\nconst fieldValueRegexp = /^[ \\t]*(?:[\\x21-\\x7E\\x80-\\xFF](?:[ \\t][\\x21-\\x7E\\x80-\\xFF])?)*[ \\t]*$/;\nconst forbiddenRequestHeaders = new Set([\"accept-charset\", \"accept-encoding\", \"access-control-request-headers\", \"access-control-request-method\", \"connection\", \"content-length\", \"cookie\", \"cookie2\", \"date\", \"dnt\", \"expect\", \"host\", \"keep-alive\", \"origin\", \"referer\", \"te\", \"trailer\", \"transfer-encoding\", \"upgrade\", \"via\"]);\nconst forbiddenResponseHeaders = new Set([\"set-cookie\", \"set-cookie2\"]);\nconst uniqueResponseHeaders = new Set([\"content-type\", \"content-length\", \"user-agent\", \"referer\", \"host\", \"authorization\", \"proxy-authorization\", \"if-modified-since\", \"if-unmodified-since\", \"from\", \"location\", \"max-forwards\"]);\nconst corsSafeResponseHeaders = new Set([\"cache-control\", \"content-language\", \"content-type\", \"expires\", \"last-modified\", \"pragma\"]);\nconst allowedRequestMethods = new Set([\"OPTIONS\", \"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\"]);\nconst forbiddenRequestMethods = new Set([\"TRACK\", \"TRACE\", \"CONNECT\"]);\nconst XMLHttpRequestResponseType = new Set([\"\", \"arraybuffer\", \"blob\", \"document\", \"json\", \"text\"]);\nmodule.exports = function createXMLHttpRequest(window) {\n  const {\n    Event,\n    ProgressEvent\n  } = window;\n  class XMLHttpRequest extends XMLHttpRequestEventTarget.interface {\n    constructor() {\n      // eslint-disable-line constructor-super\n      const theThis = Object.create(new.target.prototype);\n      XMLHttpRequestEventTarget.setup(theThis);\n      theThis.upload = XMLHttpRequestUpload.create();\n      theThis.upload._ownerDocument = window.document;\n      theThis[xhrSymbols.flag] = {\n        synchronous: false,\n        withCredentials: false,\n        mimeType: null,\n        auth: null,\n        method: undefined,\n        responseType: \"\",\n        requestHeaders: {},\n        referrer: theThis._ownerDocument.URL,\n        uri: \"\",\n        timeout: 0,\n        body: undefined,\n        formData: false,\n        preflight: false,\n        requestManager: theThis._ownerDocument._requestManager,\n        pool: theThis._ownerDocument._pool,\n        agentOptions: theThis._ownerDocument._agentOptions,\n        strictSSL: theThis._ownerDocument._strictSSL,\n        proxy: theThis._ownerDocument._proxy,\n        cookieJar: theThis._ownerDocument._cookieJar,\n        encoding: theThis._ownerDocument._encoding,\n        origin: theThis._ownerDocument.origin,\n        userAgent: window.navigator.userAgent\n      };\n      theThis[xhrSymbols.properties] = {\n        beforeSend: false,\n        send: false,\n        timeoutStart: 0,\n        timeoutId: 0,\n        timeoutFn: null,\n        client: null,\n        responseHeaders: {},\n        filteredResponseHeaders: [],\n        responseBuffer: null,\n        responseCache: null,\n        responseTextCache: null,\n        responseXMLCache: null,\n        responseURL: \"\",\n        readyState: XMLHttpRequest.UNSENT,\n        status: 0,\n        statusText: \"\",\n        error: \"\",\n        uploadComplete: false,\n        uploadListener: false,\n        // Signifies that we're calling abort() from xhr-utils.js because of a window shutdown.\n        // In that case the termination reason is \"fatal\", not \"end-user abort\".\n        abortError: false,\n        cookieJar: theThis._ownerDocument._cookieJar,\n        bufferStepSize: 1 * 1024 * 1024,\n        // pre-allocate buffer increase step size. init value is 1MB\n        totalReceivedChunkSize: 0\n      };\n      return theThis;\n    }\n    get readyState() {\n      return this[xhrSymbols.properties].readyState;\n    }\n    get status() {\n      return this[xhrSymbols.properties].status;\n    }\n    get statusText() {\n      return this[xhrSymbols.properties].statusText;\n    }\n    get responseType() {\n      return this[xhrSymbols.flag].responseType;\n    }\n    set responseType(responseType) {\n      const flag = this[xhrSymbols.flag];\n      if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (this.readyState === XMLHttpRequest.OPENED && flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      if (!XMLHttpRequestResponseType.has(responseType)) {\n        responseType = \"\";\n      }\n      flag.responseType = responseType;\n    }\n    get response() {\n      const properties = this[xhrSymbols.properties];\n      if (properties.responseCache) {\n        return properties.responseCache;\n      }\n      let res = \"\";\n      const responseBuffer = properties.responseBuffer ? properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) : null;\n      switch (this.responseType) {\n        case \"\":\n        case \"text\":\n          {\n            res = this.responseText;\n            break;\n          }\n        case \"arraybuffer\":\n          {\n            if (!responseBuffer) {\n              return null;\n            }\n            res = new Uint8Array(responseBuffer).buffer;\n            break;\n          }\n        case \"blob\":\n          {\n            if (!responseBuffer) {\n              return null;\n            }\n            const contentType = finalMIMEType(this);\n            res = Blob.create([[new Uint8Array(responseBuffer)], {\n              type: contentType || \"\"\n            }]);\n            break;\n          }\n        case \"document\":\n          {\n            res = this.responseXML;\n            break;\n          }\n        case \"json\":\n          {\n            if (this.readyState !== XMLHttpRequest.DONE || !responseBuffer) {\n              res = null;\n            }\n            try {\n              res = parseJSONFromBytes(responseBuffer);\n            } catch (e) {\n              res = null;\n            }\n            break;\n          }\n      }\n      properties.responseCache = res;\n      return res;\n    }\n    get responseText() {\n      const properties = this[xhrSymbols.properties];\n      if (this.responseType !== \"\" && this.responseType !== \"text\") {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (this.readyState !== XMLHttpRequest.LOADING && this.readyState !== XMLHttpRequest.DONE) {\n        return \"\";\n      }\n      if (properties.responseTextCache) {\n        return properties.responseTextCache;\n      }\n      const responseBuffer = properties.responseBuffer ? properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) : null;\n      if (!responseBuffer) {\n        return \"\";\n      }\n      const fallbackEncoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n      const res = whatwgEncoding.decode(responseBuffer, fallbackEncoding);\n      properties.responseTextCache = res;\n      return res;\n    }\n    get responseXML() {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (this.responseType !== \"\" && this.responseType !== \"document\") {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (this.readyState !== XMLHttpRequest.DONE) {\n        return null;\n      }\n      if (properties.responseXMLCache) {\n        return properties.responseXMLCache;\n      }\n      const responseBuffer = properties.responseBuffer ? properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) : null;\n      if (!responseBuffer) {\n        return null;\n      }\n      const contentType = finalMIMEType(this);\n      let isHTML = false;\n      let isXML = false;\n      const parsed = MIMEType.parse(contentType);\n      if (parsed) {\n        isHTML = parsed.isHTML();\n        isXML = parsed.isXML();\n        if (!isXML && !isHTML) {\n          return null;\n        }\n      }\n      if (this.responseType === \"\" && isHTML) {\n        return null;\n      }\n      const encoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n      const resText = whatwgEncoding.decode(responseBuffer, encoding);\n      if (!resText) {\n        return null;\n      }\n      const res = Document.create([], {\n        options: {\n          url: flag.uri,\n          lastModified: new Date(getResponseHeader(this, \"last-modified\")),\n          parsingMode: isHTML ? \"html\" : \"xml\",\n          cookieJar: {\n            setCookieSync: () => undefined,\n            getCookieStringSync: () => \"\"\n          },\n          encoding,\n          parseOptions: this._ownerDocument._parseOptions\n        }\n      });\n      const resImpl = idlUtils.implForWrapper(res);\n      try {\n        resImpl._htmlToDom.appendToDocument(resText, resImpl);\n      } catch (e) {\n        properties.responseXMLCache = null;\n        return null;\n      }\n      res.close();\n      properties.responseXMLCache = res;\n      return res;\n    }\n    get responseURL() {\n      return this[xhrSymbols.properties].responseURL;\n    }\n    get timeout() {\n      return this[xhrSymbols.flag].timeout;\n    }\n    set timeout(val) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      flag.timeout = val;\n      clearTimeout(properties.timeoutId);\n      if (val > 0 && properties.timeoutFn) {\n        properties.timeoutId = setTimeout(properties.timeoutFn, Math.max(0, val - (new Date().getTime() - properties.timeoutStart)));\n      } else {\n        properties.timeoutFn = null;\n        properties.timeoutStart = 0;\n      }\n    }\n    get withCredentials() {\n      return this[xhrSymbols.flag].withCredentials;\n    }\n    set withCredentials(val) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (!(this.readyState === XMLHttpRequest.UNSENT || this.readyState === XMLHttpRequest.OPENED)) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      flag.withCredentials = val;\n    }\n    abort() {\n      const properties = this[xhrSymbols.properties];\n\n      // Terminate the request\n      clearTimeout(properties.timeoutId);\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n      const {\n        client\n      } = properties;\n      if (client) {\n        client.abort();\n        properties.client = null;\n      }\n      if (properties.abortError) {\n        // Special case that ideally shouldn't be going through the public API at all.\n        // Run the https://xhr.spec.whatwg.org/#handle-errors \"fatal\" steps.\n        properties.readyState = XMLHttpRequest.DONE;\n        properties.send = false;\n        xhrUtils.setResponseToNetworkError(this);\n        return;\n      }\n      if (this.readyState === XMLHttpRequest.OPENED && properties.send || this.readyState === XMLHttpRequest.HEADERS_RECEIVED || this.readyState === XMLHttpRequest.LOADING) {\n        xhrUtils.requestErrorSteps(this, \"abort\");\n      }\n      if (this.readyState === XMLHttpRequest.DONE) {\n        properties.readyState = XMLHttpRequest.UNSENT;\n        xhrUtils.setResponseToNetworkError(this);\n      }\n    }\n    getAllResponseHeaders() {\n      const properties = this[xhrSymbols.properties];\n      const {\n        readyState\n      } = this;\n      if (readyState === XMLHttpRequest.UNSENT || readyState === XMLHttpRequest.OPENED) {\n        return \"\";\n      }\n      return Object.keys(properties.responseHeaders).filter(key => properties.filteredResponseHeaders.indexOf(key) === -1).map(key => [conversions.ByteString(key).toLowerCase(), properties.responseHeaders[key]].join(\": \")).join(\"\\r\\n\");\n    }\n    getResponseHeader(header) {\n      const properties = this[xhrSymbols.properties];\n      const {\n        readyState\n      } = this;\n      if (readyState === XMLHttpRequest.UNSENT || readyState === XMLHttpRequest.OPENED) {\n        return null;\n      }\n      const lcHeader = conversions.ByteString(header).toLowerCase();\n      if (properties.filteredResponseHeaders.find(filtered => lcHeader === filtered.toLowerCase())) {\n        return null;\n      }\n      return getResponseHeader(this, lcHeader);\n    }\n    open(method, uri, asynchronous, user, password) {\n      if (!this._ownerDocument) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      const argumentCount = arguments.length;\n      if (argumentCount < 2) {\n        throw new TypeError(\"Not enough arguments (expected at least 2)\");\n      }\n      method = conversions.ByteString(method);\n      uri = conversions.USVString(uri);\n      if (user) {\n        user = conversions.USVString(user);\n      }\n      if (password) {\n        password = conversions.USVString(password);\n      }\n      if (!tokenRegexp.test(method)) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n      const upperCaseMethod = method.toUpperCase();\n      if (forbiddenRequestMethods.has(upperCaseMethod)) {\n        throw new DOMException(\"The operation is insecure.\", \"SecurityError\");\n      }\n      const {\n        client\n      } = properties;\n      if (client && typeof client.abort === \"function\") {\n        client.abort();\n      }\n      if (allowedRequestMethods.has(upperCaseMethod)) {\n        method = upperCaseMethod;\n      }\n      if (typeof asynchronous !== \"undefined\") {\n        flag.synchronous = !asynchronous;\n      } else {\n        flag.synchronous = false;\n      }\n      if (flag.responseType && flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      if (flag.synchronous && flag.timeout) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      flag.method = method;\n      let urlObj;\n      try {\n        urlObj = new URL(uri, documentBaseURLSerialized(this._ownerDocument));\n      } catch (e) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n      if (user || password && !urlObj.username) {\n        flag.auth = {\n          user,\n          pass: password\n        };\n        urlObj.username = \"\";\n        urlObj.password = \"\";\n      }\n      flag.uri = urlObj.href;\n      flag.requestHeaders = {};\n      flag.preflight = false;\n      properties.send = false;\n      properties.uploadListener = false;\n      properties.requestBuffer = null;\n      properties.requestCache = null;\n      properties.abortError = false;\n      properties.responseURL = \"\";\n      readyStateChange(this, XMLHttpRequest.OPENED);\n    }\n    overrideMimeType(mime) {\n      mime = String(mime);\n      const {\n        readyState\n      } = this;\n      if (readyState === XMLHttpRequest.LOADING || readyState === XMLHttpRequest.DONE) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      this[xhrSymbols.flag].overrideMIMEType = \"application/octet-stream\";\n\n      // Waiting for better spec: https://github.com/whatwg/xhr/issues/157\n      const parsed = MIMEType.parse(mime);\n      if (parsed) {\n        this[xhrSymbols.flag].overrideMIMEType = parsed.essence;\n        const charset = parsed.parameters.get(\"charset\");\n        if (charset) {\n          this[xhrSymbols.flag].overrideCharset = whatwgEncoding.labelToName(charset);\n        }\n      }\n    }\n    send(body) {\n      body = coerceBodyArg(body);\n\n      // Not per spec, but per tests: https://github.com/whatwg/xhr/issues/65\n      if (!this._ownerDocument) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (this.readyState !== XMLHttpRequest.OPENED || properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      properties.beforeSend = true;\n      try {\n        if (flag.method === \"GET\" || flag.method === \"HEAD\") {\n          body = null;\n        }\n        if (body !== null) {\n          let encoding = null;\n          let mimeType = null;\n          if (Document.isImpl(body)) {\n            encoding = \"UTF-8\";\n            mimeType = (body._parsingMode === \"html\" ? \"text/html\" : \"application/xml\") + \";charset=UTF-8\";\n            flag.body = domToHtml([body]);\n          } else {\n            if (typeof body === \"string\") {\n              encoding = \"UTF-8\";\n            }\n            const {\n              buffer,\n              formData,\n              contentType\n            } = extractBody(body);\n            mimeType = contentType;\n            flag.body = buffer || formData;\n            flag.formData = Boolean(formData);\n          }\n          const existingContentType = xhrUtils.getRequestHeader(flag.requestHeaders, \"content-type\");\n          if (mimeType !== null && existingContentType === null) {\n            flag.requestHeaders[\"Content-Type\"] = mimeType;\n          } else if (existingContentType !== null && encoding !== null) {\n            // Waiting for better spec: https://github.com/whatwg/xhr/issues/188. This seems like a good guess at what\n            // the spec will be, in the meantime.\n            const parsed = MIMEType.parse(existingContentType);\n            if (parsed) {\n              const charset = parsed.parameters.get(\"charset\");\n              if (charset && !asciiCaseInsensitiveMatch(charset, encoding) && encoding !== null) {\n                parsed.parameters.set(\"charset\", encoding);\n              }\n              xhrUtils.updateRequestHeader(flag.requestHeaders, \"content-type\", parsed.toString());\n            }\n          }\n        }\n      } finally {\n        if (properties.beforeSend) {\n          properties.beforeSend = false;\n        } else {\n          throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n        }\n      }\n      if (Object.keys(idlUtils.implForWrapper(this.upload)._eventListeners).length > 0) {\n        properties.uploadListener = true;\n      }\n\n      // request doesn't like zero-length bodies\n      if (flag.body && flag.body.byteLength === 0) {\n        flag.body = null;\n      }\n      if (flag.synchronous) {\n        const flagStr = JSON.stringify(flag, function (k, v) {\n          if (this === flag && k === \"requestManager\") {\n            return null;\n          }\n          if (this === flag && k === \"pool\" && v) {\n            return {\n              maxSockets: v.maxSockets\n            };\n          }\n          return v;\n        });\n        const res = spawnSync(process.execPath, [syncWorkerFile], {\n          input: flagStr\n        });\n        if (res.status !== 0) {\n          throw new Error(res.stderr.toString());\n        }\n        if (res.error) {\n          if (typeof res.error === \"string\") {\n            res.error = new Error(res.error);\n          }\n          throw res.error;\n        }\n        const response = JSON.parse(res.stdout.toString());\n        if (response.properties.responseBuffer && response.properties.responseBuffer.data) {\n          response.properties.responseBuffer = Buffer.from(response.properties.responseBuffer.data);\n        }\n        if (response.properties.cookieJar) {\n          response.properties.cookieJar = tough.CookieJar.deserializeSync(response.properties.cookieJar, this._ownerDocument._cookieJar.store);\n        }\n        response.properties.readyState = XMLHttpRequest.LOADING;\n        this[xhrSymbols.properties] = response.properties;\n        if (response.properties.error) {\n          xhrUtils.dispatchError(this);\n          throw new DOMException(response.properties.error, \"NetworkError\");\n        } else {\n          const {\n            responseBuffer\n          } = this[xhrSymbols.properties];\n          const contentLength = getResponseHeader(this, \"content-length\") || \"0\";\n          const bufferLength = parseInt(contentLength) || responseBuffer.length;\n          const progressObj = {\n            lengthComputable: false\n          };\n          if (bufferLength !== 0) {\n            progressObj.total = bufferLength;\n            progressObj.loaded = bufferLength;\n            progressObj.lengthComputable = true;\n          }\n          this.dispatchEvent(new ProgressEvent(\"progress\", progressObj));\n          readyStateChange(this, XMLHttpRequest.DONE);\n          this.dispatchEvent(new ProgressEvent(\"load\", progressObj));\n          this.dispatchEvent(new ProgressEvent(\"loadend\", progressObj));\n        }\n      } else {\n        properties.send = true;\n        this.dispatchEvent(new ProgressEvent(\"loadstart\"));\n        const client = xhrUtils.createClient(this);\n        properties.client = client;\n        // For new client, reset totalReceivedChunkSize and bufferStepSize\n        properties.totalReceivedChunkSize = 0;\n        properties.bufferStepSize = 1 * 1024 * 1024;\n        properties.origin = flag.origin;\n        client.on(\"error\", err => {\n          client.removeAllListeners();\n          properties.error = err;\n          xhrUtils.dispatchError(this);\n        });\n        client.on(\"response\", res => receiveResponse(this, res));\n        client.on(\"redirect\", () => {\n          const {\n            response\n          } = client;\n          const destUrlObj = new URL(response.request.headers.Referer);\n          const urlObj = new URL(response.request.uri.href);\n          if (destUrlObj.origin !== urlObj.origin && destUrlObj.origin !== flag.origin) {\n            properties.origin = \"null\";\n          }\n          response.request.headers.Origin = properties.origin;\n          if (flag.origin !== destUrlObj.origin && destUrlObj.protocol !== \"data:\") {\n            if (!xhrUtils.validCORSHeaders(this, response, flag, properties, flag.origin)) {\n              return;\n            }\n            if (urlObj.username || urlObj.password) {\n              properties.error = \"Userinfo forbidden in cors redirect\";\n              xhrUtils.dispatchError(this);\n            }\n          }\n        });\n        if (body !== null && body !== \"\") {\n          properties.uploadComplete = false;\n          setDispatchProgressEvents(this);\n        } else {\n          properties.uploadComplete = true;\n        }\n        if (this.timeout > 0) {\n          properties.timeoutStart = new Date().getTime();\n          properties.timeoutFn = () => {\n            client.abort();\n            if (!(this.readyState === XMLHttpRequest.UNSENT || this.readyState === XMLHttpRequest.OPENED && !properties.send || this.readyState === XMLHttpRequest.DONE)) {\n              properties.send = false;\n              let stateChanged = false;\n              if (!properties.uploadComplete) {\n                this.upload.dispatchEvent(new ProgressEvent(\"progress\"));\n                readyStateChange(this, XMLHttpRequest.DONE);\n                this.upload.dispatchEvent(new ProgressEvent(\"timeout\"));\n                this.upload.dispatchEvent(new ProgressEvent(\"loadend\"));\n                stateChanged = true;\n              }\n              this.dispatchEvent(new ProgressEvent(\"progress\"));\n              if (!stateChanged) {\n                readyStateChange(this, XMLHttpRequest.DONE);\n              }\n              this.dispatchEvent(new ProgressEvent(\"timeout\"));\n              this.dispatchEvent(new ProgressEvent(\"loadend\"));\n            }\n            properties.readyState = XMLHttpRequest.UNSENT;\n          };\n          properties.timeoutId = setTimeout(properties.timeoutFn, this.timeout);\n        }\n      }\n      flag.body = undefined;\n      flag.formData = false;\n    }\n    setRequestHeader(header, value) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (arguments.length !== 2) {\n        throw new TypeError(\"2 arguments required for setRequestHeader\");\n      }\n      header = conversions.ByteString(header);\n      value = conversions.ByteString(value);\n      if (this.readyState !== XMLHttpRequest.OPENED || properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      value = normalizeHeaderValue(value);\n      if (!tokenRegexp.test(header) || !fieldValueRegexp.test(value)) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n      const lcHeader = header.toLowerCase();\n      if (forbiddenRequestHeaders.has(lcHeader) || lcHeader.startsWith(\"sec-\") || lcHeader.startsWith(\"proxy-\")) {\n        return;\n      }\n      const keys = Object.keys(flag.requestHeaders);\n      let n = keys.length;\n      while (n--) {\n        const key = keys[n];\n        if (key.toLowerCase() === lcHeader) {\n          flag.requestHeaders[key] += \", \" + value;\n          return;\n        }\n      }\n      flag.requestHeaders[header] = value;\n    }\n    get _ownerDocument() {\n      return idlUtils.implForWrapper(window.document);\n    }\n  }\n  Object.defineProperty(XMLHttpRequest.prototype, Symbol.toStringTag, {\n    value: \"XMLHttpRequest\",\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n  setupForSimpleEventAccessors(XMLHttpRequest.prototype, [\"readystatechange\"]);\n  addConstants(XMLHttpRequest, {\n    UNSENT: 0,\n    OPENED: 1,\n    HEADERS_RECEIVED: 2,\n    LOADING: 3,\n    DONE: 4\n  });\n  function readyStateChange(xhr, readyState) {\n    const properties = xhr[xhrSymbols.properties];\n    if (properties.readyState === readyState) {\n      return;\n    }\n    properties.readyState = readyState;\n    const readyStateChangeEvent = new Event(\"readystatechange\");\n    xhr.dispatchEvent(readyStateChangeEvent);\n  }\n  function receiveResponse(xhr, response) {\n    const properties = xhr[xhrSymbols.properties];\n    const flag = xhr[xhrSymbols.flag];\n    const {\n      statusCode\n    } = response;\n    let byteOffset = 0;\n    const headers = {};\n    const filteredResponseHeaders = [];\n    const headerMap = {};\n    const {\n      rawHeaders\n    } = response;\n    const n = Number(rawHeaders.length);\n    for (let i = 0; i < n; i += 2) {\n      const k = rawHeaders[i];\n      const kl = k.toLowerCase();\n      const v = rawHeaders[i + 1];\n      if (uniqueResponseHeaders.has(kl)) {\n        if (headerMap[kl] !== undefined) {\n          delete headers[headerMap[kl]];\n        }\n        headers[k] = v;\n      } else if (headerMap[kl] !== undefined) {\n        headers[headerMap[kl]] += \", \" + v;\n      } else {\n        headers[k] = v;\n      }\n      headerMap[kl] = k;\n    }\n    const destUrlObj = new URL(response.request.uri.href);\n    if (properties.origin !== destUrlObj.origin && destUrlObj.protocol !== \"data:\") {\n      if (!xhrUtils.validCORSHeaders(xhr, response, flag, properties, properties.origin)) {\n        return;\n      }\n      const acehStr = response.headers[\"access-control-expose-headers\"];\n      const aceh = new Set(acehStr ? acehStr.trim().toLowerCase().split(xhrUtils.headerListSeparatorRegexp) : []);\n      for (const header in headers) {\n        const lcHeader = header.toLowerCase();\n        if (!corsSafeResponseHeaders.has(lcHeader) && !aceh.has(lcHeader)) {\n          filteredResponseHeaders.push(header);\n        }\n      }\n    }\n    for (const header in headers) {\n      const lcHeader = header.toLowerCase();\n      if (forbiddenResponseHeaders.has(lcHeader)) {\n        filteredResponseHeaders.push(header);\n      }\n    }\n    properties.responseURL = destUrlObj.href;\n    properties.status = statusCode;\n    properties.statusText = response.statusMessage || HTTP_STATUS_CODES[statusCode] || \"\";\n    properties.responseHeaders = headers;\n    properties.filteredResponseHeaders = filteredResponseHeaders;\n    const contentLength = getResponseHeader(xhr, \"content-length\") || \"0\";\n    const bufferLength = parseInt(contentLength) || 0;\n    const progressObj = {\n      lengthComputable: false\n    };\n    let lastProgressReported;\n    if (bufferLength !== 0) {\n      progressObj.total = bufferLength;\n      progressObj.loaded = 0;\n      progressObj.lengthComputable = true;\n    }\n    // pre-allocate buffer.\n    properties.responseBuffer = Buffer.alloc(properties.bufferStepSize);\n    properties.responseCache = null;\n    properties.responseTextCache = null;\n    properties.responseXMLCache = null;\n    readyStateChange(xhr, XMLHttpRequest.HEADERS_RECEIVED);\n    if (!properties.client) {\n      // The request was aborted in reaction to the readystatechange event.\n      return;\n    }\n\n    // Can't use the client since the client gets the post-ungzipping bytes (which can be greater than the\n    // Content-Length).\n    response.on(\"data\", chunk => {\n      byteOffset += chunk.length;\n      progressObj.loaded = byteOffset;\n    });\n    properties.client.on(\"data\", chunk => {\n      properties.totalReceivedChunkSize += chunk.length;\n      if (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n        properties.bufferStepSize *= 2;\n        while (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n          properties.bufferStepSize *= 2;\n        }\n        const tmpBuf = Buffer.alloc(properties.bufferStepSize);\n        properties.responseBuffer.copy(tmpBuf, 0, 0, properties.responseBuffer.length);\n        properties.responseBuffer = tmpBuf;\n      }\n      chunk.copy(properties.responseBuffer, properties.totalReceivedChunkSize - chunk.length, 0, chunk.length);\n      properties.responseCache = null;\n      properties.responseTextCache = null;\n      properties.responseXMLCache = null;\n      if (properties.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n        properties.readyState = XMLHttpRequest.LOADING;\n      }\n      xhr.dispatchEvent(new Event(\"readystatechange\"));\n      if (progressObj.total !== progressObj.loaded || properties.totalReceivedChunkSize === byteOffset) {\n        if (lastProgressReported !== progressObj.loaded) {\n          // This is a necessary check in the gzip case where we can be getting new data from the client, as it\n          // un-gzips, but no new data has been gotten from the response, so we should not fire a progress event.\n          lastProgressReported = progressObj.loaded;\n          xhr.dispatchEvent(new ProgressEvent(\"progress\", progressObj));\n        }\n      }\n    });\n    properties.client.on(\"end\", () => {\n      clearTimeout(properties.timeoutId);\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n      properties.client = null;\n      xhr.dispatchEvent(new ProgressEvent(\"progress\", progressObj));\n      readyStateChange(xhr, XMLHttpRequest.DONE);\n      xhr.dispatchEvent(new ProgressEvent(\"load\", progressObj));\n      xhr.dispatchEvent(new ProgressEvent(\"loadend\", progressObj));\n    });\n  }\n  function setDispatchProgressEvents(xhr) {\n    const properties = xhr[xhrSymbols.properties];\n    const {\n      client\n    } = properties;\n    const {\n      upload\n    } = xhr;\n    let total = 0;\n    let lengthComputable = false;\n    const length = client.headers && parseInt(xhrUtils.getRequestHeader(client.headers, \"content-length\"));\n    if (length) {\n      total = length;\n      lengthComputable = true;\n    }\n    const initProgress = {\n      lengthComputable,\n      total,\n      loaded: 0\n    };\n    if (properties.uploadListener) {\n      upload.dispatchEvent(new ProgressEvent(\"loadstart\", initProgress));\n    }\n    client.on(\"request\", req => {\n      req.on(\"response\", () => {\n        properties.uploadComplete = true;\n        if (!properties.uploadListener) {\n          return;\n        }\n        const progress = {\n          lengthComputable,\n          total,\n          loaded: total\n        };\n        upload.dispatchEvent(new ProgressEvent(\"progress\", progress));\n        upload.dispatchEvent(new ProgressEvent(\"load\", progress));\n        upload.dispatchEvent(new ProgressEvent(\"loadend\", progress));\n      });\n    });\n  }\n  return XMLHttpRequest;\n};\nfunction finalMIMEType(xhr) {\n  const flag = xhr[xhrSymbols.flag];\n  return flag.overrideMIMEType || getResponseHeader(xhr, \"content-type\");\n}\nfunction finalCharset(xhr) {\n  const flag = xhr[xhrSymbols.flag];\n  if (flag.overrideCharset) {\n    return flag.overrideCharset;\n  }\n  const parsedContentType = MIMEType.parse(getResponseHeader(xhr, \"content-type\"));\n  if (parsedContentType) {\n    return whatwgEncoding.labelToName(parsedContentType.parameters.get(\"charset\"));\n  }\n  return null;\n}\nfunction getResponseHeader(xhr, lcHeader) {\n  const properties = xhr[xhrSymbols.properties];\n  const keys = Object.keys(properties.responseHeaders);\n  let n = keys.length;\n  while (n--) {\n    const key = keys[n];\n    if (key.toLowerCase() === lcHeader) {\n      return properties.responseHeaders[key];\n    }\n  }\n  return null;\n}\nfunction normalizeHeaderValue(value) {\n  return value.replace(/^[\\x09\\x0A\\x0D\\x20]+/, \"\").replace(/[\\x09\\x0A\\x0D\\x20]+$/, \"\");\n}\nfunction coerceBodyArg(body) {\n  // Implements the IDL conversion for `optional (Document or BodyInit)? body = null`\n\n  if (body === undefined || body === null) {\n    return null;\n  }\n  if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {\n    return body;\n  }\n  const impl = idlUtils.implForWrapper(body);\n  if (impl) {\n    // TODO: allow URLSearchParams or ReadableStream\n    if (Blob.isImpl(impl) || FormData.isImpl(impl) || Document.isImpl(impl)) {\n      return impl;\n    }\n  }\n  return conversions.USVString(body);\n}\nfunction extractBody(bodyInit) {\n  // https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n  // except we represent the body as a Node.js Buffer instead,\n  // or a special case for FormData since we want request to handle that. Probably it would be\n  // cleaner (and allow a future without request) if we did the form encoding ourself.\n\n  if (Blob.isImpl(bodyInit)) {\n    return {\n      buffer: bodyInit._buffer,\n      contentType: bodyInit.type === \"\" ? null : bodyInit.type\n    };\n  } else if (bodyInit instanceof ArrayBuffer) {\n    return {\n      buffer: Buffer.from(bodyInit),\n      contentType: null\n    };\n  } else if (ArrayBuffer.isView(bodyInit)) {\n    return {\n      buffer: Buffer.from(bodyInit.buffer, bodyInit.byteOffset, bodyInit.byteLength),\n      contentType: null\n    };\n  } else if (FormData.isImpl(bodyInit)) {\n    const formData = [];\n    for (const entry of bodyInit._entries) {\n      let val;\n      if (Blob.isImpl(entry.value)) {\n        const blob = entry.value;\n        val = {\n          name: entry.name,\n          value: blob._buffer,\n          options: {\n            filename: blob.name,\n            contentType: blob.type,\n            knownLength: blob.size\n          }\n        };\n      } else {\n        val = entry;\n      }\n      formData.push(val);\n    }\n    return {\n      formData\n    };\n  }\n\n  // Must be a string\n  return {\n    buffer: Buffer.from(bodyInit, \"utf-8\"),\n    contentType: \"text/plain;charset=UTF-8\"\n  };\n}","map":{"version":3,"names":["HTTP_STATUS_CODES","require","STATUS_CODES","spawnSync","URL","whatwgEncoding","tough","MIMEType","conversions","xhrUtils","DOMException","xhrSymbols","addConstants","documentBaseURLSerialized","asciiCaseInsensitiveMatch","idlUtils","Document","Blob","FormData","XMLHttpRequestEventTarget","XMLHttpRequestUpload","domToHtml","setupForSimpleEventAccessors","parseJSONFromBytes","syncWorkerFile","resolve","tokenRegexp","fieldValueRegexp","forbiddenRequestHeaders","Set","forbiddenResponseHeaders","uniqueResponseHeaders","corsSafeResponseHeaders","allowedRequestMethods","forbiddenRequestMethods","XMLHttpRequestResponseType","module","exports","createXMLHttpRequest","window","Event","ProgressEvent","XMLHttpRequest","interface","constructor","theThis","Object","create","new","target","prototype","setup","upload","_ownerDocument","document","flag","synchronous","withCredentials","mimeType","auth","method","undefined","responseType","requestHeaders","referrer","uri","timeout","body","formData","preflight","requestManager","_requestManager","pool","_pool","agentOptions","_agentOptions","strictSSL","_strictSSL","proxy","_proxy","cookieJar","_cookieJar","encoding","_encoding","origin","userAgent","navigator","properties","beforeSend","send","timeoutStart","timeoutId","timeoutFn","client","responseHeaders","filteredResponseHeaders","responseBuffer","responseCache","responseTextCache","responseXMLCache","responseURL","readyState","UNSENT","status","statusText","error","uploadComplete","uploadListener","abortError","bufferStepSize","totalReceivedChunkSize","LOADING","DONE","OPENED","has","response","res","slice","responseText","Uint8Array","buffer","contentType","finalMIMEType","type","responseXML","e","fallbackEncoding","finalCharset","getBOMEncoding","decode","isHTML","isXML","parsed","parse","resText","options","url","lastModified","Date","getResponseHeader","parsingMode","setCookieSync","getCookieStringSync","parseOptions","_parseOptions","resImpl","implForWrapper","_htmlToDom","appendToDocument","close","val","clearTimeout","setTimeout","Math","max","getTime","abort","setResponseToNetworkError","HEADERS_RECEIVED","requestErrorSteps","getAllResponseHeaders","keys","filter","key","indexOf","map","ByteString","toLowerCase","join","header","lcHeader","find","filtered","open","asynchronous","user","password","argumentCount","arguments","length","TypeError","USVString","test","upperCaseMethod","toUpperCase","urlObj","username","pass","href","requestBuffer","requestCache","readyStateChange","overrideMimeType","mime","String","overrideMIMEType","essence","charset","parameters","get","overrideCharset","labelToName","coerceBodyArg","isImpl","_parsingMode","extractBody","Boolean","existingContentType","getRequestHeader","set","updateRequestHeader","toString","_eventListeners","byteLength","flagStr","JSON","stringify","k","v","maxSockets","process","execPath","input","Error","stderr","stdout","data","Buffer","from","CookieJar","deserializeSync","store","dispatchError","contentLength","bufferLength","parseInt","progressObj","lengthComputable","total","loaded","dispatchEvent","createClient","on","err","removeAllListeners","receiveResponse","destUrlObj","request","headers","Referer","Origin","protocol","validCORSHeaders","setDispatchProgressEvents","stateChanged","setRequestHeader","value","normalizeHeaderValue","startsWith","n","defineProperty","Symbol","toStringTag","writable","enumerable","configurable","xhr","readyStateChangeEvent","statusCode","byteOffset","headerMap","rawHeaders","Number","i","kl","acehStr","aceh","trim","split","headerListSeparatorRegexp","push","statusMessage","lastProgressReported","alloc","chunk","tmpBuf","copy","initProgress","req","progress","parsedContentType","replace","ArrayBuffer","isView","impl","bodyInit","_buffer","entry","_entries","blob","name","filename","knownLength","size"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/xmlhttprequest.js"],"sourcesContent":["\"use strict\";\n\nconst HTTP_STATUS_CODES = require(\"http\").STATUS_CODES;\nconst { spawnSync } = require(\"child_process\");\nconst { URL } = require(\"whatwg-url\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst tough = require(\"tough-cookie\");\nconst MIMEType = require(\"whatwg-mimetype\");\nconst conversions = require(\"webidl-conversions\");\n\nconst xhrUtils = require(\"./xhr-utils\");\nconst DOMException = require(\"domexception\");\nconst xhrSymbols = require(\"./xmlhttprequest-symbols\");\nconst { addConstants } = require(\"../utils\");\nconst { documentBaseURLSerialized } = require(\"./helpers/document-base-url\");\nconst { asciiCaseInsensitiveMatch } = require(\"./helpers/strings\");\nconst idlUtils = require(\"./generated/utils\");\nconst Document = require(\"./generated/Document\");\nconst Blob = require(\"./generated/Blob\");\nconst FormData = require(\"./generated/FormData\");\nconst XMLHttpRequestEventTarget = require(\"./generated/XMLHttpRequestEventTarget\");\nconst XMLHttpRequestUpload = require(\"./generated/XMLHttpRequestUpload\");\nconst { domToHtml } = require(\"../browser/domtohtml\");\nconst { setupForSimpleEventAccessors } = require(\"./helpers/create-event-accessor\");\nconst { parseJSONFromBytes } = require(\"./helpers/json\");\n\nconst syncWorkerFile = require.resolve ? require.resolve(\"./xhr-sync-worker.js\") : null;\n\nconst tokenRegexp = /^[!#$%&'*+\\-.^_`|~0-9A-Za-z]+$/;\nconst fieldValueRegexp = /^[ \\t]*(?:[\\x21-\\x7E\\x80-\\xFF](?:[ \\t][\\x21-\\x7E\\x80-\\xFF])?)*[ \\t]*$/;\n\nconst forbiddenRequestHeaders = new Set([\n  \"accept-charset\",\n  \"accept-encoding\",\n  \"access-control-request-headers\",\n  \"access-control-request-method\",\n  \"connection\",\n  \"content-length\",\n  \"cookie\",\n  \"cookie2\",\n  \"date\",\n  \"dnt\",\n  \"expect\",\n  \"host\",\n  \"keep-alive\",\n  \"origin\",\n  \"referer\",\n  \"te\",\n  \"trailer\",\n  \"transfer-encoding\",\n  \"upgrade\",\n  \"via\"\n]);\nconst forbiddenResponseHeaders = new Set([\n  \"set-cookie\",\n  \"set-cookie2\"\n]);\nconst uniqueResponseHeaders = new Set([\n  \"content-type\",\n  \"content-length\",\n  \"user-agent\",\n  \"referer\",\n  \"host\",\n  \"authorization\",\n  \"proxy-authorization\",\n  \"if-modified-since\",\n  \"if-unmodified-since\",\n  \"from\",\n  \"location\",\n  \"max-forwards\"\n]);\nconst corsSafeResponseHeaders = new Set([\n  \"cache-control\",\n  \"content-language\",\n  \"content-type\",\n  \"expires\",\n  \"last-modified\",\n  \"pragma\"\n]);\n\n\nconst allowedRequestMethods = new Set([\"OPTIONS\", \"GET\", \"HEAD\", \"POST\", \"PUT\", \"DELETE\"]);\nconst forbiddenRequestMethods = new Set([\"TRACK\", \"TRACE\", \"CONNECT\"]);\n\nconst XMLHttpRequestResponseType = new Set([\n  \"\",\n  \"arraybuffer\",\n  \"blob\",\n  \"document\",\n  \"json\",\n  \"text\"\n]);\n\nmodule.exports = function createXMLHttpRequest(window) {\n  const { Event, ProgressEvent } = window;\n\n  class XMLHttpRequest extends XMLHttpRequestEventTarget.interface {\n    constructor() { // eslint-disable-line constructor-super\n      const theThis = Object.create(new.target.prototype);\n      XMLHttpRequestEventTarget.setup(theThis);\n      theThis.upload = XMLHttpRequestUpload.create();\n      theThis.upload._ownerDocument = window.document;\n\n      theThis[xhrSymbols.flag] = {\n        synchronous: false,\n        withCredentials: false,\n        mimeType: null,\n        auth: null,\n        method: undefined,\n        responseType: \"\",\n        requestHeaders: {},\n        referrer: theThis._ownerDocument.URL,\n        uri: \"\",\n        timeout: 0,\n        body: undefined,\n        formData: false,\n        preflight: false,\n        requestManager: theThis._ownerDocument._requestManager,\n        pool: theThis._ownerDocument._pool,\n        agentOptions: theThis._ownerDocument._agentOptions,\n        strictSSL: theThis._ownerDocument._strictSSL,\n        proxy: theThis._ownerDocument._proxy,\n        cookieJar: theThis._ownerDocument._cookieJar,\n        encoding: theThis._ownerDocument._encoding,\n        origin: theThis._ownerDocument.origin,\n        userAgent: window.navigator.userAgent\n      };\n\n      theThis[xhrSymbols.properties] = {\n        beforeSend: false,\n        send: false,\n        timeoutStart: 0,\n        timeoutId: 0,\n        timeoutFn: null,\n        client: null,\n        responseHeaders: {},\n        filteredResponseHeaders: [],\n        responseBuffer: null,\n        responseCache: null,\n        responseTextCache: null,\n        responseXMLCache: null,\n        responseURL: \"\",\n        readyState: XMLHttpRequest.UNSENT,\n        status: 0,\n        statusText: \"\",\n        error: \"\",\n        uploadComplete: false,\n        uploadListener: false,\n\n        // Signifies that we're calling abort() from xhr-utils.js because of a window shutdown.\n        // In that case the termination reason is \"fatal\", not \"end-user abort\".\n        abortError: false,\n\n        cookieJar: theThis._ownerDocument._cookieJar,\n        bufferStepSize: 1 * 1024 * 1024, // pre-allocate buffer increase step size. init value is 1MB\n        totalReceivedChunkSize: 0\n      };\n\n      return theThis;\n    }\n\n    get readyState() {\n      return this[xhrSymbols.properties].readyState;\n    }\n    get status() {\n      return this[xhrSymbols.properties].status;\n    }\n    get statusText() {\n      return this[xhrSymbols.properties].statusText;\n    }\n    get responseType() {\n      return this[xhrSymbols.flag].responseType;\n    }\n    set responseType(responseType) {\n      const flag = this[xhrSymbols.flag];\n      if (this.readyState === XMLHttpRequest.LOADING || this.readyState === XMLHttpRequest.DONE) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (this.readyState === XMLHttpRequest.OPENED && flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      if (!XMLHttpRequestResponseType.has(responseType)) {\n        responseType = \"\";\n      }\n      flag.responseType = responseType;\n    }\n    get response() {\n      const properties = this[xhrSymbols.properties];\n      if (properties.responseCache) {\n        return properties.responseCache;\n      }\n      let res = \"\";\n\n      const responseBuffer = properties.responseBuffer ?\n                             properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) :\n                             null;\n\n      switch (this.responseType) {\n        case \"\":\n        case \"text\": {\n          res = this.responseText;\n          break;\n        }\n        case \"arraybuffer\": {\n          if (!responseBuffer) {\n            return null;\n          }\n          res = (new Uint8Array(responseBuffer)).buffer;\n          break;\n        }\n        case \"blob\": {\n          if (!responseBuffer) {\n            return null;\n          }\n          const contentType = finalMIMEType(this);\n          res = Blob.create([\n            [new Uint8Array(responseBuffer)],\n            { type: contentType || \"\" }\n          ]);\n          break;\n        }\n        case \"document\": {\n          res = this.responseXML;\n          break;\n        }\n        case \"json\": {\n          if (this.readyState !== XMLHttpRequest.DONE || !responseBuffer) {\n            res = null;\n          }\n\n          try {\n            res = parseJSONFromBytes(responseBuffer);\n          } catch (e) {\n            res = null;\n          }\n          break;\n        }\n      }\n      properties.responseCache = res;\n      return res;\n    }\n    get responseText() {\n      const properties = this[xhrSymbols.properties];\n      if (this.responseType !== \"\" && this.responseType !== \"text\") {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (this.readyState !== XMLHttpRequest.LOADING && this.readyState !== XMLHttpRequest.DONE) {\n        return \"\";\n      }\n      if (properties.responseTextCache) {\n        return properties.responseTextCache;\n      }\n      const responseBuffer = properties.responseBuffer ?\n                             properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) :\n                             null;\n\n      if (!responseBuffer) {\n        return \"\";\n      }\n\n      const fallbackEncoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n      const res = whatwgEncoding.decode(responseBuffer, fallbackEncoding);\n\n      properties.responseTextCache = res;\n      return res;\n    }\n    get responseXML() {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (this.responseType !== \"\" && this.responseType !== \"document\") {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (this.readyState !== XMLHttpRequest.DONE) {\n        return null;\n      }\n      if (properties.responseXMLCache) {\n        return properties.responseXMLCache;\n      }\n      const responseBuffer = properties.responseBuffer ?\n                             properties.responseBuffer.slice(0, properties.totalReceivedChunkSize) :\n                             null;\n\n      if (!responseBuffer) {\n        return null;\n      }\n\n      const contentType = finalMIMEType(this);\n      let isHTML = false;\n      let isXML = false;\n      const parsed = MIMEType.parse(contentType);\n      if (parsed) {\n        isHTML = parsed.isHTML();\n        isXML = parsed.isXML();\n        if (!isXML && !isHTML) {\n          return null;\n        }\n      }\n\n      if (this.responseType === \"\" && isHTML) {\n        return null;\n      }\n\n      const encoding = finalCharset(this) || whatwgEncoding.getBOMEncoding(responseBuffer) || \"UTF-8\";\n      const resText = whatwgEncoding.decode(responseBuffer, encoding);\n\n      if (!resText) {\n        return null;\n      }\n      const res = Document.create([], { options: {\n        url: flag.uri,\n        lastModified: new Date(getResponseHeader(this, \"last-modified\")),\n        parsingMode: isHTML ? \"html\" : \"xml\",\n        cookieJar: { setCookieSync: () => undefined, getCookieStringSync: () => \"\" },\n        encoding,\n        parseOptions: this._ownerDocument._parseOptions\n      } });\n      const resImpl = idlUtils.implForWrapper(res);\n      try {\n        resImpl._htmlToDom.appendToDocument(resText, resImpl);\n      } catch (e) {\n        properties.responseXMLCache = null;\n        return null;\n      }\n      res.close();\n      properties.responseXMLCache = res;\n      return res;\n    }\n\n    get responseURL() {\n      return this[xhrSymbols.properties].responseURL;\n    }\n\n    get timeout() {\n      return this[xhrSymbols.flag].timeout;\n    }\n    set timeout(val) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      flag.timeout = val;\n      clearTimeout(properties.timeoutId);\n      if (val > 0 && properties.timeoutFn) {\n        properties.timeoutId = setTimeout(\n          properties.timeoutFn,\n          Math.max(0, val - ((new Date()).getTime() - properties.timeoutStart))\n        );\n      } else {\n        properties.timeoutFn = null;\n        properties.timeoutStart = 0;\n      }\n    }\n    get withCredentials() {\n      return this[xhrSymbols.flag].withCredentials;\n    }\n    set withCredentials(val) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      if (!(this.readyState === XMLHttpRequest.UNSENT || this.readyState === XMLHttpRequest.OPENED)) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      if (properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      flag.withCredentials = val;\n    }\n\n    abort() {\n      const properties = this[xhrSymbols.properties];\n\n      // Terminate the request\n      clearTimeout(properties.timeoutId);\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n\n      const { client } = properties;\n      if (client) {\n        client.abort();\n        properties.client = null;\n      }\n\n      if (properties.abortError) {\n        // Special case that ideally shouldn't be going through the public API at all.\n        // Run the https://xhr.spec.whatwg.org/#handle-errors \"fatal\" steps.\n        properties.readyState = XMLHttpRequest.DONE;\n        properties.send = false;\n        xhrUtils.setResponseToNetworkError(this);\n        return;\n      }\n\n      if ((this.readyState === XMLHttpRequest.OPENED && properties.send) ||\n          this.readyState === XMLHttpRequest.HEADERS_RECEIVED ||\n          this.readyState === XMLHttpRequest.LOADING) {\n        xhrUtils.requestErrorSteps(this, \"abort\");\n      }\n\n      if (this.readyState === XMLHttpRequest.DONE) {\n        properties.readyState = XMLHttpRequest.UNSENT;\n\n        xhrUtils.setResponseToNetworkError(this);\n      }\n    }\n    getAllResponseHeaders() {\n      const properties = this[xhrSymbols.properties];\n      const { readyState } = this;\n      if (readyState === XMLHttpRequest.UNSENT || readyState === XMLHttpRequest.OPENED) {\n        return \"\";\n      }\n      return Object.keys(properties.responseHeaders)\n        .filter(key => properties.filteredResponseHeaders.indexOf(key) === -1)\n        .map(key => [conversions.ByteString(key).toLowerCase(), properties.responseHeaders[key]].join(\": \"))\n        .join(\"\\r\\n\");\n    }\n\n    getResponseHeader(header) {\n      const properties = this[xhrSymbols.properties];\n      const { readyState } = this;\n      if (readyState === XMLHttpRequest.UNSENT || readyState === XMLHttpRequest.OPENED) {\n        return null;\n      }\n      const lcHeader = conversions.ByteString(header).toLowerCase();\n      if (properties.filteredResponseHeaders.find(filtered => lcHeader === filtered.toLowerCase())) {\n        return null;\n      }\n      return getResponseHeader(this, lcHeader);\n    }\n\n    open(method, uri, asynchronous, user, password) {\n      if (!this._ownerDocument) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n      const argumentCount = arguments.length;\n      if (argumentCount < 2) {\n        throw new TypeError(\"Not enough arguments (expected at least 2)\");\n      }\n\n      method = conversions.ByteString(method);\n      uri = conversions.USVString(uri);\n      if (user) {\n        user = conversions.USVString(user);\n      }\n      if (password) {\n        password = conversions.USVString(password);\n      }\n\n      if (!tokenRegexp.test(method)) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n      const upperCaseMethod = method.toUpperCase();\n      if (forbiddenRequestMethods.has(upperCaseMethod)) {\n        throw new DOMException(\"The operation is insecure.\", \"SecurityError\");\n      }\n\n      const { client } = properties;\n      if (client && typeof client.abort === \"function\") {\n        client.abort();\n      }\n\n      if (allowedRequestMethods.has(upperCaseMethod)) {\n        method = upperCaseMethod;\n      }\n      if (typeof asynchronous !== \"undefined\") {\n        flag.synchronous = !asynchronous;\n      } else {\n        flag.synchronous = false;\n      }\n      if (flag.responseType && flag.synchronous) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      if (flag.synchronous && flag.timeout) {\n        throw new DOMException(\"The object does not support the operation or argument.\", \"InvalidAccessError\");\n      }\n      flag.method = method;\n\n      let urlObj;\n      try {\n        urlObj = new URL(uri, documentBaseURLSerialized(this._ownerDocument));\n      } catch (e) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n\n      if (user || (password && !urlObj.username)) {\n        flag.auth = {\n          user,\n          pass: password\n        };\n        urlObj.username = \"\";\n        urlObj.password = \"\";\n      }\n\n      flag.uri = urlObj.href;\n      flag.requestHeaders = {};\n      flag.preflight = false;\n\n      properties.send = false;\n      properties.uploadListener = false;\n      properties.requestBuffer = null;\n      properties.requestCache = null;\n      properties.abortError = false;\n      properties.responseURL = \"\";\n      readyStateChange(this, XMLHttpRequest.OPENED);\n    }\n\n    overrideMimeType(mime) {\n      mime = String(mime);\n\n      const { readyState } = this;\n      if (readyState === XMLHttpRequest.LOADING || readyState === XMLHttpRequest.DONE) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      this[xhrSymbols.flag].overrideMIMEType = \"application/octet-stream\";\n\n      // Waiting for better spec: https://github.com/whatwg/xhr/issues/157\n      const parsed = MIMEType.parse(mime);\n      if (parsed) {\n        this[xhrSymbols.flag].overrideMIMEType = parsed.essence;\n\n        const charset = parsed.parameters.get(\"charset\");\n        if (charset) {\n          this[xhrSymbols.flag].overrideCharset = whatwgEncoding.labelToName(charset);\n        }\n      }\n    }\n\n    send(body) {\n      body = coerceBodyArg(body);\n\n      // Not per spec, but per tests: https://github.com/whatwg/xhr/issues/65\n      if (!this._ownerDocument) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (this.readyState !== XMLHttpRequest.OPENED || properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      properties.beforeSend = true;\n\n      try {\n        if (flag.method === \"GET\" || flag.method === \"HEAD\") {\n          body = null;\n        }\n\n        if (body !== null) {\n          let encoding = null;\n          let mimeType = null;\n\n          if (Document.isImpl(body)) {\n            encoding = \"UTF-8\";\n            mimeType = (body._parsingMode === \"html\" ? \"text/html\" : \"application/xml\") + \";charset=UTF-8\";\n            flag.body = domToHtml([body]);\n          } else {\n            if (typeof body === \"string\") {\n              encoding = \"UTF-8\";\n            }\n            const { buffer, formData, contentType } = extractBody(body);\n            mimeType = contentType;\n            flag.body = buffer || formData;\n            flag.formData = Boolean(formData);\n          }\n\n          const existingContentType = xhrUtils.getRequestHeader(flag.requestHeaders, \"content-type\");\n          if (mimeType !== null && existingContentType === null) {\n            flag.requestHeaders[\"Content-Type\"] = mimeType;\n          } else if (existingContentType !== null && encoding !== null) {\n            // Waiting for better spec: https://github.com/whatwg/xhr/issues/188. This seems like a good guess at what\n            // the spec will be, in the meantime.\n            const parsed = MIMEType.parse(existingContentType);\n            if (parsed) {\n              const charset = parsed.parameters.get(\"charset\");\n              if (charset && !asciiCaseInsensitiveMatch(charset, encoding) && encoding !== null) {\n                parsed.parameters.set(\"charset\", encoding);\n              }\n              xhrUtils.updateRequestHeader(flag.requestHeaders, \"content-type\", parsed.toString());\n            }\n          }\n        }\n      } finally {\n        if (properties.beforeSend) {\n          properties.beforeSend = false;\n        } else {\n          throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n        }\n      }\n\n      if (Object.keys(idlUtils.implForWrapper(this.upload)._eventListeners).length > 0) {\n        properties.uploadListener = true;\n      }\n\n      // request doesn't like zero-length bodies\n      if (flag.body && flag.body.byteLength === 0) {\n        flag.body = null;\n      }\n\n      if (flag.synchronous) {\n        const flagStr = JSON.stringify(flag, function (k, v) {\n          if (this === flag && k === \"requestManager\") {\n            return null;\n          }\n          if (this === flag && k === \"pool\" && v) {\n            return { maxSockets: v.maxSockets };\n          }\n          return v;\n        });\n        const res = spawnSync(\n          process.execPath,\n          [syncWorkerFile],\n          { input: flagStr }\n        );\n        if (res.status !== 0) {\n          throw new Error(res.stderr.toString());\n        }\n        if (res.error) {\n          if (typeof res.error === \"string\") {\n            res.error = new Error(res.error);\n          }\n          throw res.error;\n        }\n\n        const response = JSON.parse(res.stdout.toString());\n        if (response.properties.responseBuffer && response.properties.responseBuffer.data) {\n          response.properties.responseBuffer = Buffer.from(response.properties.responseBuffer.data);\n        }\n        if (response.properties.cookieJar) {\n          response.properties.cookieJar = tough.CookieJar.deserializeSync(\n            response.properties.cookieJar,\n            this._ownerDocument._cookieJar.store\n          );\n        }\n\n        response.properties.readyState = XMLHttpRequest.LOADING;\n        this[xhrSymbols.properties] = response.properties;\n\n        if (response.properties.error) {\n          xhrUtils.dispatchError(this);\n          throw new DOMException(response.properties.error, \"NetworkError\");\n        } else {\n          const { responseBuffer } = this[xhrSymbols.properties];\n          const contentLength = getResponseHeader(this, \"content-length\") || \"0\";\n          const bufferLength = parseInt(contentLength) || responseBuffer.length;\n          const progressObj = { lengthComputable: false };\n          if (bufferLength !== 0) {\n            progressObj.total = bufferLength;\n            progressObj.loaded = bufferLength;\n            progressObj.lengthComputable = true;\n          }\n          this.dispatchEvent(new ProgressEvent(\"progress\", progressObj));\n          readyStateChange(this, XMLHttpRequest.DONE);\n          this.dispatchEvent(new ProgressEvent(\"load\", progressObj));\n          this.dispatchEvent(new ProgressEvent(\"loadend\", progressObj));\n        }\n      } else {\n        properties.send = true;\n\n        this.dispatchEvent(new ProgressEvent(\"loadstart\"));\n\n        const client = xhrUtils.createClient(this);\n\n        properties.client = client;\n        // For new client, reset totalReceivedChunkSize and bufferStepSize\n        properties.totalReceivedChunkSize = 0;\n        properties.bufferStepSize = 1 * 1024 * 1024;\n\n        properties.origin = flag.origin;\n\n        client.on(\"error\", err => {\n          client.removeAllListeners();\n          properties.error = err;\n          xhrUtils.dispatchError(this);\n        });\n\n        client.on(\"response\", res => receiveResponse(this, res));\n\n        client.on(\"redirect\", () => {\n          const { response } = client;\n          const destUrlObj = new URL(response.request.headers.Referer);\n\n          const urlObj = new URL(response.request.uri.href);\n\n          if (destUrlObj.origin !== urlObj.origin && destUrlObj.origin !== flag.origin) {\n            properties.origin = \"null\";\n          }\n\n          response.request.headers.Origin = properties.origin;\n\n          if (flag.origin !== destUrlObj.origin &&\n              destUrlObj.protocol !== \"data:\") {\n            if (!xhrUtils.validCORSHeaders(this, response, flag, properties, flag.origin)) {\n              return;\n            }\n            if (urlObj.username || urlObj.password) {\n              properties.error = \"Userinfo forbidden in cors redirect\";\n              xhrUtils.dispatchError(this);\n            }\n          }\n        });\n        if (body !== null && body !== \"\") {\n          properties.uploadComplete = false;\n          setDispatchProgressEvents(this);\n        } else {\n          properties.uploadComplete = true;\n        }\n        if (this.timeout > 0) {\n          properties.timeoutStart = (new Date()).getTime();\n          properties.timeoutFn = () => {\n            client.abort();\n            if (!(this.readyState === XMLHttpRequest.UNSENT ||\n                (this.readyState === XMLHttpRequest.OPENED && !properties.send) ||\n                this.readyState === XMLHttpRequest.DONE)) {\n              properties.send = false;\n              let stateChanged = false;\n              if (!properties.uploadComplete) {\n                this.upload.dispatchEvent(new ProgressEvent(\"progress\"));\n                readyStateChange(this, XMLHttpRequest.DONE);\n                this.upload.dispatchEvent(new ProgressEvent(\"timeout\"));\n                this.upload.dispatchEvent(new ProgressEvent(\"loadend\"));\n                stateChanged = true;\n              }\n              this.dispatchEvent(new ProgressEvent(\"progress\"));\n              if (!stateChanged) {\n                readyStateChange(this, XMLHttpRequest.DONE);\n              }\n              this.dispatchEvent(new ProgressEvent(\"timeout\"));\n              this.dispatchEvent(new ProgressEvent(\"loadend\"));\n            }\n            properties.readyState = XMLHttpRequest.UNSENT;\n          };\n          properties.timeoutId = setTimeout(properties.timeoutFn, this.timeout);\n        }\n      }\n      flag.body = undefined;\n      flag.formData = false;\n    }\n\n    setRequestHeader(header, value) {\n      const flag = this[xhrSymbols.flag];\n      const properties = this[xhrSymbols.properties];\n\n      if (arguments.length !== 2) {\n        throw new TypeError(\"2 arguments required for setRequestHeader\");\n      }\n      header = conversions.ByteString(header);\n      value = conversions.ByteString(value);\n\n      if (this.readyState !== XMLHttpRequest.OPENED || properties.send) {\n        throw new DOMException(\"The object is in an invalid state.\", \"InvalidStateError\");\n      }\n\n      value = normalizeHeaderValue(value);\n\n      if (!tokenRegexp.test(header) || !fieldValueRegexp.test(value)) {\n        throw new DOMException(\"The string did not match the expected pattern.\", \"SyntaxError\");\n      }\n\n      const lcHeader = header.toLowerCase();\n\n      if (forbiddenRequestHeaders.has(lcHeader) || lcHeader.startsWith(\"sec-\") || lcHeader.startsWith(\"proxy-\")) {\n        return;\n      }\n\n      const keys = Object.keys(flag.requestHeaders);\n      let n = keys.length;\n      while (n--) {\n        const key = keys[n];\n        if (key.toLowerCase() === lcHeader) {\n          flag.requestHeaders[key] += \", \" + value;\n          return;\n        }\n      }\n      flag.requestHeaders[header] = value;\n    }\n\n    get _ownerDocument() {\n      return idlUtils.implForWrapper(window.document);\n    }\n  }\n\n  Object.defineProperty(XMLHttpRequest.prototype, Symbol.toStringTag, {\n    value: \"XMLHttpRequest\",\n    writable: false,\n    enumerable: false,\n    configurable: true\n  });\n\n  setupForSimpleEventAccessors(XMLHttpRequest.prototype, [\"readystatechange\"]);\n\n  addConstants(XMLHttpRequest, {\n    UNSENT: 0,\n    OPENED: 1,\n    HEADERS_RECEIVED: 2,\n    LOADING: 3,\n    DONE: 4\n  });\n\n  function readyStateChange(xhr, readyState) {\n    const properties = xhr[xhrSymbols.properties];\n    if (properties.readyState === readyState) {\n      return;\n    }\n\n    properties.readyState = readyState;\n\n    const readyStateChangeEvent = new Event(\"readystatechange\");\n    xhr.dispatchEvent(readyStateChangeEvent);\n  }\n\n  function receiveResponse(xhr, response) {\n    const properties = xhr[xhrSymbols.properties];\n    const flag = xhr[xhrSymbols.flag];\n\n    const { statusCode } = response;\n\n    let byteOffset = 0;\n\n    const headers = {};\n    const filteredResponseHeaders = [];\n    const headerMap = {};\n    const { rawHeaders } = response;\n    const n = Number(rawHeaders.length);\n    for (let i = 0; i < n; i += 2) {\n      const k = rawHeaders[i];\n      const kl = k.toLowerCase();\n      const v = rawHeaders[i + 1];\n      if (uniqueResponseHeaders.has(kl)) {\n        if (headerMap[kl] !== undefined) {\n          delete headers[headerMap[kl]];\n        }\n        headers[k] = v;\n      } else if (headerMap[kl] !== undefined) {\n        headers[headerMap[kl]] += \", \" + v;\n      } else {\n        headers[k] = v;\n      }\n      headerMap[kl] = k;\n    }\n\n    const destUrlObj = new URL(response.request.uri.href);\n    if (properties.origin !== destUrlObj.origin &&\n        destUrlObj.protocol !== \"data:\") {\n      if (!xhrUtils.validCORSHeaders(xhr, response, flag, properties, properties.origin)) {\n        return;\n      }\n      const acehStr = response.headers[\"access-control-expose-headers\"];\n      const aceh = new Set(acehStr ? acehStr.trim().toLowerCase().split(xhrUtils.headerListSeparatorRegexp) : []);\n      for (const header in headers) {\n        const lcHeader = header.toLowerCase();\n        if (!corsSafeResponseHeaders.has(lcHeader) && !aceh.has(lcHeader)) {\n          filteredResponseHeaders.push(header);\n        }\n      }\n    }\n\n    for (const header in headers) {\n      const lcHeader = header.toLowerCase();\n      if (forbiddenResponseHeaders.has(lcHeader)) {\n        filteredResponseHeaders.push(header);\n      }\n    }\n\n    properties.responseURL = destUrlObj.href;\n\n    properties.status = statusCode;\n    properties.statusText = response.statusMessage || HTTP_STATUS_CODES[statusCode] || \"\";\n\n    properties.responseHeaders = headers;\n    properties.filteredResponseHeaders = filteredResponseHeaders;\n\n    const contentLength = getResponseHeader(xhr, \"content-length\") || \"0\";\n    const bufferLength = parseInt(contentLength) || 0;\n    const progressObj = { lengthComputable: false };\n    let lastProgressReported;\n    if (bufferLength !== 0) {\n      progressObj.total = bufferLength;\n      progressObj.loaded = 0;\n      progressObj.lengthComputable = true;\n    }\n    // pre-allocate buffer.\n    properties.responseBuffer = Buffer.alloc(properties.bufferStepSize);\n    properties.responseCache = null;\n    properties.responseTextCache = null;\n    properties.responseXMLCache = null;\n    readyStateChange(xhr, XMLHttpRequest.HEADERS_RECEIVED);\n\n    if (!properties.client) {\n      // The request was aborted in reaction to the readystatechange event.\n      return;\n    }\n\n    // Can't use the client since the client gets the post-ungzipping bytes (which can be greater than the\n    // Content-Length).\n    response.on(\"data\", chunk => {\n      byteOffset += chunk.length;\n      progressObj.loaded = byteOffset;\n    });\n\n    properties.client.on(\"data\", chunk => {\n      properties.totalReceivedChunkSize += chunk.length;\n      if (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n        properties.bufferStepSize *= 2;\n        while (properties.totalReceivedChunkSize >= properties.bufferStepSize) {\n          properties.bufferStepSize *= 2;\n        }\n        const tmpBuf = Buffer.alloc(properties.bufferStepSize);\n        properties.responseBuffer.copy(tmpBuf, 0, 0, properties.responseBuffer.length);\n        properties.responseBuffer = tmpBuf;\n      }\n      chunk.copy(properties.responseBuffer, properties.totalReceivedChunkSize - chunk.length, 0, chunk.length);\n      properties.responseCache = null;\n      properties.responseTextCache = null;\n      properties.responseXMLCache = null;\n\n      if (properties.readyState === XMLHttpRequest.HEADERS_RECEIVED) {\n        properties.readyState = XMLHttpRequest.LOADING;\n      }\n      xhr.dispatchEvent(new Event(\"readystatechange\"));\n\n      if (progressObj.total !== progressObj.loaded || properties.totalReceivedChunkSize === byteOffset) {\n        if (lastProgressReported !== progressObj.loaded) {\n          // This is a necessary check in the gzip case where we can be getting new data from the client, as it\n          // un-gzips, but no new data has been gotten from the response, so we should not fire a progress event.\n          lastProgressReported = progressObj.loaded;\n          xhr.dispatchEvent(new ProgressEvent(\"progress\", progressObj));\n        }\n      }\n    });\n    properties.client.on(\"end\", () => {\n      clearTimeout(properties.timeoutId);\n      properties.timeoutFn = null;\n      properties.timeoutStart = 0;\n      properties.client = null;\n      xhr.dispatchEvent(new ProgressEvent(\"progress\", progressObj));\n      readyStateChange(xhr, XMLHttpRequest.DONE);\n      xhr.dispatchEvent(new ProgressEvent(\"load\", progressObj));\n      xhr.dispatchEvent(new ProgressEvent(\"loadend\", progressObj));\n    });\n  }\n\n  function setDispatchProgressEvents(xhr) {\n    const properties = xhr[xhrSymbols.properties];\n    const { client } = properties;\n    const { upload } = xhr;\n\n    let total = 0;\n    let lengthComputable = false;\n    const length = client.headers && parseInt(xhrUtils.getRequestHeader(client.headers, \"content-length\"));\n    if (length) {\n      total = length;\n      lengthComputable = true;\n    }\n    const initProgress = {\n      lengthComputable,\n      total,\n      loaded: 0\n    };\n\n    if (properties.uploadListener) {\n      upload.dispatchEvent(new ProgressEvent(\"loadstart\", initProgress));\n    }\n\n    client.on(\"request\", req => {\n      req.on(\"response\", () => {\n        properties.uploadComplete = true;\n\n        if (!properties.uploadListener) {\n          return;\n        }\n\n        const progress = {\n          lengthComputable,\n          total,\n          loaded: total\n        };\n        upload.dispatchEvent(new ProgressEvent(\"progress\", progress));\n        upload.dispatchEvent(new ProgressEvent(\"load\", progress));\n        upload.dispatchEvent(new ProgressEvent(\"loadend\", progress));\n      });\n    });\n  }\n\n  return XMLHttpRequest;\n};\n\nfunction finalMIMEType(xhr) {\n  const flag = xhr[xhrSymbols.flag];\n  return flag.overrideMIMEType || getResponseHeader(xhr, \"content-type\");\n}\n\nfunction finalCharset(xhr) {\n  const flag = xhr[xhrSymbols.flag];\n  if (flag.overrideCharset) {\n    return flag.overrideCharset;\n  }\n  const parsedContentType = MIMEType.parse(getResponseHeader(xhr, \"content-type\"));\n  if (parsedContentType) {\n    return whatwgEncoding.labelToName(parsedContentType.parameters.get(\"charset\"));\n  }\n  return null;\n}\n\nfunction getResponseHeader(xhr, lcHeader) {\n  const properties = xhr[xhrSymbols.properties];\n  const keys = Object.keys(properties.responseHeaders);\n  let n = keys.length;\n  while (n--) {\n    const key = keys[n];\n    if (key.toLowerCase() === lcHeader) {\n      return properties.responseHeaders[key];\n    }\n  }\n  return null;\n}\n\nfunction normalizeHeaderValue(value) {\n  return value.replace(/^[\\x09\\x0A\\x0D\\x20]+/, \"\").replace(/[\\x09\\x0A\\x0D\\x20]+$/, \"\");\n}\n\nfunction coerceBodyArg(body) {\n  // Implements the IDL conversion for `optional (Document or BodyInit)? body = null`\n\n  if (body === undefined || body === null) {\n    return null;\n  }\n\n  if (body instanceof ArrayBuffer || ArrayBuffer.isView(body)) {\n    return body;\n  }\n\n  const impl = idlUtils.implForWrapper(body);\n  if (impl) {\n    // TODO: allow URLSearchParams or ReadableStream\n    if (Blob.isImpl(impl) || FormData.isImpl(impl) || Document.isImpl(impl)) {\n      return impl;\n    }\n  }\n\n  return conversions.USVString(body);\n}\n\nfunction extractBody(bodyInit) {\n  // https://fetch.spec.whatwg.org/#concept-bodyinit-extract\n  // except we represent the body as a Node.js Buffer instead,\n  // or a special case for FormData since we want request to handle that. Probably it would be\n  // cleaner (and allow a future without request) if we did the form encoding ourself.\n\n  if (Blob.isImpl(bodyInit)) {\n    return {\n      buffer: bodyInit._buffer,\n      contentType: bodyInit.type === \"\" ? null : bodyInit.type\n    };\n  } else if (bodyInit instanceof ArrayBuffer) {\n    return {\n      buffer: Buffer.from(bodyInit),\n      contentType: null\n    };\n  } else if (ArrayBuffer.isView(bodyInit)) {\n    return {\n      buffer: Buffer.from(bodyInit.buffer, bodyInit.byteOffset, bodyInit.byteLength),\n      contentType: null\n    };\n  } else if (FormData.isImpl(bodyInit)) {\n    const formData = [];\n    for (const entry of bodyInit._entries) {\n      let val;\n      if (Blob.isImpl(entry.value)) {\n        const blob = entry.value;\n        val = {\n          name: entry.name,\n          value: blob._buffer,\n          options: {\n            filename: blob.name,\n            contentType: blob.type,\n            knownLength: blob.size\n          }\n        };\n      } else {\n        val = entry;\n      }\n\n      formData.push(val);\n    }\n\n    return { formData };\n  }\n\n  // Must be a string\n  return {\n    buffer: Buffer.from(bodyInit, \"utf-8\"),\n    contentType: \"text/plain;charset=UTF-8\"\n  };\n}\n"],"mappings":"AAAA,YAAY;;AAEZ,MAAMA,iBAAiB,GAAGC,OAAO,CAAC,MAAM,CAAC,CAACC,YAAY;AACtD,MAAM;EAAEC;AAAU,CAAC,GAAGF,OAAO,CAAC,eAAe,CAAC;AAC9C,MAAM;EAAEG;AAAI,CAAC,GAAGH,OAAO,CAAC,YAAY,CAAC;AACrC,MAAMI,cAAc,GAAGJ,OAAO,CAAC,iBAAiB,CAAC;AACjD,MAAMK,KAAK,GAAGL,OAAO,CAAC,cAAc,CAAC;AACrC,MAAMM,QAAQ,GAAGN,OAAO,CAAC,iBAAiB,CAAC;AAC3C,MAAMO,WAAW,GAAGP,OAAO,CAAC,oBAAoB,CAAC;AAEjD,MAAMQ,QAAQ,GAAGR,OAAO,CAAC,aAAa,CAAC;AACvC,MAAMS,YAAY,GAAGT,OAAO,CAAC,cAAc,CAAC;AAC5C,MAAMU,UAAU,GAAGV,OAAO,CAAC,0BAA0B,CAAC;AACtD,MAAM;EAAEW;AAAa,CAAC,GAAGX,OAAO,CAAC,UAAU,CAAC;AAC5C,MAAM;EAAEY;AAA0B,CAAC,GAAGZ,OAAO,CAAC,6BAA6B,CAAC;AAC5E,MAAM;EAAEa;AAA0B,CAAC,GAAGb,OAAO,CAAC,mBAAmB,CAAC;AAClE,MAAMc,QAAQ,GAAGd,OAAO,CAAC,mBAAmB,CAAC;AAC7C,MAAMe,QAAQ,GAAGf,OAAO,CAAC,sBAAsB,CAAC;AAChD,MAAMgB,IAAI,GAAGhB,OAAO,CAAC,kBAAkB,CAAC;AACxC,MAAMiB,QAAQ,GAAGjB,OAAO,CAAC,sBAAsB,CAAC;AAChD,MAAMkB,yBAAyB,GAAGlB,OAAO,CAAC,uCAAuC,CAAC;AAClF,MAAMmB,oBAAoB,GAAGnB,OAAO,CAAC,kCAAkC,CAAC;AACxE,MAAM;EAAEoB;AAAU,CAAC,GAAGpB,OAAO,CAAC,sBAAsB,CAAC;AACrD,MAAM;EAAEqB;AAA6B,CAAC,GAAGrB,OAAO,CAAC,iCAAiC,CAAC;AACnF,MAAM;EAAEsB;AAAmB,CAAC,GAAGtB,OAAO,CAAC,gBAAgB,CAAC;AAExD,MAAMuB,cAAc,GAAGvB,OAAO,CAACwB,OAAO,GAAGxB,OAAO,CAACwB,OAAO,CAAC,sBAAsB,CAAC,GAAG,IAAI;AAEvF,MAAMC,WAAW,GAAG,gCAAgC;AACpD,MAAMC,gBAAgB,GAAG,uEAAuE;AAEhG,MAAMC,uBAAuB,GAAG,IAAIC,GAAG,CAAC,CACtC,gBAAgB,EAChB,iBAAiB,EACjB,gCAAgC,EAChC,+BAA+B,EAC/B,YAAY,EACZ,gBAAgB,EAChB,QAAQ,EACR,SAAS,EACT,MAAM,EACN,KAAK,EACL,QAAQ,EACR,MAAM,EACN,YAAY,EACZ,QAAQ,EACR,SAAS,EACT,IAAI,EACJ,SAAS,EACT,mBAAmB,EACnB,SAAS,EACT,KAAK,CACN,CAAC;AACF,MAAMC,wBAAwB,GAAG,IAAID,GAAG,CAAC,CACvC,YAAY,EACZ,aAAa,CACd,CAAC;AACF,MAAME,qBAAqB,GAAG,IAAIF,GAAG,CAAC,CACpC,cAAc,EACd,gBAAgB,EAChB,YAAY,EACZ,SAAS,EACT,MAAM,EACN,eAAe,EACf,qBAAqB,EACrB,mBAAmB,EACnB,qBAAqB,EACrB,MAAM,EACN,UAAU,EACV,cAAc,CACf,CAAC;AACF,MAAMG,uBAAuB,GAAG,IAAIH,GAAG,CAAC,CACtC,eAAe,EACf,kBAAkB,EAClB,cAAc,EACd,SAAS,EACT,eAAe,EACf,QAAQ,CACT,CAAC;AAGF,MAAMI,qBAAqB,GAAG,IAAIJ,GAAG,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;AAC1F,MAAMK,uBAAuB,GAAG,IAAIL,GAAG,CAAC,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;AAEtE,MAAMM,0BAA0B,GAAG,IAAIN,GAAG,CAAC,CACzC,EAAE,EACF,aAAa,EACb,MAAM,EACN,UAAU,EACV,MAAM,EACN,MAAM,CACP,CAAC;AAEFO,MAAM,CAACC,OAAO,GAAG,SAASC,oBAAoBA,CAACC,MAAM,EAAE;EACrD,MAAM;IAAEC,KAAK;IAAEC;EAAc,CAAC,GAAGF,MAAM;EAEvC,MAAMG,cAAc,SAASvB,yBAAyB,CAACwB,SAAS,CAAC;IAC/DC,WAAWA,CAAA,EAAG;MAAE;MACd,MAAMC,OAAO,GAAGC,MAAM,CAACC,MAAM,CAACC,GAAG,CAACC,MAAM,CAACC,SAAS,CAAC;MACnD/B,yBAAyB,CAACgC,KAAK,CAACN,OAAO,CAAC;MACxCA,OAAO,CAACO,MAAM,GAAGhC,oBAAoB,CAAC2B,MAAM,CAAC,CAAC;MAC9CF,OAAO,CAACO,MAAM,CAACC,cAAc,GAAGd,MAAM,CAACe,QAAQ;MAE/CT,OAAO,CAAClC,UAAU,CAAC4C,IAAI,CAAC,GAAG;QACzBC,WAAW,EAAE,KAAK;QAClBC,eAAe,EAAE,KAAK;QACtBC,QAAQ,EAAE,IAAI;QACdC,IAAI,EAAE,IAAI;QACVC,MAAM,EAAEC,SAAS;QACjBC,YAAY,EAAE,EAAE;QAChBC,cAAc,EAAE,CAAC,CAAC;QAClBC,QAAQ,EAAEnB,OAAO,CAACQ,cAAc,CAACjD,GAAG;QACpC6D,GAAG,EAAE,EAAE;QACPC,OAAO,EAAE,CAAC;QACVC,IAAI,EAAEN,SAAS;QACfO,QAAQ,EAAE,KAAK;QACfC,SAAS,EAAE,KAAK;QAChBC,cAAc,EAAEzB,OAAO,CAACQ,cAAc,CAACkB,eAAe;QACtDC,IAAI,EAAE3B,OAAO,CAACQ,cAAc,CAACoB,KAAK;QAClCC,YAAY,EAAE7B,OAAO,CAACQ,cAAc,CAACsB,aAAa;QAClDC,SAAS,EAAE/B,OAAO,CAACQ,cAAc,CAACwB,UAAU;QAC5CC,KAAK,EAAEjC,OAAO,CAACQ,cAAc,CAAC0B,MAAM;QACpCC,SAAS,EAAEnC,OAAO,CAACQ,cAAc,CAAC4B,UAAU;QAC5CC,QAAQ,EAAErC,OAAO,CAACQ,cAAc,CAAC8B,SAAS;QAC1CC,MAAM,EAAEvC,OAAO,CAACQ,cAAc,CAAC+B,MAAM;QACrCC,SAAS,EAAE9C,MAAM,CAAC+C,SAAS,CAACD;MAC9B,CAAC;MAEDxC,OAAO,CAAClC,UAAU,CAAC4E,UAAU,CAAC,GAAG;QAC/BC,UAAU,EAAE,KAAK;QACjBC,IAAI,EAAE,KAAK;QACXC,YAAY,EAAE,CAAC;QACfC,SAAS,EAAE,CAAC;QACZC,SAAS,EAAE,IAAI;QACfC,MAAM,EAAE,IAAI;QACZC,eAAe,EAAE,CAAC,CAAC;QACnBC,uBAAuB,EAAE,EAAE;QAC3BC,cAAc,EAAE,IAAI;QACpBC,aAAa,EAAE,IAAI;QACnBC,iBAAiB,EAAE,IAAI;QACvBC,gBAAgB,EAAE,IAAI;QACtBC,WAAW,EAAE,EAAE;QACfC,UAAU,EAAE3D,cAAc,CAAC4D,MAAM;QACjCC,MAAM,EAAE,CAAC;QACTC,UAAU,EAAE,EAAE;QACdC,KAAK,EAAE,EAAE;QACTC,cAAc,EAAE,KAAK;QACrBC,cAAc,EAAE,KAAK;QAErB;QACA;QACAC,UAAU,EAAE,KAAK;QAEjB5B,SAAS,EAAEnC,OAAO,CAACQ,cAAc,CAAC4B,UAAU;QAC5C4B,cAAc,EAAE,CAAC,GAAG,IAAI,GAAG,IAAI;QAAE;QACjCC,sBAAsB,EAAE;MAC1B,CAAC;MAED,OAAOjE,OAAO;IAChB;IAEA,IAAIwD,UAAUA,CAAA,EAAG;MACf,OAAO,IAAI,CAAC1F,UAAU,CAAC4E,UAAU,CAAC,CAACc,UAAU;IAC/C;IACA,IAAIE,MAAMA,CAAA,EAAG;MACX,OAAO,IAAI,CAAC5F,UAAU,CAAC4E,UAAU,CAAC,CAACgB,MAAM;IAC3C;IACA,IAAIC,UAAUA,CAAA,EAAG;MACf,OAAO,IAAI,CAAC7F,UAAU,CAAC4E,UAAU,CAAC,CAACiB,UAAU;IAC/C;IACA,IAAI1C,YAAYA,CAAA,EAAG;MACjB,OAAO,IAAI,CAACnD,UAAU,CAAC4C,IAAI,CAAC,CAACO,YAAY;IAC3C;IACA,IAAIA,YAAYA,CAACA,YAAY,EAAE;MAC7B,MAAMP,IAAI,GAAG,IAAI,CAAC5C,UAAU,CAAC4C,IAAI,CAAC;MAClC,IAAI,IAAI,CAAC8C,UAAU,KAAK3D,cAAc,CAACqE,OAAO,IAAI,IAAI,CAACV,UAAU,KAAK3D,cAAc,CAACsE,IAAI,EAAE;QACzF,MAAM,IAAItG,YAAY,CAAC,oCAAoC,EAAE,mBAAmB,CAAC;MACnF;MACA,IAAI,IAAI,CAAC2F,UAAU,KAAK3D,cAAc,CAACuE,MAAM,IAAI1D,IAAI,CAACC,WAAW,EAAE;QACjE,MAAM,IAAI9C,YAAY,CAAC,wDAAwD,EAAE,oBAAoB,CAAC;MACxG;MACA,IAAI,CAACyB,0BAA0B,CAAC+E,GAAG,CAACpD,YAAY,CAAC,EAAE;QACjDA,YAAY,GAAG,EAAE;MACnB;MACAP,IAAI,CAACO,YAAY,GAAGA,YAAY;IAClC;IACA,IAAIqD,QAAQA,CAAA,EAAG;MACb,MAAM5B,UAAU,GAAG,IAAI,CAAC5E,UAAU,CAAC4E,UAAU,CAAC;MAC9C,IAAIA,UAAU,CAACU,aAAa,EAAE;QAC5B,OAAOV,UAAU,CAACU,aAAa;MACjC;MACA,IAAImB,GAAG,GAAG,EAAE;MAEZ,MAAMpB,cAAc,GAAGT,UAAU,CAACS,cAAc,GACzBT,UAAU,CAACS,cAAc,CAACqB,KAAK,CAAC,CAAC,EAAE9B,UAAU,CAACuB,sBAAsB,CAAC,GACrE,IAAI;MAE3B,QAAQ,IAAI,CAAChD,YAAY;QACvB,KAAK,EAAE;QACP,KAAK,MAAM;UAAE;YACXsD,GAAG,GAAG,IAAI,CAACE,YAAY;YACvB;UACF;QACA,KAAK,aAAa;UAAE;YAClB,IAAI,CAACtB,cAAc,EAAE;cACnB,OAAO,IAAI;YACb;YACAoB,GAAG,GAAI,IAAIG,UAAU,CAACvB,cAAc,CAAC,CAAEwB,MAAM;YAC7C;UACF;QACA,KAAK,MAAM;UAAE;YACX,IAAI,CAACxB,cAAc,EAAE;cACnB,OAAO,IAAI;YACb;YACA,MAAMyB,WAAW,GAAGC,aAAa,CAAC,IAAI,CAAC;YACvCN,GAAG,GAAGnG,IAAI,CAAC8B,MAAM,CAAC,CAChB,CAAC,IAAIwE,UAAU,CAACvB,cAAc,CAAC,CAAC,EAChC;cAAE2B,IAAI,EAAEF,WAAW,IAAI;YAAG,CAAC,CAC5B,CAAC;YACF;UACF;QACA,KAAK,UAAU;UAAE;YACfL,GAAG,GAAG,IAAI,CAACQ,WAAW;YACtB;UACF;QACA,KAAK,MAAM;UAAE;YACX,IAAI,IAAI,CAACvB,UAAU,KAAK3D,cAAc,CAACsE,IAAI,IAAI,CAAChB,cAAc,EAAE;cAC9DoB,GAAG,GAAG,IAAI;YACZ;YAEA,IAAI;cACFA,GAAG,GAAG7F,kBAAkB,CAACyE,cAAc,CAAC;YAC1C,CAAC,CAAC,OAAO6B,CAAC,EAAE;cACVT,GAAG,GAAG,IAAI;YACZ;YACA;UACF;MACF;MACA7B,UAAU,CAACU,aAAa,GAAGmB,GAAG;MAC9B,OAAOA,GAAG;IACZ;IACA,IAAIE,YAAYA,CAAA,EAAG;MACjB,MAAM/B,UAAU,GAAG,IAAI,CAAC5E,UAAU,CAAC4E,UAAU,CAAC;MAC9C,IAAI,IAAI,CAACzB,YAAY,KAAK,EAAE,IAAI,IAAI,CAACA,YAAY,KAAK,MAAM,EAAE;QAC5D,MAAM,IAAIpD,YAAY,CAAC,oCAAoC,EAAE,mBAAmB,CAAC;MACnF;MACA,IAAI,IAAI,CAAC2F,UAAU,KAAK3D,cAAc,CAACqE,OAAO,IAAI,IAAI,CAACV,UAAU,KAAK3D,cAAc,CAACsE,IAAI,EAAE;QACzF,OAAO,EAAE;MACX;MACA,IAAIzB,UAAU,CAACW,iBAAiB,EAAE;QAChC,OAAOX,UAAU,CAACW,iBAAiB;MACrC;MACA,MAAMF,cAAc,GAAGT,UAAU,CAACS,cAAc,GACzBT,UAAU,CAACS,cAAc,CAACqB,KAAK,CAAC,CAAC,EAAE9B,UAAU,CAACuB,sBAAsB,CAAC,GACrE,IAAI;MAE3B,IAAI,CAACd,cAAc,EAAE;QACnB,OAAO,EAAE;MACX;MAEA,MAAM8B,gBAAgB,GAAGC,YAAY,CAAC,IAAI,CAAC,IAAI1H,cAAc,CAAC2H,cAAc,CAAChC,cAAc,CAAC,IAAI,OAAO;MACvG,MAAMoB,GAAG,GAAG/G,cAAc,CAAC4H,MAAM,CAACjC,cAAc,EAAE8B,gBAAgB,CAAC;MAEnEvC,UAAU,CAACW,iBAAiB,GAAGkB,GAAG;MAClC,OAAOA,GAAG;IACZ;IACA,IAAIQ,WAAWA,CAAA,EAAG;MAChB,MAAMrE,IAAI,GAAG,IAAI,CAAC5C,UAAU,CAAC4C,IAAI,CAAC;MAClC,MAAMgC,UAAU,GAAG,IAAI,CAAC5E,UAAU,CAAC4E,UAAU,CAAC;MAC9C,IAAI,IAAI,CAACzB,YAAY,KAAK,EAAE,IAAI,IAAI,CAACA,YAAY,KAAK,UAAU,EAAE;QAChE,MAAM,IAAIpD,YAAY,CAAC,oCAAoC,EAAE,mBAAmB,CAAC;MACnF;MACA,IAAI,IAAI,CAAC2F,UAAU,KAAK3D,cAAc,CAACsE,IAAI,EAAE;QAC3C,OAAO,IAAI;MACb;MACA,IAAIzB,UAAU,CAACY,gBAAgB,EAAE;QAC/B,OAAOZ,UAAU,CAACY,gBAAgB;MACpC;MACA,MAAMH,cAAc,GAAGT,UAAU,CAACS,cAAc,GACzBT,UAAU,CAACS,cAAc,CAACqB,KAAK,CAAC,CAAC,EAAE9B,UAAU,CAACuB,sBAAsB,CAAC,GACrE,IAAI;MAE3B,IAAI,CAACd,cAAc,EAAE;QACnB,OAAO,IAAI;MACb;MAEA,MAAMyB,WAAW,GAAGC,aAAa,CAAC,IAAI,CAAC;MACvC,IAAIQ,MAAM,GAAG,KAAK;MAClB,IAAIC,KAAK,GAAG,KAAK;MACjB,MAAMC,MAAM,GAAG7H,QAAQ,CAAC8H,KAAK,CAACZ,WAAW,CAAC;MAC1C,IAAIW,MAAM,EAAE;QACVF,MAAM,GAAGE,MAAM,CAACF,MAAM,CAAC,CAAC;QACxBC,KAAK,GAAGC,MAAM,CAACD,KAAK,CAAC,CAAC;QACtB,IAAI,CAACA,KAAK,IAAI,CAACD,MAAM,EAAE;UACrB,OAAO,IAAI;QACb;MACF;MAEA,IAAI,IAAI,CAACpE,YAAY,KAAK,EAAE,IAAIoE,MAAM,EAAE;QACtC,OAAO,IAAI;MACb;MAEA,MAAMhD,QAAQ,GAAG6C,YAAY,CAAC,IAAI,CAAC,IAAI1H,cAAc,CAAC2H,cAAc,CAAChC,cAAc,CAAC,IAAI,OAAO;MAC/F,MAAMsC,OAAO,GAAGjI,cAAc,CAAC4H,MAAM,CAACjC,cAAc,EAAEd,QAAQ,CAAC;MAE/D,IAAI,CAACoD,OAAO,EAAE;QACZ,OAAO,IAAI;MACb;MACA,MAAMlB,GAAG,GAAGpG,QAAQ,CAAC+B,MAAM,CAAC,EAAE,EAAE;QAAEwF,OAAO,EAAE;UACzCC,GAAG,EAAEjF,IAAI,CAACU,GAAG;UACbwE,YAAY,EAAE,IAAIC,IAAI,CAACC,iBAAiB,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;UAChEC,WAAW,EAAEV,MAAM,GAAG,MAAM,GAAG,KAAK;UACpClD,SAAS,EAAE;YAAE6D,aAAa,EAAEA,CAAA,KAAMhF,SAAS;YAAEiF,mBAAmB,EAAEA,CAAA,KAAM;UAAG,CAAC;UAC5E5D,QAAQ;UACR6D,YAAY,EAAE,IAAI,CAAC1F,cAAc,CAAC2F;QACpC;MAAE,CAAC,CAAC;MACJ,MAAMC,OAAO,GAAGlI,QAAQ,CAACmI,cAAc,CAAC9B,GAAG,CAAC;MAC5C,IAAI;QACF6B,OAAO,CAACE,UAAU,CAACC,gBAAgB,CAACd,OAAO,EAAEW,OAAO,CAAC;MACvD,CAAC,CAAC,OAAOpB,CAAC,EAAE;QACVtC,UAAU,CAACY,gBAAgB,GAAG,IAAI;QAClC,OAAO,IAAI;MACb;MACAiB,GAAG,CAACiC,KAAK,CAAC,CAAC;MACX9D,UAAU,CAACY,gBAAgB,GAAGiB,GAAG;MACjC,OAAOA,GAAG;IACZ;IAEA,IAAIhB,WAAWA,CAAA,EAAG;MAChB,OAAO,IAAI,CAACzF,UAAU,CAAC4E,UAAU,CAAC,CAACa,WAAW;IAChD;IAEA,IAAIlC,OAAOA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACvD,UAAU,CAAC4C,IAAI,CAAC,CAACW,OAAO;IACtC;IACA,IAAIA,OAAOA,CAACoF,GAAG,EAAE;MACf,MAAM/F,IAAI,GAAG,IAAI,CAAC5C,UAAU,CAAC4C,IAAI,CAAC;MAClC,MAAMgC,UAAU,GAAG,IAAI,CAAC5E,UAAU,CAAC4E,UAAU,CAAC;MAC9C,IAAIhC,IAAI,CAACC,WAAW,EAAE;QACpB,MAAM,IAAI9C,YAAY,CAAC,wDAAwD,EAAE,oBAAoB,CAAC;MACxG;MACA6C,IAAI,CAACW,OAAO,GAAGoF,GAAG;MAClBC,YAAY,CAAChE,UAAU,CAACI,SAAS,CAAC;MAClC,IAAI2D,GAAG,GAAG,CAAC,IAAI/D,UAAU,CAACK,SAAS,EAAE;QACnCL,UAAU,CAACI,SAAS,GAAG6D,UAAU,CAC/BjE,UAAU,CAACK,SAAS,EACpB6D,IAAI,CAACC,GAAG,CAAC,CAAC,EAAEJ,GAAG,IAAK,IAAIZ,IAAI,CAAC,CAAC,CAAEiB,OAAO,CAAC,CAAC,GAAGpE,UAAU,CAACG,YAAY,CAAC,CACtE,CAAC;MACH,CAAC,MAAM;QACLH,UAAU,CAACK,SAAS,GAAG,IAAI;QAC3BL,UAAU,CAACG,YAAY,GAAG,CAAC;MAC7B;IACF;IACA,IAAIjC,eAAeA,CAAA,EAAG;MACpB,OAAO,IAAI,CAAC9C,UAAU,CAAC4C,IAAI,CAAC,CAACE,eAAe;IAC9C;IACA,IAAIA,eAAeA,CAAC6F,GAAG,EAAE;MACvB,MAAM/F,IAAI,GAAG,IAAI,CAAC5C,UAAU,CAAC4C,IAAI,CAAC;MAClC,MAAMgC,UAAU,GAAG,IAAI,CAAC5E,UAAU,CAAC4E,UAAU,CAAC;MAC9C,IAAI,EAAE,IAAI,CAACc,UAAU,KAAK3D,cAAc,CAAC4D,MAAM,IAAI,IAAI,CAACD,UAAU,KAAK3D,cAAc,CAACuE,MAAM,CAAC,EAAE;QAC7F,MAAM,IAAIvG,YAAY,CAAC,oCAAoC,EAAE,mBAAmB,CAAC;MACnF;MACA,IAAI6E,UAAU,CAACE,IAAI,EAAE;QACnB,MAAM,IAAI/E,YAAY,CAAC,oCAAoC,EAAE,mBAAmB,CAAC;MACnF;MACA6C,IAAI,CAACE,eAAe,GAAG6F,GAAG;IAC5B;IAEAM,KAAKA,CAAA,EAAG;MACN,MAAMrE,UAAU,GAAG,IAAI,CAAC5E,UAAU,CAAC4E,UAAU,CAAC;;MAE9C;MACAgE,YAAY,CAAChE,UAAU,CAACI,SAAS,CAAC;MAClCJ,UAAU,CAACK,SAAS,GAAG,IAAI;MAC3BL,UAAU,CAACG,YAAY,GAAG,CAAC;MAE3B,MAAM;QAAEG;MAAO,CAAC,GAAGN,UAAU;MAC7B,IAAIM,MAAM,EAAE;QACVA,MAAM,CAAC+D,KAAK,CAAC,CAAC;QACdrE,UAAU,CAACM,MAAM,GAAG,IAAI;MAC1B;MAEA,IAAIN,UAAU,CAACqB,UAAU,EAAE;QACzB;QACA;QACArB,UAAU,CAACc,UAAU,GAAG3D,cAAc,CAACsE,IAAI;QAC3CzB,UAAU,CAACE,IAAI,GAAG,KAAK;QACvBhF,QAAQ,CAACoJ,yBAAyB,CAAC,IAAI,CAAC;QACxC;MACF;MAEA,IAAK,IAAI,CAACxD,UAAU,KAAK3D,cAAc,CAACuE,MAAM,IAAI1B,UAAU,CAACE,IAAI,IAC7D,IAAI,CAACY,UAAU,KAAK3D,cAAc,CAACoH,gBAAgB,IACnD,IAAI,CAACzD,UAAU,KAAK3D,cAAc,CAACqE,OAAO,EAAE;QAC9CtG,QAAQ,CAACsJ,iBAAiB,CAAC,IAAI,EAAE,OAAO,CAAC;MAC3C;MAEA,IAAI,IAAI,CAAC1D,UAAU,KAAK3D,cAAc,CAACsE,IAAI,EAAE;QAC3CzB,UAAU,CAACc,UAAU,GAAG3D,cAAc,CAAC4D,MAAM;QAE7C7F,QAAQ,CAACoJ,yBAAyB,CAAC,IAAI,CAAC;MAC1C;IACF;IACAG,qBAAqBA,CAAA,EAAG;MACtB,MAAMzE,UAAU,GAAG,IAAI,CAAC5E,UAAU,CAAC4E,UAAU,CAAC;MAC9C,MAAM;QAAEc;MAAW,CAAC,GAAG,IAAI;MAC3B,IAAIA,UAAU,KAAK3D,cAAc,CAAC4D,MAAM,IAAID,UAAU,KAAK3D,cAAc,CAACuE,MAAM,EAAE;QAChF,OAAO,EAAE;MACX;MACA,OAAOnE,MAAM,CAACmH,IAAI,CAAC1E,UAAU,CAACO,eAAe,CAAC,CAC3CoE,MAAM,CAACC,GAAG,IAAI5E,UAAU,CAACQ,uBAAuB,CAACqE,OAAO,CAACD,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CACrEE,GAAG,CAACF,GAAG,IAAI,CAAC3J,WAAW,CAAC8J,UAAU,CAACH,GAAG,CAAC,CAACI,WAAW,CAAC,CAAC,EAAEhF,UAAU,CAACO,eAAe,CAACqE,GAAG,CAAC,CAAC,CAACK,IAAI,CAAC,IAAI,CAAC,CAAC,CACnGA,IAAI,CAAC,MAAM,CAAC;IACjB;IAEA7B,iBAAiBA,CAAC8B,MAAM,EAAE;MACxB,MAAMlF,UAAU,GAAG,IAAI,CAAC5E,UAAU,CAAC4E,UAAU,CAAC;MAC9C,MAAM;QAAEc;MAAW,CAAC,GAAG,IAAI;MAC3B,IAAIA,UAAU,KAAK3D,cAAc,CAAC4D,MAAM,IAAID,UAAU,KAAK3D,cAAc,CAACuE,MAAM,EAAE;QAChF,OAAO,IAAI;MACb;MACA,MAAMyD,QAAQ,GAAGlK,WAAW,CAAC8J,UAAU,CAACG,MAAM,CAAC,CAACF,WAAW,CAAC,CAAC;MAC7D,IAAIhF,UAAU,CAACQ,uBAAuB,CAAC4E,IAAI,CAACC,QAAQ,IAAIF,QAAQ,KAAKE,QAAQ,CAACL,WAAW,CAAC,CAAC,CAAC,EAAE;QAC5F,OAAO,IAAI;MACb;MACA,OAAO5B,iBAAiB,CAAC,IAAI,EAAE+B,QAAQ,CAAC;IAC1C;IAEAG,IAAIA,CAACjH,MAAM,EAAEK,GAAG,EAAE6G,YAAY,EAAEC,IAAI,EAAEC,QAAQ,EAAE;MAC9C,IAAI,CAAC,IAAI,CAAC3H,cAAc,EAAE;QACxB,MAAM,IAAI3C,YAAY,CAAC,oCAAoC,EAAE,mBAAmB,CAAC;MACnF;MACA,MAAM6C,IAAI,GAAG,IAAI,CAAC5C,UAAU,CAAC4C,IAAI,CAAC;MAClC,MAAMgC,UAAU,GAAG,IAAI,CAAC5E,UAAU,CAAC4E,UAAU,CAAC;MAC9C,MAAM0F,aAAa,GAAGC,SAAS,CAACC,MAAM;MACtC,IAAIF,aAAa,GAAG,CAAC,EAAE;QACrB,MAAM,IAAIG,SAAS,CAAC,4CAA4C,CAAC;MACnE;MAEAxH,MAAM,GAAGpD,WAAW,CAAC8J,UAAU,CAAC1G,MAAM,CAAC;MACvCK,GAAG,GAAGzD,WAAW,CAAC6K,SAAS,CAACpH,GAAG,CAAC;MAChC,IAAI8G,IAAI,EAAE;QACRA,IAAI,GAAGvK,WAAW,CAAC6K,SAAS,CAACN,IAAI,CAAC;MACpC;MACA,IAAIC,QAAQ,EAAE;QACZA,QAAQ,GAAGxK,WAAW,CAAC6K,SAAS,CAACL,QAAQ,CAAC;MAC5C;MAEA,IAAI,CAACtJ,WAAW,CAAC4J,IAAI,CAAC1H,MAAM,CAAC,EAAE;QAC7B,MAAM,IAAIlD,YAAY,CAAC,gDAAgD,EAAE,aAAa,CAAC;MACzF;MACA,MAAM6K,eAAe,GAAG3H,MAAM,CAAC4H,WAAW,CAAC,CAAC;MAC5C,IAAItJ,uBAAuB,CAACgF,GAAG,CAACqE,eAAe,CAAC,EAAE;QAChD,MAAM,IAAI7K,YAAY,CAAC,4BAA4B,EAAE,eAAe,CAAC;MACvE;MAEA,MAAM;QAAEmF;MAAO,CAAC,GAAGN,UAAU;MAC7B,IAAIM,MAAM,IAAI,OAAOA,MAAM,CAAC+D,KAAK,KAAK,UAAU,EAAE;QAChD/D,MAAM,CAAC+D,KAAK,CAAC,CAAC;MAChB;MAEA,IAAI3H,qBAAqB,CAACiF,GAAG,CAACqE,eAAe,CAAC,EAAE;QAC9C3H,MAAM,GAAG2H,eAAe;MAC1B;MACA,IAAI,OAAOT,YAAY,KAAK,WAAW,EAAE;QACvCvH,IAAI,CAACC,WAAW,GAAG,CAACsH,YAAY;MAClC,CAAC,MAAM;QACLvH,IAAI,CAACC,WAAW,GAAG,KAAK;MAC1B;MACA,IAAID,IAAI,CAACO,YAAY,IAAIP,IAAI,CAACC,WAAW,EAAE;QACzC,MAAM,IAAI9C,YAAY,CAAC,wDAAwD,EAAE,oBAAoB,CAAC;MACxG;MACA,IAAI6C,IAAI,CAACC,WAAW,IAAID,IAAI,CAACW,OAAO,EAAE;QACpC,MAAM,IAAIxD,YAAY,CAAC,wDAAwD,EAAE,oBAAoB,CAAC;MACxG;MACA6C,IAAI,CAACK,MAAM,GAAGA,MAAM;MAEpB,IAAI6H,MAAM;MACV,IAAI;QACFA,MAAM,GAAG,IAAIrL,GAAG,CAAC6D,GAAG,EAAEpD,yBAAyB,CAAC,IAAI,CAACwC,cAAc,CAAC,CAAC;MACvE,CAAC,CAAC,OAAOwE,CAAC,EAAE;QACV,MAAM,IAAInH,YAAY,CAAC,gDAAgD,EAAE,aAAa,CAAC;MACzF;MAEA,IAAIqK,IAAI,IAAKC,QAAQ,IAAI,CAACS,MAAM,CAACC,QAAS,EAAE;QAC1CnI,IAAI,CAACI,IAAI,GAAG;UACVoH,IAAI;UACJY,IAAI,EAAEX;QACR,CAAC;QACDS,MAAM,CAACC,QAAQ,GAAG,EAAE;QACpBD,MAAM,CAACT,QAAQ,GAAG,EAAE;MACtB;MAEAzH,IAAI,CAACU,GAAG,GAAGwH,MAAM,CAACG,IAAI;MACtBrI,IAAI,CAACQ,cAAc,GAAG,CAAC,CAAC;MACxBR,IAAI,CAACc,SAAS,GAAG,KAAK;MAEtBkB,UAAU,CAACE,IAAI,GAAG,KAAK;MACvBF,UAAU,CAACoB,cAAc,GAAG,KAAK;MACjCpB,UAAU,CAACsG,aAAa,GAAG,IAAI;MAC/BtG,UAAU,CAACuG,YAAY,GAAG,IAAI;MAC9BvG,UAAU,CAACqB,UAAU,GAAG,KAAK;MAC7BrB,UAAU,CAACa,WAAW,GAAG,EAAE;MAC3B2F,gBAAgB,CAAC,IAAI,EAAErJ,cAAc,CAACuE,MAAM,CAAC;IAC/C;IAEA+E,gBAAgBA,CAACC,IAAI,EAAE;MACrBA,IAAI,GAAGC,MAAM,CAACD,IAAI,CAAC;MAEnB,MAAM;QAAE5F;MAAW,CAAC,GAAG,IAAI;MAC3B,IAAIA,UAAU,KAAK3D,cAAc,CAACqE,OAAO,IAAIV,UAAU,KAAK3D,cAAc,CAACsE,IAAI,EAAE;QAC/E,MAAM,IAAItG,YAAY,CAAC,oCAAoC,EAAE,mBAAmB,CAAC;MACnF;MAEA,IAAI,CAACC,UAAU,CAAC4C,IAAI,CAAC,CAAC4I,gBAAgB,GAAG,0BAA0B;;MAEnE;MACA,MAAM/D,MAAM,GAAG7H,QAAQ,CAAC8H,KAAK,CAAC4D,IAAI,CAAC;MACnC,IAAI7D,MAAM,EAAE;QACV,IAAI,CAACzH,UAAU,CAAC4C,IAAI,CAAC,CAAC4I,gBAAgB,GAAG/D,MAAM,CAACgE,OAAO;QAEvD,MAAMC,OAAO,GAAGjE,MAAM,CAACkE,UAAU,CAACC,GAAG,CAAC,SAAS,CAAC;QAChD,IAAIF,OAAO,EAAE;UACX,IAAI,CAAC1L,UAAU,CAAC4C,IAAI,CAAC,CAACiJ,eAAe,GAAGnM,cAAc,CAACoM,WAAW,CAACJ,OAAO,CAAC;QAC7E;MACF;IACF;IAEA5G,IAAIA,CAACtB,IAAI,EAAE;MACTA,IAAI,GAAGuI,aAAa,CAACvI,IAAI,CAAC;;MAE1B;MACA,IAAI,CAAC,IAAI,CAACd,cAAc,EAAE;QACxB,MAAM,IAAI3C,YAAY,CAAC,oCAAoC,EAAE,mBAAmB,CAAC;MACnF;MAEA,MAAM6C,IAAI,GAAG,IAAI,CAAC5C,UAAU,CAAC4C,IAAI,CAAC;MAClC,MAAMgC,UAAU,GAAG,IAAI,CAAC5E,UAAU,CAAC4E,UAAU,CAAC;MAE9C,IAAI,IAAI,CAACc,UAAU,KAAK3D,cAAc,CAACuE,MAAM,IAAI1B,UAAU,CAACE,IAAI,EAAE;QAChE,MAAM,IAAI/E,YAAY,CAAC,oCAAoC,EAAE,mBAAmB,CAAC;MACnF;MAEA6E,UAAU,CAACC,UAAU,GAAG,IAAI;MAE5B,IAAI;QACF,IAAIjC,IAAI,CAACK,MAAM,KAAK,KAAK,IAAIL,IAAI,CAACK,MAAM,KAAK,MAAM,EAAE;UACnDO,IAAI,GAAG,IAAI;QACb;QAEA,IAAIA,IAAI,KAAK,IAAI,EAAE;UACjB,IAAIe,QAAQ,GAAG,IAAI;UACnB,IAAIxB,QAAQ,GAAG,IAAI;UAEnB,IAAI1C,QAAQ,CAAC2L,MAAM,CAACxI,IAAI,CAAC,EAAE;YACzBe,QAAQ,GAAG,OAAO;YAClBxB,QAAQ,GAAG,CAACS,IAAI,CAACyI,YAAY,KAAK,MAAM,GAAG,WAAW,GAAG,iBAAiB,IAAI,gBAAgB;YAC9FrJ,IAAI,CAACY,IAAI,GAAG9C,SAAS,CAAC,CAAC8C,IAAI,CAAC,CAAC;UAC/B,CAAC,MAAM;YACL,IAAI,OAAOA,IAAI,KAAK,QAAQ,EAAE;cAC5Be,QAAQ,GAAG,OAAO;YACpB;YACA,MAAM;cAAEsC,MAAM;cAAEpD,QAAQ;cAAEqD;YAAY,CAAC,GAAGoF,WAAW,CAAC1I,IAAI,CAAC;YAC3DT,QAAQ,GAAG+D,WAAW;YACtBlE,IAAI,CAACY,IAAI,GAAGqD,MAAM,IAAIpD,QAAQ;YAC9Bb,IAAI,CAACa,QAAQ,GAAG0I,OAAO,CAAC1I,QAAQ,CAAC;UACnC;UAEA,MAAM2I,mBAAmB,GAAGtM,QAAQ,CAACuM,gBAAgB,CAACzJ,IAAI,CAACQ,cAAc,EAAE,cAAc,CAAC;UAC1F,IAAIL,QAAQ,KAAK,IAAI,IAAIqJ,mBAAmB,KAAK,IAAI,EAAE;YACrDxJ,IAAI,CAACQ,cAAc,CAAC,cAAc,CAAC,GAAGL,QAAQ;UAChD,CAAC,MAAM,IAAIqJ,mBAAmB,KAAK,IAAI,IAAI7H,QAAQ,KAAK,IAAI,EAAE;YAC5D;YACA;YACA,MAAMkD,MAAM,GAAG7H,QAAQ,CAAC8H,KAAK,CAAC0E,mBAAmB,CAAC;YAClD,IAAI3E,MAAM,EAAE;cACV,MAAMiE,OAAO,GAAGjE,MAAM,CAACkE,UAAU,CAACC,GAAG,CAAC,SAAS,CAAC;cAChD,IAAIF,OAAO,IAAI,CAACvL,yBAAyB,CAACuL,OAAO,EAAEnH,QAAQ,CAAC,IAAIA,QAAQ,KAAK,IAAI,EAAE;gBACjFkD,MAAM,CAACkE,UAAU,CAACW,GAAG,CAAC,SAAS,EAAE/H,QAAQ,CAAC;cAC5C;cACAzE,QAAQ,CAACyM,mBAAmB,CAAC3J,IAAI,CAACQ,cAAc,EAAE,cAAc,EAAEqE,MAAM,CAAC+E,QAAQ,CAAC,CAAC,CAAC;YACtF;UACF;QACF;MACF,CAAC,SAAS;QACR,IAAI5H,UAAU,CAACC,UAAU,EAAE;UACzBD,UAAU,CAACC,UAAU,GAAG,KAAK;QAC/B,CAAC,MAAM;UACL,MAAM,IAAI9E,YAAY,CAAC,oCAAoC,EAAE,mBAAmB,CAAC;QACnF;MACF;MAEA,IAAIoC,MAAM,CAACmH,IAAI,CAAClJ,QAAQ,CAACmI,cAAc,CAAC,IAAI,CAAC9F,MAAM,CAAC,CAACgK,eAAe,CAAC,CAACjC,MAAM,GAAG,CAAC,EAAE;QAChF5F,UAAU,CAACoB,cAAc,GAAG,IAAI;MAClC;;MAEA;MACA,IAAIpD,IAAI,CAACY,IAAI,IAAIZ,IAAI,CAACY,IAAI,CAACkJ,UAAU,KAAK,CAAC,EAAE;QAC3C9J,IAAI,CAACY,IAAI,GAAG,IAAI;MAClB;MAEA,IAAIZ,IAAI,CAACC,WAAW,EAAE;QACpB,MAAM8J,OAAO,GAAGC,IAAI,CAACC,SAAS,CAACjK,IAAI,EAAE,UAAUkK,CAAC,EAAEC,CAAC,EAAE;UACnD,IAAI,IAAI,KAAKnK,IAAI,IAAIkK,CAAC,KAAK,gBAAgB,EAAE;YAC3C,OAAO,IAAI;UACb;UACA,IAAI,IAAI,KAAKlK,IAAI,IAAIkK,CAAC,KAAK,MAAM,IAAIC,CAAC,EAAE;YACtC,OAAO;cAAEC,UAAU,EAAED,CAAC,CAACC;YAAW,CAAC;UACrC;UACA,OAAOD,CAAC;QACV,CAAC,CAAC;QACF,MAAMtG,GAAG,GAAGjH,SAAS,CACnByN,OAAO,CAACC,QAAQ,EAChB,CAACrM,cAAc,CAAC,EAChB;UAAEsM,KAAK,EAAER;QAAQ,CACnB,CAAC;QACD,IAAIlG,GAAG,CAACb,MAAM,KAAK,CAAC,EAAE;UACpB,MAAM,IAAIwH,KAAK,CAAC3G,GAAG,CAAC4G,MAAM,CAACb,QAAQ,CAAC,CAAC,CAAC;QACxC;QACA,IAAI/F,GAAG,CAACX,KAAK,EAAE;UACb,IAAI,OAAOW,GAAG,CAACX,KAAK,KAAK,QAAQ,EAAE;YACjCW,GAAG,CAACX,KAAK,GAAG,IAAIsH,KAAK,CAAC3G,GAAG,CAACX,KAAK,CAAC;UAClC;UACA,MAAMW,GAAG,CAACX,KAAK;QACjB;QAEA,MAAMU,QAAQ,GAAGoG,IAAI,CAAClF,KAAK,CAACjB,GAAG,CAAC6G,MAAM,CAACd,QAAQ,CAAC,CAAC,CAAC;QAClD,IAAIhG,QAAQ,CAAC5B,UAAU,CAACS,cAAc,IAAImB,QAAQ,CAAC5B,UAAU,CAACS,cAAc,CAACkI,IAAI,EAAE;UACjF/G,QAAQ,CAAC5B,UAAU,CAACS,cAAc,GAAGmI,MAAM,CAACC,IAAI,CAACjH,QAAQ,CAAC5B,UAAU,CAACS,cAAc,CAACkI,IAAI,CAAC;QAC3F;QACA,IAAI/G,QAAQ,CAAC5B,UAAU,CAACP,SAAS,EAAE;UACjCmC,QAAQ,CAAC5B,UAAU,CAACP,SAAS,GAAG1E,KAAK,CAAC+N,SAAS,CAACC,eAAe,CAC7DnH,QAAQ,CAAC5B,UAAU,CAACP,SAAS,EAC7B,IAAI,CAAC3B,cAAc,CAAC4B,UAAU,CAACsJ,KACjC,CAAC;QACH;QAEApH,QAAQ,CAAC5B,UAAU,CAACc,UAAU,GAAG3D,cAAc,CAACqE,OAAO;QACvD,IAAI,CAACpG,UAAU,CAAC4E,UAAU,CAAC,GAAG4B,QAAQ,CAAC5B,UAAU;QAEjD,IAAI4B,QAAQ,CAAC5B,UAAU,CAACkB,KAAK,EAAE;UAC7BhG,QAAQ,CAAC+N,aAAa,CAAC,IAAI,CAAC;UAC5B,MAAM,IAAI9N,YAAY,CAACyG,QAAQ,CAAC5B,UAAU,CAACkB,KAAK,EAAE,cAAc,CAAC;QACnE,CAAC,MAAM;UACL,MAAM;YAAET;UAAe,CAAC,GAAG,IAAI,CAACrF,UAAU,CAAC4E,UAAU,CAAC;UACtD,MAAMkJ,aAAa,GAAG9F,iBAAiB,CAAC,IAAI,EAAE,gBAAgB,CAAC,IAAI,GAAG;UACtE,MAAM+F,YAAY,GAAGC,QAAQ,CAACF,aAAa,CAAC,IAAIzI,cAAc,CAACmF,MAAM;UACrE,MAAMyD,WAAW,GAAG;YAAEC,gBAAgB,EAAE;UAAM,CAAC;UAC/C,IAAIH,YAAY,KAAK,CAAC,EAAE;YACtBE,WAAW,CAACE,KAAK,GAAGJ,YAAY;YAChCE,WAAW,CAACG,MAAM,GAAGL,YAAY;YACjCE,WAAW,CAACC,gBAAgB,GAAG,IAAI;UACrC;UACA,IAAI,CAACG,aAAa,CAAC,IAAIvM,aAAa,CAAC,UAAU,EAAEmM,WAAW,CAAC,CAAC;UAC9D7C,gBAAgB,CAAC,IAAI,EAAErJ,cAAc,CAACsE,IAAI,CAAC;UAC3C,IAAI,CAACgI,aAAa,CAAC,IAAIvM,aAAa,CAAC,MAAM,EAAEmM,WAAW,CAAC,CAAC;UAC1D,IAAI,CAACI,aAAa,CAAC,IAAIvM,aAAa,CAAC,SAAS,EAAEmM,WAAW,CAAC,CAAC;QAC/D;MACF,CAAC,MAAM;QACLrJ,UAAU,CAACE,IAAI,GAAG,IAAI;QAEtB,IAAI,CAACuJ,aAAa,CAAC,IAAIvM,aAAa,CAAC,WAAW,CAAC,CAAC;QAElD,MAAMoD,MAAM,GAAGpF,QAAQ,CAACwO,YAAY,CAAC,IAAI,CAAC;QAE1C1J,UAAU,CAACM,MAAM,GAAGA,MAAM;QAC1B;QACAN,UAAU,CAACuB,sBAAsB,GAAG,CAAC;QACrCvB,UAAU,CAACsB,cAAc,GAAG,CAAC,GAAG,IAAI,GAAG,IAAI;QAE3CtB,UAAU,CAACH,MAAM,GAAG7B,IAAI,CAAC6B,MAAM;QAE/BS,MAAM,CAACqJ,EAAE,CAAC,OAAO,EAAEC,GAAG,IAAI;UACxBtJ,MAAM,CAACuJ,kBAAkB,CAAC,CAAC;UAC3B7J,UAAU,CAACkB,KAAK,GAAG0I,GAAG;UACtB1O,QAAQ,CAAC+N,aAAa,CAAC,IAAI,CAAC;QAC9B,CAAC,CAAC;QAEF3I,MAAM,CAACqJ,EAAE,CAAC,UAAU,EAAE9H,GAAG,IAAIiI,eAAe,CAAC,IAAI,EAAEjI,GAAG,CAAC,CAAC;QAExDvB,MAAM,CAACqJ,EAAE,CAAC,UAAU,EAAE,MAAM;UAC1B,MAAM;YAAE/H;UAAS,CAAC,GAAGtB,MAAM;UAC3B,MAAMyJ,UAAU,GAAG,IAAIlP,GAAG,CAAC+G,QAAQ,CAACoI,OAAO,CAACC,OAAO,CAACC,OAAO,CAAC;UAE5D,MAAMhE,MAAM,GAAG,IAAIrL,GAAG,CAAC+G,QAAQ,CAACoI,OAAO,CAACtL,GAAG,CAAC2H,IAAI,CAAC;UAEjD,IAAI0D,UAAU,CAAClK,MAAM,KAAKqG,MAAM,CAACrG,MAAM,IAAIkK,UAAU,CAAClK,MAAM,KAAK7B,IAAI,CAAC6B,MAAM,EAAE;YAC5EG,UAAU,CAACH,MAAM,GAAG,MAAM;UAC5B;UAEA+B,QAAQ,CAACoI,OAAO,CAACC,OAAO,CAACE,MAAM,GAAGnK,UAAU,CAACH,MAAM;UAEnD,IAAI7B,IAAI,CAAC6B,MAAM,KAAKkK,UAAU,CAAClK,MAAM,IACjCkK,UAAU,CAACK,QAAQ,KAAK,OAAO,EAAE;YACnC,IAAI,CAAClP,QAAQ,CAACmP,gBAAgB,CAAC,IAAI,EAAEzI,QAAQ,EAAE5D,IAAI,EAAEgC,UAAU,EAAEhC,IAAI,CAAC6B,MAAM,CAAC,EAAE;cAC7E;YACF;YACA,IAAIqG,MAAM,CAACC,QAAQ,IAAID,MAAM,CAACT,QAAQ,EAAE;cACtCzF,UAAU,CAACkB,KAAK,GAAG,qCAAqC;cACxDhG,QAAQ,CAAC+N,aAAa,CAAC,IAAI,CAAC;YAC9B;UACF;QACF,CAAC,CAAC;QACF,IAAIrK,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,EAAE,EAAE;UAChCoB,UAAU,CAACmB,cAAc,GAAG,KAAK;UACjCmJ,yBAAyB,CAAC,IAAI,CAAC;QACjC,CAAC,MAAM;UACLtK,UAAU,CAACmB,cAAc,GAAG,IAAI;QAClC;QACA,IAAI,IAAI,CAACxC,OAAO,GAAG,CAAC,EAAE;UACpBqB,UAAU,CAACG,YAAY,GAAI,IAAIgD,IAAI,CAAC,CAAC,CAAEiB,OAAO,CAAC,CAAC;UAChDpE,UAAU,CAACK,SAAS,GAAG,MAAM;YAC3BC,MAAM,CAAC+D,KAAK,CAAC,CAAC;YACd,IAAI,EAAE,IAAI,CAACvD,UAAU,KAAK3D,cAAc,CAAC4D,MAAM,IAC1C,IAAI,CAACD,UAAU,KAAK3D,cAAc,CAACuE,MAAM,IAAI,CAAC1B,UAAU,CAACE,IAAK,IAC/D,IAAI,CAACY,UAAU,KAAK3D,cAAc,CAACsE,IAAI,CAAC,EAAE;cAC5CzB,UAAU,CAACE,IAAI,GAAG,KAAK;cACvB,IAAIqK,YAAY,GAAG,KAAK;cACxB,IAAI,CAACvK,UAAU,CAACmB,cAAc,EAAE;gBAC9B,IAAI,CAACtD,MAAM,CAAC4L,aAAa,CAAC,IAAIvM,aAAa,CAAC,UAAU,CAAC,CAAC;gBACxDsJ,gBAAgB,CAAC,IAAI,EAAErJ,cAAc,CAACsE,IAAI,CAAC;gBAC3C,IAAI,CAAC5D,MAAM,CAAC4L,aAAa,CAAC,IAAIvM,aAAa,CAAC,SAAS,CAAC,CAAC;gBACvD,IAAI,CAACW,MAAM,CAAC4L,aAAa,CAAC,IAAIvM,aAAa,CAAC,SAAS,CAAC,CAAC;gBACvDqN,YAAY,GAAG,IAAI;cACrB;cACA,IAAI,CAACd,aAAa,CAAC,IAAIvM,aAAa,CAAC,UAAU,CAAC,CAAC;cACjD,IAAI,CAACqN,YAAY,EAAE;gBACjB/D,gBAAgB,CAAC,IAAI,EAAErJ,cAAc,CAACsE,IAAI,CAAC;cAC7C;cACA,IAAI,CAACgI,aAAa,CAAC,IAAIvM,aAAa,CAAC,SAAS,CAAC,CAAC;cAChD,IAAI,CAACuM,aAAa,CAAC,IAAIvM,aAAa,CAAC,SAAS,CAAC,CAAC;YAClD;YACA8C,UAAU,CAACc,UAAU,GAAG3D,cAAc,CAAC4D,MAAM;UAC/C,CAAC;UACDf,UAAU,CAACI,SAAS,GAAG6D,UAAU,CAACjE,UAAU,CAACK,SAAS,EAAE,IAAI,CAAC1B,OAAO,CAAC;QACvE;MACF;MACAX,IAAI,CAACY,IAAI,GAAGN,SAAS;MACrBN,IAAI,CAACa,QAAQ,GAAG,KAAK;IACvB;IAEA2L,gBAAgBA,CAACtF,MAAM,EAAEuF,KAAK,EAAE;MAC9B,MAAMzM,IAAI,GAAG,IAAI,CAAC5C,UAAU,CAAC4C,IAAI,CAAC;MAClC,MAAMgC,UAAU,GAAG,IAAI,CAAC5E,UAAU,CAAC4E,UAAU,CAAC;MAE9C,IAAI2F,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;QAC1B,MAAM,IAAIC,SAAS,CAAC,2CAA2C,CAAC;MAClE;MACAX,MAAM,GAAGjK,WAAW,CAAC8J,UAAU,CAACG,MAAM,CAAC;MACvCuF,KAAK,GAAGxP,WAAW,CAAC8J,UAAU,CAAC0F,KAAK,CAAC;MAErC,IAAI,IAAI,CAAC3J,UAAU,KAAK3D,cAAc,CAACuE,MAAM,IAAI1B,UAAU,CAACE,IAAI,EAAE;QAChE,MAAM,IAAI/E,YAAY,CAAC,oCAAoC,EAAE,mBAAmB,CAAC;MACnF;MAEAsP,KAAK,GAAGC,oBAAoB,CAACD,KAAK,CAAC;MAEnC,IAAI,CAACtO,WAAW,CAAC4J,IAAI,CAACb,MAAM,CAAC,IAAI,CAAC9I,gBAAgB,CAAC2J,IAAI,CAAC0E,KAAK,CAAC,EAAE;QAC9D,MAAM,IAAItP,YAAY,CAAC,gDAAgD,EAAE,aAAa,CAAC;MACzF;MAEA,MAAMgK,QAAQ,GAAGD,MAAM,CAACF,WAAW,CAAC,CAAC;MAErC,IAAI3I,uBAAuB,CAACsF,GAAG,CAACwD,QAAQ,CAAC,IAAIA,QAAQ,CAACwF,UAAU,CAAC,MAAM,CAAC,IAAIxF,QAAQ,CAACwF,UAAU,CAAC,QAAQ,CAAC,EAAE;QACzG;MACF;MAEA,MAAMjG,IAAI,GAAGnH,MAAM,CAACmH,IAAI,CAAC1G,IAAI,CAACQ,cAAc,CAAC;MAC7C,IAAIoM,CAAC,GAAGlG,IAAI,CAACkB,MAAM;MACnB,OAAOgF,CAAC,EAAE,EAAE;QACV,MAAMhG,GAAG,GAAGF,IAAI,CAACkG,CAAC,CAAC;QACnB,IAAIhG,GAAG,CAACI,WAAW,CAAC,CAAC,KAAKG,QAAQ,EAAE;UAClCnH,IAAI,CAACQ,cAAc,CAACoG,GAAG,CAAC,IAAI,IAAI,GAAG6F,KAAK;UACxC;QACF;MACF;MACAzM,IAAI,CAACQ,cAAc,CAAC0G,MAAM,CAAC,GAAGuF,KAAK;IACrC;IAEA,IAAI3M,cAAcA,CAAA,EAAG;MACnB,OAAOtC,QAAQ,CAACmI,cAAc,CAAC3G,MAAM,CAACe,QAAQ,CAAC;IACjD;EACF;EAEAR,MAAM,CAACsN,cAAc,CAAC1N,cAAc,CAACQ,SAAS,EAAEmN,MAAM,CAACC,WAAW,EAAE;IAClEN,KAAK,EAAE,gBAAgB;IACvBO,QAAQ,EAAE,KAAK;IACfC,UAAU,EAAE,KAAK;IACjBC,YAAY,EAAE;EAChB,CAAC,CAAC;EAEFnP,4BAA4B,CAACoB,cAAc,CAACQ,SAAS,EAAE,CAAC,kBAAkB,CAAC,CAAC;EAE5EtC,YAAY,CAAC8B,cAAc,EAAE;IAC3B4D,MAAM,EAAE,CAAC;IACTW,MAAM,EAAE,CAAC;IACT6C,gBAAgB,EAAE,CAAC;IACnB/C,OAAO,EAAE,CAAC;IACVC,IAAI,EAAE;EACR,CAAC,CAAC;EAEF,SAAS+E,gBAAgBA,CAAC2E,GAAG,EAAErK,UAAU,EAAE;IACzC,MAAMd,UAAU,GAAGmL,GAAG,CAAC/P,UAAU,CAAC4E,UAAU,CAAC;IAC7C,IAAIA,UAAU,CAACc,UAAU,KAAKA,UAAU,EAAE;MACxC;IACF;IAEAd,UAAU,CAACc,UAAU,GAAGA,UAAU;IAElC,MAAMsK,qBAAqB,GAAG,IAAInO,KAAK,CAAC,kBAAkB,CAAC;IAC3DkO,GAAG,CAAC1B,aAAa,CAAC2B,qBAAqB,CAAC;EAC1C;EAEA,SAAStB,eAAeA,CAACqB,GAAG,EAAEvJ,QAAQ,EAAE;IACtC,MAAM5B,UAAU,GAAGmL,GAAG,CAAC/P,UAAU,CAAC4E,UAAU,CAAC;IAC7C,MAAMhC,IAAI,GAAGmN,GAAG,CAAC/P,UAAU,CAAC4C,IAAI,CAAC;IAEjC,MAAM;MAAEqN;IAAW,CAAC,GAAGzJ,QAAQ;IAE/B,IAAI0J,UAAU,GAAG,CAAC;IAElB,MAAMrB,OAAO,GAAG,CAAC,CAAC;IAClB,MAAMzJ,uBAAuB,GAAG,EAAE;IAClC,MAAM+K,SAAS,GAAG,CAAC,CAAC;IACpB,MAAM;MAAEC;IAAW,CAAC,GAAG5J,QAAQ;IAC/B,MAAMgJ,CAAC,GAAGa,MAAM,CAACD,UAAU,CAAC5F,MAAM,CAAC;IACnC,KAAK,IAAI8F,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,CAAC,EAAEc,CAAC,IAAI,CAAC,EAAE;MAC7B,MAAMxD,CAAC,GAAGsD,UAAU,CAACE,CAAC,CAAC;MACvB,MAAMC,EAAE,GAAGzD,CAAC,CAAClD,WAAW,CAAC,CAAC;MAC1B,MAAMmD,CAAC,GAAGqD,UAAU,CAACE,CAAC,GAAG,CAAC,CAAC;MAC3B,IAAIlP,qBAAqB,CAACmF,GAAG,CAACgK,EAAE,CAAC,EAAE;QACjC,IAAIJ,SAAS,CAACI,EAAE,CAAC,KAAKrN,SAAS,EAAE;UAC/B,OAAO2L,OAAO,CAACsB,SAAS,CAACI,EAAE,CAAC,CAAC;QAC/B;QACA1B,OAAO,CAAC/B,CAAC,CAAC,GAAGC,CAAC;MAChB,CAAC,MAAM,IAAIoD,SAAS,CAACI,EAAE,CAAC,KAAKrN,SAAS,EAAE;QACtC2L,OAAO,CAACsB,SAAS,CAACI,EAAE,CAAC,CAAC,IAAI,IAAI,GAAGxD,CAAC;MACpC,CAAC,MAAM;QACL8B,OAAO,CAAC/B,CAAC,CAAC,GAAGC,CAAC;MAChB;MACAoD,SAAS,CAACI,EAAE,CAAC,GAAGzD,CAAC;IACnB;IAEA,MAAM6B,UAAU,GAAG,IAAIlP,GAAG,CAAC+G,QAAQ,CAACoI,OAAO,CAACtL,GAAG,CAAC2H,IAAI,CAAC;IACrD,IAAIrG,UAAU,CAACH,MAAM,KAAKkK,UAAU,CAAClK,MAAM,IACvCkK,UAAU,CAACK,QAAQ,KAAK,OAAO,EAAE;MACnC,IAAI,CAAClP,QAAQ,CAACmP,gBAAgB,CAACc,GAAG,EAAEvJ,QAAQ,EAAE5D,IAAI,EAAEgC,UAAU,EAAEA,UAAU,CAACH,MAAM,CAAC,EAAE;QAClF;MACF;MACA,MAAM+L,OAAO,GAAGhK,QAAQ,CAACqI,OAAO,CAAC,+BAA+B,CAAC;MACjE,MAAM4B,IAAI,GAAG,IAAIvP,GAAG,CAACsP,OAAO,GAAGA,OAAO,CAACE,IAAI,CAAC,CAAC,CAAC9G,WAAW,CAAC,CAAC,CAAC+G,KAAK,CAAC7Q,QAAQ,CAAC8Q,yBAAyB,CAAC,GAAG,EAAE,CAAC;MAC3G,KAAK,MAAM9G,MAAM,IAAI+E,OAAO,EAAE;QAC5B,MAAM9E,QAAQ,GAAGD,MAAM,CAACF,WAAW,CAAC,CAAC;QACrC,IAAI,CAACvI,uBAAuB,CAACkF,GAAG,CAACwD,QAAQ,CAAC,IAAI,CAAC0G,IAAI,CAAClK,GAAG,CAACwD,QAAQ,CAAC,EAAE;UACjE3E,uBAAuB,CAACyL,IAAI,CAAC/G,MAAM,CAAC;QACtC;MACF;IACF;IAEA,KAAK,MAAMA,MAAM,IAAI+E,OAAO,EAAE;MAC5B,MAAM9E,QAAQ,GAAGD,MAAM,CAACF,WAAW,CAAC,CAAC;MACrC,IAAIzI,wBAAwB,CAACoF,GAAG,CAACwD,QAAQ,CAAC,EAAE;QAC1C3E,uBAAuB,CAACyL,IAAI,CAAC/G,MAAM,CAAC;MACtC;IACF;IAEAlF,UAAU,CAACa,WAAW,GAAGkJ,UAAU,CAAC1D,IAAI;IAExCrG,UAAU,CAACgB,MAAM,GAAGqK,UAAU;IAC9BrL,UAAU,CAACiB,UAAU,GAAGW,QAAQ,CAACsK,aAAa,IAAIzR,iBAAiB,CAAC4Q,UAAU,CAAC,IAAI,EAAE;IAErFrL,UAAU,CAACO,eAAe,GAAG0J,OAAO;IACpCjK,UAAU,CAACQ,uBAAuB,GAAGA,uBAAuB;IAE5D,MAAM0I,aAAa,GAAG9F,iBAAiB,CAAC+H,GAAG,EAAE,gBAAgB,CAAC,IAAI,GAAG;IACrE,MAAMhC,YAAY,GAAGC,QAAQ,CAACF,aAAa,CAAC,IAAI,CAAC;IACjD,MAAMG,WAAW,GAAG;MAAEC,gBAAgB,EAAE;IAAM,CAAC;IAC/C,IAAI6C,oBAAoB;IACxB,IAAIhD,YAAY,KAAK,CAAC,EAAE;MACtBE,WAAW,CAACE,KAAK,GAAGJ,YAAY;MAChCE,WAAW,CAACG,MAAM,GAAG,CAAC;MACtBH,WAAW,CAACC,gBAAgB,GAAG,IAAI;IACrC;IACA;IACAtJ,UAAU,CAACS,cAAc,GAAGmI,MAAM,CAACwD,KAAK,CAACpM,UAAU,CAACsB,cAAc,CAAC;IACnEtB,UAAU,CAACU,aAAa,GAAG,IAAI;IAC/BV,UAAU,CAACW,iBAAiB,GAAG,IAAI;IACnCX,UAAU,CAACY,gBAAgB,GAAG,IAAI;IAClC4F,gBAAgB,CAAC2E,GAAG,EAAEhO,cAAc,CAACoH,gBAAgB,CAAC;IAEtD,IAAI,CAACvE,UAAU,CAACM,MAAM,EAAE;MACtB;MACA;IACF;;IAEA;IACA;IACAsB,QAAQ,CAAC+H,EAAE,CAAC,MAAM,EAAE0C,KAAK,IAAI;MAC3Bf,UAAU,IAAIe,KAAK,CAACzG,MAAM;MAC1ByD,WAAW,CAACG,MAAM,GAAG8B,UAAU;IACjC,CAAC,CAAC;IAEFtL,UAAU,CAACM,MAAM,CAACqJ,EAAE,CAAC,MAAM,EAAE0C,KAAK,IAAI;MACpCrM,UAAU,CAACuB,sBAAsB,IAAI8K,KAAK,CAACzG,MAAM;MACjD,IAAI5F,UAAU,CAACuB,sBAAsB,IAAIvB,UAAU,CAACsB,cAAc,EAAE;QAClEtB,UAAU,CAACsB,cAAc,IAAI,CAAC;QAC9B,OAAOtB,UAAU,CAACuB,sBAAsB,IAAIvB,UAAU,CAACsB,cAAc,EAAE;UACrEtB,UAAU,CAACsB,cAAc,IAAI,CAAC;QAChC;QACA,MAAMgL,MAAM,GAAG1D,MAAM,CAACwD,KAAK,CAACpM,UAAU,CAACsB,cAAc,CAAC;QACtDtB,UAAU,CAACS,cAAc,CAAC8L,IAAI,CAACD,MAAM,EAAE,CAAC,EAAE,CAAC,EAAEtM,UAAU,CAACS,cAAc,CAACmF,MAAM,CAAC;QAC9E5F,UAAU,CAACS,cAAc,GAAG6L,MAAM;MACpC;MACAD,KAAK,CAACE,IAAI,CAACvM,UAAU,CAACS,cAAc,EAAET,UAAU,CAACuB,sBAAsB,GAAG8K,KAAK,CAACzG,MAAM,EAAE,CAAC,EAAEyG,KAAK,CAACzG,MAAM,CAAC;MACxG5F,UAAU,CAACU,aAAa,GAAG,IAAI;MAC/BV,UAAU,CAACW,iBAAiB,GAAG,IAAI;MACnCX,UAAU,CAACY,gBAAgB,GAAG,IAAI;MAElC,IAAIZ,UAAU,CAACc,UAAU,KAAK3D,cAAc,CAACoH,gBAAgB,EAAE;QAC7DvE,UAAU,CAACc,UAAU,GAAG3D,cAAc,CAACqE,OAAO;MAChD;MACA2J,GAAG,CAAC1B,aAAa,CAAC,IAAIxM,KAAK,CAAC,kBAAkB,CAAC,CAAC;MAEhD,IAAIoM,WAAW,CAACE,KAAK,KAAKF,WAAW,CAACG,MAAM,IAAIxJ,UAAU,CAACuB,sBAAsB,KAAK+J,UAAU,EAAE;QAChG,IAAIa,oBAAoB,KAAK9C,WAAW,CAACG,MAAM,EAAE;UAC/C;UACA;UACA2C,oBAAoB,GAAG9C,WAAW,CAACG,MAAM;UACzC2B,GAAG,CAAC1B,aAAa,CAAC,IAAIvM,aAAa,CAAC,UAAU,EAAEmM,WAAW,CAAC,CAAC;QAC/D;MACF;IACF,CAAC,CAAC;IACFrJ,UAAU,CAACM,MAAM,CAACqJ,EAAE,CAAC,KAAK,EAAE,MAAM;MAChC3F,YAAY,CAAChE,UAAU,CAACI,SAAS,CAAC;MAClCJ,UAAU,CAACK,SAAS,GAAG,IAAI;MAC3BL,UAAU,CAACG,YAAY,GAAG,CAAC;MAC3BH,UAAU,CAACM,MAAM,GAAG,IAAI;MACxB6K,GAAG,CAAC1B,aAAa,CAAC,IAAIvM,aAAa,CAAC,UAAU,EAAEmM,WAAW,CAAC,CAAC;MAC7D7C,gBAAgB,CAAC2E,GAAG,EAAEhO,cAAc,CAACsE,IAAI,CAAC;MAC1C0J,GAAG,CAAC1B,aAAa,CAAC,IAAIvM,aAAa,CAAC,MAAM,EAAEmM,WAAW,CAAC,CAAC;MACzD8B,GAAG,CAAC1B,aAAa,CAAC,IAAIvM,aAAa,CAAC,SAAS,EAAEmM,WAAW,CAAC,CAAC;IAC9D,CAAC,CAAC;EACJ;EAEA,SAASiB,yBAAyBA,CAACa,GAAG,EAAE;IACtC,MAAMnL,UAAU,GAAGmL,GAAG,CAAC/P,UAAU,CAAC4E,UAAU,CAAC;IAC7C,MAAM;MAAEM;IAAO,CAAC,GAAGN,UAAU;IAC7B,MAAM;MAAEnC;IAAO,CAAC,GAAGsN,GAAG;IAEtB,IAAI5B,KAAK,GAAG,CAAC;IACb,IAAID,gBAAgB,GAAG,KAAK;IAC5B,MAAM1D,MAAM,GAAGtF,MAAM,CAAC2J,OAAO,IAAIb,QAAQ,CAAClO,QAAQ,CAACuM,gBAAgB,CAACnH,MAAM,CAAC2J,OAAO,EAAE,gBAAgB,CAAC,CAAC;IACtG,IAAIrE,MAAM,EAAE;MACV2D,KAAK,GAAG3D,MAAM;MACd0D,gBAAgB,GAAG,IAAI;IACzB;IACA,MAAMkD,YAAY,GAAG;MACnBlD,gBAAgB;MAChBC,KAAK;MACLC,MAAM,EAAE;IACV,CAAC;IAED,IAAIxJ,UAAU,CAACoB,cAAc,EAAE;MAC7BvD,MAAM,CAAC4L,aAAa,CAAC,IAAIvM,aAAa,CAAC,WAAW,EAAEsP,YAAY,CAAC,CAAC;IACpE;IAEAlM,MAAM,CAACqJ,EAAE,CAAC,SAAS,EAAE8C,GAAG,IAAI;MAC1BA,GAAG,CAAC9C,EAAE,CAAC,UAAU,EAAE,MAAM;QACvB3J,UAAU,CAACmB,cAAc,GAAG,IAAI;QAEhC,IAAI,CAACnB,UAAU,CAACoB,cAAc,EAAE;UAC9B;QACF;QAEA,MAAMsL,QAAQ,GAAG;UACfpD,gBAAgB;UAChBC,KAAK;UACLC,MAAM,EAAED;QACV,CAAC;QACD1L,MAAM,CAAC4L,aAAa,CAAC,IAAIvM,aAAa,CAAC,UAAU,EAAEwP,QAAQ,CAAC,CAAC;QAC7D7O,MAAM,CAAC4L,aAAa,CAAC,IAAIvM,aAAa,CAAC,MAAM,EAAEwP,QAAQ,CAAC,CAAC;QACzD7O,MAAM,CAAC4L,aAAa,CAAC,IAAIvM,aAAa,CAAC,SAAS,EAAEwP,QAAQ,CAAC,CAAC;MAC9D,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;EAEA,OAAOvP,cAAc;AACvB,CAAC;AAED,SAASgF,aAAaA,CAACgJ,GAAG,EAAE;EAC1B,MAAMnN,IAAI,GAAGmN,GAAG,CAAC/P,UAAU,CAAC4C,IAAI,CAAC;EACjC,OAAOA,IAAI,CAAC4I,gBAAgB,IAAIxD,iBAAiB,CAAC+H,GAAG,EAAE,cAAc,CAAC;AACxE;AAEA,SAAS3I,YAAYA,CAAC2I,GAAG,EAAE;EACzB,MAAMnN,IAAI,GAAGmN,GAAG,CAAC/P,UAAU,CAAC4C,IAAI,CAAC;EACjC,IAAIA,IAAI,CAACiJ,eAAe,EAAE;IACxB,OAAOjJ,IAAI,CAACiJ,eAAe;EAC7B;EACA,MAAM0F,iBAAiB,GAAG3R,QAAQ,CAAC8H,KAAK,CAACM,iBAAiB,CAAC+H,GAAG,EAAE,cAAc,CAAC,CAAC;EAChF,IAAIwB,iBAAiB,EAAE;IACrB,OAAO7R,cAAc,CAACoM,WAAW,CAACyF,iBAAiB,CAAC5F,UAAU,CAACC,GAAG,CAAC,SAAS,CAAC,CAAC;EAChF;EACA,OAAO,IAAI;AACb;AAEA,SAAS5D,iBAAiBA,CAAC+H,GAAG,EAAEhG,QAAQ,EAAE;EACxC,MAAMnF,UAAU,GAAGmL,GAAG,CAAC/P,UAAU,CAAC4E,UAAU,CAAC;EAC7C,MAAM0E,IAAI,GAAGnH,MAAM,CAACmH,IAAI,CAAC1E,UAAU,CAACO,eAAe,CAAC;EACpD,IAAIqK,CAAC,GAAGlG,IAAI,CAACkB,MAAM;EACnB,OAAOgF,CAAC,EAAE,EAAE;IACV,MAAMhG,GAAG,GAAGF,IAAI,CAACkG,CAAC,CAAC;IACnB,IAAIhG,GAAG,CAACI,WAAW,CAAC,CAAC,KAAKG,QAAQ,EAAE;MAClC,OAAOnF,UAAU,CAACO,eAAe,CAACqE,GAAG,CAAC;IACxC;EACF;EACA,OAAO,IAAI;AACb;AAEA,SAAS8F,oBAAoBA,CAACD,KAAK,EAAE;EACnC,OAAOA,KAAK,CAACmC,OAAO,CAAC,sBAAsB,EAAE,EAAE,CAAC,CAACA,OAAO,CAAC,sBAAsB,EAAE,EAAE,CAAC;AACtF;AAEA,SAASzF,aAAaA,CAACvI,IAAI,EAAE;EAC3B;;EAEA,IAAIA,IAAI,KAAKN,SAAS,IAAIM,IAAI,KAAK,IAAI,EAAE;IACvC,OAAO,IAAI;EACb;EAEA,IAAIA,IAAI,YAAYiO,WAAW,IAAIA,WAAW,CAACC,MAAM,CAAClO,IAAI,CAAC,EAAE;IAC3D,OAAOA,IAAI;EACb;EAEA,MAAMmO,IAAI,GAAGvR,QAAQ,CAACmI,cAAc,CAAC/E,IAAI,CAAC;EAC1C,IAAImO,IAAI,EAAE;IACR;IACA,IAAIrR,IAAI,CAAC0L,MAAM,CAAC2F,IAAI,CAAC,IAAIpR,QAAQ,CAACyL,MAAM,CAAC2F,IAAI,CAAC,IAAItR,QAAQ,CAAC2L,MAAM,CAAC2F,IAAI,CAAC,EAAE;MACvE,OAAOA,IAAI;IACb;EACF;EAEA,OAAO9R,WAAW,CAAC6K,SAAS,CAAClH,IAAI,CAAC;AACpC;AAEA,SAAS0I,WAAWA,CAAC0F,QAAQ,EAAE;EAC7B;EACA;EACA;EACA;;EAEA,IAAItR,IAAI,CAAC0L,MAAM,CAAC4F,QAAQ,CAAC,EAAE;IACzB,OAAO;MACL/K,MAAM,EAAE+K,QAAQ,CAACC,OAAO;MACxB/K,WAAW,EAAE8K,QAAQ,CAAC5K,IAAI,KAAK,EAAE,GAAG,IAAI,GAAG4K,QAAQ,CAAC5K;IACtD,CAAC;EACH,CAAC,MAAM,IAAI4K,QAAQ,YAAYH,WAAW,EAAE;IAC1C,OAAO;MACL5K,MAAM,EAAE2G,MAAM,CAACC,IAAI,CAACmE,QAAQ,CAAC;MAC7B9K,WAAW,EAAE;IACf,CAAC;EACH,CAAC,MAAM,IAAI2K,WAAW,CAACC,MAAM,CAACE,QAAQ,CAAC,EAAE;IACvC,OAAO;MACL/K,MAAM,EAAE2G,MAAM,CAACC,IAAI,CAACmE,QAAQ,CAAC/K,MAAM,EAAE+K,QAAQ,CAAC1B,UAAU,EAAE0B,QAAQ,CAAClF,UAAU,CAAC;MAC9E5F,WAAW,EAAE;IACf,CAAC;EACH,CAAC,MAAM,IAAIvG,QAAQ,CAACyL,MAAM,CAAC4F,QAAQ,CAAC,EAAE;IACpC,MAAMnO,QAAQ,GAAG,EAAE;IACnB,KAAK,MAAMqO,KAAK,IAAIF,QAAQ,CAACG,QAAQ,EAAE;MACrC,IAAIpJ,GAAG;MACP,IAAIrI,IAAI,CAAC0L,MAAM,CAAC8F,KAAK,CAACzC,KAAK,CAAC,EAAE;QAC5B,MAAM2C,IAAI,GAAGF,KAAK,CAACzC,KAAK;QACxB1G,GAAG,GAAG;UACJsJ,IAAI,EAAEH,KAAK,CAACG,IAAI;UAChB5C,KAAK,EAAE2C,IAAI,CAACH,OAAO;UACnBjK,OAAO,EAAE;YACPsK,QAAQ,EAAEF,IAAI,CAACC,IAAI;YACnBnL,WAAW,EAAEkL,IAAI,CAAChL,IAAI;YACtBmL,WAAW,EAAEH,IAAI,CAACI;UACpB;QACF,CAAC;MACH,CAAC,MAAM;QACLzJ,GAAG,GAAGmJ,KAAK;MACb;MAEArO,QAAQ,CAACoN,IAAI,CAAClI,GAAG,CAAC;IACpB;IAEA,OAAO;MAAElF;IAAS,CAAC;EACrB;;EAEA;EACA,OAAO;IACLoD,MAAM,EAAE2G,MAAM,CAACC,IAAI,CAACmE,QAAQ,EAAE,OAAO,CAAC;IACtC9K,WAAW,EAAE;EACf,CAAC;AACH"},"metadata":{},"sourceType":"script","externalDependencies":[]}