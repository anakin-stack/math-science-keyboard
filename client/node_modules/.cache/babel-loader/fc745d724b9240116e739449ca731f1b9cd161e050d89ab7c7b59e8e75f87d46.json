{"ast":null,"code":"\"use strict\";\n\nconst vm = require(\"vm\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst {\n  reflectURLAttribute\n} = require(\"../../utils\");\nconst resourceLoader = require(\"../../browser/resource-loader\");\nconst reportException = require(\"../helpers/runtime-script-errors\");\nconst {\n  domSymbolTree\n} = require(\"../helpers/internal-constants\");\nconst {\n  asciiLowercase\n} = require(\"../helpers/strings\");\nconst {\n  childTextContent\n} = require(\"../helpers/text\");\nconst nodeTypes = require(\"../node-type\");\nconst jsMIMETypes = new Set([\"application/ecmascript\", \"application/javascript\", \"application/x-ecmascript\", \"application/x-javascript\", \"text/ecmascript\", \"text/javascript\", \"text/javascript1.0\", \"text/javascript1.1\", \"text/javascript1.2\", \"text/javascript1.3\", \"text/javascript1.4\", \"text/javascript1.5\", \"text/jscript\", \"text/livescript\", \"text/x-ecmascript\", \"text/x-javascript\"]);\nclass HTMLScriptElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._alreadyStarted = false;\n    this._parserInserted = false; // set by the parser\n  }\n\n  _attach() {\n    super._attach();\n\n    // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main\n    // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached\n    // then. Instead, we'll let it eval here.\n    if (!this._parserInserted || this._isMovingDueToDocumentWrite) {\n      this._eval();\n    }\n  }\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n    if (this._attached && !this._startedEval && name === \"src\" && oldValue === null && value !== null) {\n      resourceLoader.load(this, this.src, {\n        defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding\n      }, this._innerEval);\n    }\n  }\n  _poppedOffStackOfOpenElements() {\n    // This seems to roughly correspond to\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly\n    // don't implement the full semantics.\n    this._eval();\n  }\n\n  // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way\n  // to go before it's aligned.\n  _eval() {\n    if (this._alreadyStarted) {\n      return;\n    }\n\n    // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with\n    // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419\n    if (!this.hasAttribute(\"src\") && this.text.length === 0) {\n      return;\n    }\n    if (!this._attached) {\n      return;\n    }\n    const scriptBlocksTypeString = this._getTypeString();\n    const type = getType(scriptBlocksTypeString);\n    if (type !== \"classic\") {\n      // TODO: implement modules, and then change the check to `type === null`.\n      return;\n    }\n    this._alreadyStarted = true;\n\n    // Equivalent to the spec's \"scripting is disabled\" check.\n    if (!this._ownerDocument._defaultView || this._ownerDocument._defaultView._runScripts !== \"dangerously\") {\n      return;\n    }\n\n    // TODO: implement nomodule here, **but only after we support modules**.\n\n    // At this point we completely depart from the spec.\n\n    if (this.hasAttribute(\"src\")) {\n      resourceLoader.load(this, this.src, {\n        defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding\n      }, this._innerEval);\n    } else {\n      resourceLoader.enqueue(this, this._ownerDocument.URL, this._innerEval)(null, this.text);\n    }\n  }\n  _innerEval(text, filename) {\n    this._ownerDocument._writeAfterElement = this;\n    processJavaScript(this, text, filename);\n    delete this._ownerDocument._writeAfterElement;\n  }\n  _getTypeString() {\n    const typeAttr = this.getAttribute(\"type\");\n    const langAttr = this.getAttribute(\"language\");\n    if (typeAttr === \"\") {\n      return \"text/javascript\";\n    }\n    if (typeAttr === null && langAttr === \"\") {\n      return \"text/javascript\";\n    }\n    if (typeAttr === null && langAttr === null) {\n      return \"text/javascript\";\n    }\n    if (typeAttr !== null) {\n      return typeAttr.trim();\n    }\n    if (langAttr !== null) {\n      return \"text/\" + langAttr;\n    }\n    return null;\n  }\n  get text() {\n    return childTextContent(this);\n  }\n  set text(text) {\n    this.textContent = text;\n  }\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n  set src(V) {\n    this.setAttribute(\"src\", V);\n  }\n}\nfunction processJavaScript(element, code, filename) {\n  const document = element.ownerDocument;\n  const window = document && document._global;\n  if (window) {\n    document._currentScript = element;\n    let lineOffset = 0;\n    if (!element.src) {\n      for (const child of domSymbolTree.childrenIterator(element)) {\n        if (child.nodeType === nodeTypes.TEXT_NODE) {\n          if (child.__location) {\n            lineOffset = child.__location.line - 1;\n          }\n          break;\n        }\n      }\n    }\n    try {\n      vm.runInContext(code, window, {\n        filename,\n        lineOffset,\n        displayErrors: false\n      });\n    } catch (e) {\n      reportException(window, e, filename);\n    } finally {\n      document._currentScript = null;\n    }\n  }\n}\nfunction getType(typeString) {\n  const lowercased = asciiLowercase(typeString);\n  // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.\n  // That is, the type=\"\" attribute is not really related to MIME types at all.\n  if (jsMIMETypes.has(lowercased)) {\n    return \"classic\";\n  }\n  if (lowercased === \"module\") {\n    return \"module\";\n  }\n  return null;\n}\nmodule.exports = {\n  implementation: HTMLScriptElementImpl\n};","map":{"version":3,"names":["vm","require","whatwgEncoding","HTMLElementImpl","implementation","reflectURLAttribute","resourceLoader","reportException","domSymbolTree","asciiLowercase","childTextContent","nodeTypes","jsMIMETypes","Set","HTMLScriptElementImpl","constructor","args","privateData","_alreadyStarted","_parserInserted","_attach","_isMovingDueToDocumentWrite","_eval","_attrModified","name","value","oldValue","_attached","_startedEval","load","src","defaultEncoding","labelToName","getAttribute","_ownerDocument","_encoding","_innerEval","_poppedOffStackOfOpenElements","hasAttribute","text","length","scriptBlocksTypeString","_getTypeString","type","getType","_defaultView","_runScripts","enqueue","URL","filename","_writeAfterElement","processJavaScript","typeAttr","langAttr","trim","textContent","V","setAttribute","element","code","document","ownerDocument","window","_global","_currentScript","lineOffset","child","childrenIterator","nodeType","TEXT_NODE","__location","line","runInContext","displayErrors","e","typeString","lowercased","has","module","exports"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/jsdom/lib/jsdom/living/nodes/HTMLScriptElement-impl.js"],"sourcesContent":["\"use strict\";\nconst vm = require(\"vm\");\nconst whatwgEncoding = require(\"whatwg-encoding\");\n\nconst HTMLElementImpl = require(\"./HTMLElement-impl\").implementation;\nconst { reflectURLAttribute } = require(\"../../utils\");\nconst resourceLoader = require(\"../../browser/resource-loader\");\nconst reportException = require(\"../helpers/runtime-script-errors\");\nconst { domSymbolTree } = require(\"../helpers/internal-constants\");\nconst { asciiLowercase } = require(\"../helpers/strings\");\nconst { childTextContent } = require(\"../helpers/text\");\nconst nodeTypes = require(\"../node-type\");\n\nconst jsMIMETypes = new Set([\n  \"application/ecmascript\",\n  \"application/javascript\",\n  \"application/x-ecmascript\",\n  \"application/x-javascript\",\n  \"text/ecmascript\",\n  \"text/javascript\",\n  \"text/javascript1.0\",\n  \"text/javascript1.1\",\n  \"text/javascript1.2\",\n  \"text/javascript1.3\",\n  \"text/javascript1.4\",\n  \"text/javascript1.5\",\n  \"text/jscript\",\n  \"text/livescript\",\n  \"text/x-ecmascript\",\n  \"text/x-javascript\"\n]);\n\nclass HTMLScriptElementImpl extends HTMLElementImpl {\n  constructor(args, privateData) {\n    super(args, privateData);\n    this._alreadyStarted = false;\n    this._parserInserted = false; // set by the parser\n  }\n\n  _attach() {\n    super._attach();\n\n\n    // In our current terribly-hacky document.write() implementation, we parse in a div them move elements into the main\n    // document. Thus _eval() will bail early when it gets in _poppedOffStackOfOpenElements(), since we're not attached\n    // then. Instead, we'll let it eval here.\n    if (!this._parserInserted || this._isMovingDueToDocumentWrite) {\n      this._eval();\n    }\n  }\n\n  _attrModified(name, value, oldValue) {\n    super._attrModified(name, value, oldValue);\n\n    if (this._attached && !this._startedEval && name === \"src\" && oldValue === null && value !== null) {\n      resourceLoader.load(\n        this,\n        this.src,\n        { defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding },\n        this._innerEval\n      );\n    }\n  }\n\n  _poppedOffStackOfOpenElements() {\n    // This seems to roughly correspond to\n    // https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-incdata:prepare-a-script, although we certainly\n    // don't implement the full semantics.\n    this._eval();\n  }\n\n  // Vaguely similar to https://html.spec.whatwg.org/multipage/scripting.html#prepare-a-script, but we have a long way\n  // to go before it's aligned.\n  _eval() {\n    if (this._alreadyStarted) {\n      return;\n    }\n\n    // TODO: this text check doesn't seem completely the same as the spec, which e.g. will try to execute scripts with\n    // child element nodes. Spec bug? https://github.com/whatwg/html/issues/3419\n    if (!this.hasAttribute(\"src\") && this.text.length === 0) {\n      return;\n    }\n\n    if (!this._attached) {\n      return;\n    }\n\n    const scriptBlocksTypeString = this._getTypeString();\n    const type = getType(scriptBlocksTypeString);\n\n    if (type !== \"classic\") {\n      // TODO: implement modules, and then change the check to `type === null`.\n      return;\n    }\n\n    this._alreadyStarted = true;\n\n    // Equivalent to the spec's \"scripting is disabled\" check.\n    if (!this._ownerDocument._defaultView || this._ownerDocument._defaultView._runScripts !== \"dangerously\") {\n      return;\n    }\n\n    // TODO: implement nomodule here, **but only after we support modules**.\n\n    // At this point we completely depart from the spec.\n\n    if (this.hasAttribute(\"src\")) {\n      resourceLoader.load(\n        this,\n        this.src,\n        { defaultEncoding: whatwgEncoding.labelToName(this.getAttribute(\"charset\")) || this._ownerDocument._encoding },\n        this._innerEval\n      );\n    } else {\n      resourceLoader.enqueue(this, this._ownerDocument.URL, this._innerEval)(null, this.text);\n    }\n  }\n\n  _innerEval(text, filename) {\n    this._ownerDocument._writeAfterElement = this;\n    processJavaScript(this, text, filename);\n    delete this._ownerDocument._writeAfterElement;\n  }\n\n  _getTypeString() {\n    const typeAttr = this.getAttribute(\"type\");\n    const langAttr = this.getAttribute(\"language\");\n\n    if (typeAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === \"\") {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr === null && langAttr === null) {\n      return \"text/javascript\";\n    }\n\n    if (typeAttr !== null) {\n      return typeAttr.trim();\n    }\n\n    if (langAttr !== null) {\n      return \"text/\" + langAttr;\n    }\n\n    return null;\n  }\n\n  get text() {\n    return childTextContent(this);\n  }\n\n  set text(text) {\n    this.textContent = text;\n  }\n\n  get src() {\n    return reflectURLAttribute(this, \"src\");\n  }\n\n  set src(V) {\n    this.setAttribute(\"src\", V);\n  }\n}\n\nfunction processJavaScript(element, code, filename) {\n  const document = element.ownerDocument;\n  const window = document && document._global;\n\n  if (window) {\n    document._currentScript = element;\n\n    let lineOffset = 0;\n    if (!element.src) {\n      for (const child of domSymbolTree.childrenIterator(element)) {\n        if (child.nodeType === nodeTypes.TEXT_NODE) {\n          if (child.__location) {\n            lineOffset = child.__location.line - 1;\n          }\n          break;\n        }\n      }\n    }\n\n    try {\n      vm.runInContext(code, window, { filename, lineOffset, displayErrors: false });\n    } catch (e) {\n      reportException(window, e, filename);\n    } finally {\n      document._currentScript = null;\n    }\n  }\n}\n\nfunction getType(typeString) {\n  const lowercased = asciiLowercase(typeString);\n  // Cannot use whatwg-mimetype parsing because that strips whitespace. The spec demands a strict string comparison.\n  // That is, the type=\"\" attribute is not really related to MIME types at all.\n  if (jsMIMETypes.has(lowercased)) {\n    return \"classic\";\n  }\n  if (lowercased === \"module\") {\n    return \"module\";\n  }\n  return null;\n}\n\nmodule.exports = {\n  implementation: HTMLScriptElementImpl\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}