{"ast":null,"code":"\"use strict\";\n\nconst punycode = require(\"punycode\");\nconst regexes = require(\"./lib/regexes.js\");\nconst mappingTable = require(\"./lib/mappingTable.json\");\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/.test(str);\n}\nfunction findStatus(val, _ref) {\n  let {\n    useSTD3ASCIIRules\n  } = _ref;\n  let start = 0;\n  let end = mappingTable.length - 1;\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n    const target = mappingTable[mid];\n    if (target[0][0] <= val && target[0][1] >= val) {\n      if (target[1].startsWith(\"disallowed_STD3_\")) {\n        const newStatus = useSTD3ASCIIRules ? \"disallowed\" : target[1].slice(16);\n        return [newStatus, ...target.slice(2)];\n      }\n      return target.slice(1);\n    } else if (target[0][0] > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n  return null;\n}\nfunction mapChars(domainName, _ref2) {\n  let {\n    useSTD3ASCIIRules,\n    processingOption\n  } = _ref2;\n  let hasError = false;\n  let processed = \"\";\n  for (const ch of domainName) {\n    const [status, mapping] = findStatus(ch.codePointAt(0), {\n      useSTD3ASCIIRules\n    });\n    switch (status) {\n      case \"disallowed\":\n        hasError = true;\n        processed += ch;\n        break;\n      case \"ignored\":\n        break;\n      case \"mapped\":\n        processed += mapping;\n        break;\n      case \"deviation\":\n        if (processingOption === \"transitional\") {\n          processed += mapping;\n        } else {\n          processed += ch;\n        }\n        break;\n      case \"valid\":\n        processed += ch;\n        break;\n    }\n  }\n  return {\n    string: processed,\n    error: hasError\n  };\n}\nfunction validateLabel(label, _ref3) {\n  let {\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    processingOption,\n    useSTD3ASCIIRules\n  } = _ref3;\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n  const codePoints = Array.from(label);\n  if (checkHyphens) {\n    if (codePoints[2] === \"-\" && codePoints[3] === \"-\" || label.startsWith(\"-\") || label.endsWith(\"-\")) {\n      return false;\n    }\n  }\n  if (label.includes(\".\") || codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0])) {\n    return false;\n  }\n  for (const ch of codePoints) {\n    const [status] = findStatus(ch.codePointAt(0), {\n      useSTD3ASCIIRules\n    });\n    if (processingOption === \"transitional\" && status !== \"valid\" || processingOption === \"nontransitional\" && status !== \"valid\" && status !== \"deviation\") {\n      return false;\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5892#appendix-A\n  if (checkJoiners) {\n    let last = 0;\n    for (const [i, ch] of codePoints.entries()) {\n      if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n        if (i > 0) {\n          if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n            continue;\n          }\n          if (ch === \"\\u200C\") {\n            // TODO: make this more efficient\n            const next = codePoints.indexOf(\"\\u200C\", i + 1);\n            const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n            if (regexes.validZWNJ.test(test.join(\"\"))) {\n              last = i + 1;\n              continue;\n            }\n          }\n        }\n        return false;\n      }\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5893#section-2\n  if (checkBidi) {\n    let rtl;\n\n    // 1\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) || !regexes.bidiS3.test(label) || regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label)) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) || !regexes.bidiS6.test(label)) {\n      // 5-6\n      return false;\n    }\n  }\n  return true;\n}\nfunction isBidiDomain(labels) {\n  const domain = labels.map(label => {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\nfunction processing(domainName, options) {\n  const {\n    processingOption\n  } = options;\n\n  // 1. Map.\n  let {\n    string,\n    error\n  } = mapChars(domainName, options);\n\n  // 2. Normalize.\n  string = string.normalize(\"NFC\");\n\n  // 3. Break.\n  const labels = string.split(\".\");\n  const isBidi = isBidiDomain(labels);\n\n  // 4. Convert/Validate.\n  for (const [i, origLabel] of labels.entries()) {\n    let label = origLabel;\n    let curProcessing = processingOption;\n    if (label.startsWith(\"xn--\")) {\n      try {\n        label = punycode.decode(label.substring(4));\n        labels[i] = label;\n      } catch (err) {\n        error = true;\n        continue;\n      }\n      curProcessing = \"nontransitional\";\n    }\n\n    // No need to validate if we already know there is an error.\n    if (error) {\n      continue;\n    }\n    const validation = validateLabel(label, Object.assign({}, options, {\n      processingOption: curProcessing,\n      checkBidi: options.checkBidi && isBidi\n    }));\n    if (!validation) {\n      error = true;\n    }\n  }\n  return {\n    string: labels.join(\".\"),\n    error\n  };\n}\nfunction toASCII(domainName) {\n  let {\n    checkHyphens = false,\n    checkBidi = false,\n    checkJoiners = false,\n    useSTD3ASCIIRules = false,\n    processingOption = \"nontransitional\",\n    verifyDNSLength = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  let labels = result.string.split(\".\");\n  labels = labels.map(l => {\n    if (containsNonASCII(l)) {\n      try {\n        return \"xn--\" + punycode.encode(l);\n      } catch (e) {\n        result.error = true;\n      }\n    }\n    return l;\n  });\n  if (verifyDNSLength) {\n    const total = labels.join(\".\").length;\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n    for (let i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n  if (result.error) {\n    return null;\n  }\n  return labels.join(\".\");\n}\nfunction toUnicode(domainName) {\n  let {\n    checkHyphens = false,\n    checkBidi = false,\n    checkJoiners = false,\n    useSTD3ASCIIRules = false\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  const result = processing(domainName, {\n    processingOption: \"nontransitional\",\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\nmodule.exports = {\n  toASCII,\n  toUnicode\n};","map":{"version":3,"names":["punycode","require","regexes","mappingTable","containsNonASCII","str","test","findStatus","val","_ref","useSTD3ASCIIRules","start","end","length","mid","Math","floor","target","startsWith","newStatus","slice","mapChars","domainName","_ref2","processingOption","hasError","processed","ch","status","mapping","codePointAt","string","error","validateLabel","label","_ref3","checkHyphens","checkBidi","checkJoiners","normalize","codePoints","Array","from","endsWith","includes","combiningMarks","last","i","entries","combiningClassVirama","next","indexOf","validZWNJ","join","rtl","bidiS1LTR","bidiS1RTL","bidiS2","bidiS3","bidiS4EN","bidiS4AN","bidiS5","bidiS6","isBidiDomain","labels","domain","map","decode","substring","err","bidiDomain","processing","options","split","isBidi","origLabel","curProcessing","validation","Object","assign","toASCII","verifyDNSLength","arguments","undefined","RangeError","result","l","encode","e","total","toUnicode","module","exports"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/tr46/index.js"],"sourcesContent":["\"use strict\";\n\nconst punycode = require(\"punycode\");\nconst regexes = require(\"./lib/regexes.js\");\nconst mappingTable = require(\"./lib/mappingTable.json\");\n\nfunction containsNonASCII(str) {\n  return /[^\\x00-\\x7F]/.test(str);\n}\n\nfunction findStatus(val, { useSTD3ASCIIRules }) {\n  let start = 0;\n  let end = mappingTable.length - 1;\n\n  while (start <= end) {\n    const mid = Math.floor((start + end) / 2);\n\n    const target = mappingTable[mid];\n    if (target[0][0] <= val && target[0][1] >= val) {\n      if (target[1].startsWith(\"disallowed_STD3_\")) {\n        const newStatus = useSTD3ASCIIRules ? \"disallowed\" : target[1].slice(16);\n        return [newStatus, ...target.slice(2)];\n      }\n      return target.slice(1);\n    } else if (target[0][0] > val) {\n      end = mid - 1;\n    } else {\n      start = mid + 1;\n    }\n  }\n\n  return null;\n}\n\nfunction mapChars(domainName, { useSTD3ASCIIRules, processingOption }) {\n  let hasError = false;\n  let processed = \"\";\n\n  for (const ch of domainName) {\n    const [status, mapping] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n\n    switch (status) {\n      case \"disallowed\":\n        hasError = true;\n        processed += ch;\n        break;\n      case \"ignored\":\n        break;\n      case \"mapped\":\n        processed += mapping;\n        break;\n      case \"deviation\":\n        if (processingOption === \"transitional\") {\n          processed += mapping;\n        } else {\n          processed += ch;\n        }\n        break;\n      case \"valid\":\n        processed += ch;\n        break;\n    }\n  }\n\n  return {\n    string: processed,\n    error: hasError\n  };\n}\n\nfunction validateLabel(label, { checkHyphens, checkBidi, checkJoiners, processingOption, useSTD3ASCIIRules }) {\n  if (label.normalize(\"NFC\") !== label) {\n    return false;\n  }\n\n  const codePoints = Array.from(label);\n\n  if (checkHyphens) {\n    if ((codePoints[2] === \"-\" && codePoints[3] === \"-\") ||\n        (label.startsWith(\"-\") || label.endsWith(\"-\"))) {\n      return false;\n    }\n  }\n\n  if (label.includes(\".\") ||\n      (codePoints.length > 0 && regexes.combiningMarks.test(codePoints[0]))) {\n    return false;\n  }\n\n  for (const ch of codePoints) {\n    const [status] = findStatus(ch.codePointAt(0), { useSTD3ASCIIRules });\n    if ((processingOption === \"transitional\" && status !== \"valid\") ||\n        (processingOption === \"nontransitional\" &&\n         status !== \"valid\" && status !== \"deviation\")) {\n      return false;\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5892#appendix-A\n  if (checkJoiners) {\n    let last = 0;\n    for (const [i, ch] of codePoints.entries()) {\n      if (ch === \"\\u200C\" || ch === \"\\u200D\") {\n        if (i > 0) {\n          if (regexes.combiningClassVirama.test(codePoints[i - 1])) {\n            continue;\n          }\n          if (ch === \"\\u200C\") {\n            // TODO: make this more efficient\n            const next = codePoints.indexOf(\"\\u200C\", i + 1);\n            const test = next < 0 ? codePoints.slice(last) : codePoints.slice(last, next);\n            if (regexes.validZWNJ.test(test.join(\"\"))) {\n              last = i + 1;\n              continue;\n            }\n          }\n        }\n        return false;\n      }\n    }\n  }\n\n  // https://tools.ietf.org/html/rfc5893#section-2\n  if (checkBidi) {\n    let rtl;\n\n    // 1\n    if (regexes.bidiS1LTR.test(codePoints[0])) {\n      rtl = false;\n    } else if (regexes.bidiS1RTL.test(codePoints[0])) {\n      rtl = true;\n    } else {\n      return false;\n    }\n\n    if (rtl) {\n      // 2-4\n      if (!regexes.bidiS2.test(label) ||\n          !regexes.bidiS3.test(label) ||\n          (regexes.bidiS4EN.test(label) && regexes.bidiS4AN.test(label))) {\n        return false;\n      }\n    } else if (!regexes.bidiS5.test(label) ||\n               !regexes.bidiS6.test(label)) { // 5-6\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction isBidiDomain(labels) {\n  const domain = labels.map(label => {\n    if (label.startsWith(\"xn--\")) {\n      try {\n        return punycode.decode(label.substring(4));\n      } catch (err) {\n        return \"\";\n      }\n    }\n    return label;\n  }).join(\".\");\n  return regexes.bidiDomain.test(domain);\n}\n\nfunction processing(domainName, options) {\n  const { processingOption } = options;\n\n  // 1. Map.\n  let { string, error } = mapChars(domainName, options);\n\n  // 2. Normalize.\n  string = string.normalize(\"NFC\");\n\n  // 3. Break.\n  const labels = string.split(\".\");\n  const isBidi = isBidiDomain(labels);\n\n  // 4. Convert/Validate.\n  for (const [i, origLabel] of labels.entries()) {\n    let label = origLabel;\n    let curProcessing = processingOption;\n    if (label.startsWith(\"xn--\")) {\n      try {\n        label = punycode.decode(label.substring(4));\n        labels[i] = label;\n      } catch (err) {\n        error = true;\n        continue;\n      }\n      curProcessing = \"nontransitional\";\n    }\n\n    // No need to validate if we already know there is an error.\n    if (error) {\n      continue;\n    }\n    const validation = validateLabel(label, Object.assign({}, options, {\n      processingOption: curProcessing,\n      checkBidi: options.checkBidi && isBidi\n    }));\n    if (!validation) {\n      error = true;\n    }\n  }\n\n  return {\n    string: labels.join(\".\"),\n    error\n  };\n}\n\nfunction toASCII(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false,\n  processingOption = \"nontransitional\",\n  verifyDNSLength = false\n} = {}) {\n  if (processingOption !== \"transitional\" && processingOption !== \"nontransitional\") {\n    throw new RangeError(\"processingOption must be either transitional or nontransitional\");\n  }\n\n  const result = processing(domainName, {\n    processingOption,\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n  let labels = result.string.split(\".\");\n  labels = labels.map(l => {\n    if (containsNonASCII(l)) {\n      try {\n        return \"xn--\" + punycode.encode(l);\n      } catch (e) {\n        result.error = true;\n      }\n    }\n    return l;\n  });\n\n  if (verifyDNSLength) {\n    const total = labels.join(\".\").length;\n    if (total > 253 || total === 0) {\n      result.error = true;\n    }\n\n    for (let i = 0; i < labels.length; ++i) {\n      if (labels[i].length > 63 || labels[i].length === 0) {\n        result.error = true;\n        break;\n      }\n    }\n  }\n\n  if (result.error) {\n    return null;\n  }\n  return labels.join(\".\");\n}\n\nfunction toUnicode(domainName, {\n  checkHyphens = false,\n  checkBidi = false,\n  checkJoiners = false,\n  useSTD3ASCIIRules = false\n} = {}) {\n  const result = processing(domainName, {\n    processingOption: \"nontransitional\",\n    checkHyphens,\n    checkBidi,\n    checkJoiners,\n    useSTD3ASCIIRules\n  });\n\n  return {\n    domain: result.string,\n    error: result.error\n  };\n}\n\nmodule.exports = {\n  toASCII,\n  toUnicode\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}