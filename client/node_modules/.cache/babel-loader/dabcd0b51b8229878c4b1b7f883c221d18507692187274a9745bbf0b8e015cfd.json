{"ast":null,"code":"\"use strict\";\n\nconst {\n  isASCIIHex\n} = require(\"./infra\");\nfunction strictlySplitByteSequence(buf, cp) {\n  const list = [];\n  let last = 0;\n  let i = buf.indexOf(cp);\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n  return list;\n}\nfunction replaceByteInByteSequence(buf, from, to) {\n  let i = buf.indexOf(from);\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n  return buf;\n}\nfunction percentEncode(c) {\n  let hex = c.toString(16).toUpperCase();\n  if (hex.length === 1) {\n    hex = \"0\" + hex;\n  }\n  return \"%\" + hex;\n}\nfunction percentDecode(input) {\n  const output = Buffer.alloc(input.byteLength);\n  let ptr = 0;\n  for (let i = 0; i < input.length; ++i) {\n    if (input[i] !== 37 || !isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2])) {\n      output[ptr++] = input[i];\n    } else {\n      output[ptr++] = parseInt(input.slice(i + 1, i + 3).toString(), 16);\n      i += 2;\n    }\n  }\n  return output.slice(0, ptr);\n}\nfunction parseUrlencoded(input) {\n  const sequences = strictlySplitByteSequence(input, 38);\n  const output = [];\n  for (const bytes of sequences) {\n    if (bytes.length === 0) {\n      continue;\n    }\n    let name;\n    let value;\n    const indexOfEqual = bytes.indexOf(61);\n    if (indexOfEqual >= 0) {\n      name = bytes.slice(0, indexOfEqual);\n      value = bytes.slice(indexOfEqual + 1);\n    } else {\n      name = bytes;\n      value = Buffer.alloc(0);\n    }\n    name = replaceByteInByteSequence(Buffer.from(name), 43, 32);\n    value = replaceByteInByteSequence(Buffer.from(value), 43, 32);\n    output.push([percentDecode(name).toString(), percentDecode(value).toString()]);\n  }\n  return output;\n}\nfunction serializeUrlencodedByte(input) {\n  let output = \"\";\n  for (const byte of input) {\n    if (byte === 32) {\n      output += \"+\";\n    } else if (byte === 42 || byte === 45 || byte === 46 || byte >= 48 && byte <= 57 || byte >= 65 && byte <= 90 || byte === 95 || byte >= 97 && byte <= 122) {\n      output += String.fromCodePoint(byte);\n    } else {\n      output += percentEncode(byte);\n    }\n  }\n  return output;\n}\nfunction serializeUrlencoded(tuples) {\n  let encodingOverride = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n  let encoding = \"utf-8\";\n  if (encodingOverride !== undefined) {\n    encoding = encodingOverride;\n  }\n  let output = \"\";\n  for (const [i, tuple] of tuples.entries()) {\n    // TODO: handle encoding override\n    const name = serializeUrlencodedByte(Buffer.from(tuple[0]));\n    let value = tuple[1];\n    if (tuple.length > 2 && tuple[2] !== undefined) {\n      if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n        value = encoding;\n      } else if (tuple[2] === \"file\") {\n        // value is a File object\n        value = value.name;\n      }\n    }\n    value = serializeUrlencodedByte(Buffer.from(value));\n    if (i !== 0) {\n      output += \"&\";\n    }\n    output += `${name}=${value}`;\n  }\n  return output;\n}\nmodule.exports = {\n  percentEncode,\n  percentDecode,\n  // application/x-www-form-urlencoded string parser\n  parseUrlencoded(input) {\n    return parseUrlencoded(Buffer.from(input));\n  },\n  // application/x-www-form-urlencoded serializer\n  serializeUrlencoded\n};","map":{"version":3,"names":["isASCIIHex","require","strictlySplitByteSequence","buf","cp","list","last","i","indexOf","push","slice","length","replaceByteInByteSequence","from","to","percentEncode","c","hex","toString","toUpperCase","percentDecode","input","output","Buffer","alloc","byteLength","ptr","parseInt","parseUrlencoded","sequences","bytes","name","value","indexOfEqual","serializeUrlencodedByte","byte","String","fromCodePoint","serializeUrlencoded","tuples","encodingOverride","arguments","undefined","encoding","tuple","entries","module","exports"],"sources":["G:/scientificKeyboard/keyboard/node_modules/mathjax-node/node_modules/data-urls/node_modules/whatwg-url/lib/urlencoded.js"],"sourcesContent":["\"use strict\";\nconst { isASCIIHex } = require(\"./infra\");\n\nfunction strictlySplitByteSequence(buf, cp) {\n  const list = [];\n  let last = 0;\n  let i = buf.indexOf(cp);\n  while (i >= 0) {\n    list.push(buf.slice(last, i));\n    last = i + 1;\n    i = buf.indexOf(cp, last);\n  }\n  if (last !== buf.length) {\n    list.push(buf.slice(last));\n  }\n  return list;\n}\n\nfunction replaceByteInByteSequence(buf, from, to) {\n  let i = buf.indexOf(from);\n  while (i >= 0) {\n    buf[i] = to;\n    i = buf.indexOf(from, i + 1);\n  }\n  return buf;\n}\n\nfunction percentEncode(c) {\n  let hex = c.toString(16).toUpperCase();\n  if (hex.length === 1) {\n    hex = \"0\" + hex;\n  }\n\n  return \"%\" + hex;\n}\n\nfunction percentDecode(input) {\n  const output = Buffer.alloc(input.byteLength);\n  let ptr = 0;\n  for (let i = 0; i < input.length; ++i) {\n    if (input[i] !== 37 || !isASCIIHex(input[i + 1]) || !isASCIIHex(input[i + 2])) {\n      output[ptr++] = input[i];\n    } else {\n      output[ptr++] = parseInt(input.slice(i + 1, i + 3).toString(), 16);\n      i += 2;\n    }\n  }\n  return output.slice(0, ptr);\n}\n\nfunction parseUrlencoded(input) {\n  const sequences = strictlySplitByteSequence(input, 38);\n  const output = [];\n  for (const bytes of sequences) {\n    if (bytes.length === 0) {\n      continue;\n    }\n\n    let name;\n    let value;\n    const indexOfEqual = bytes.indexOf(61);\n\n    if (indexOfEqual >= 0) {\n      name = bytes.slice(0, indexOfEqual);\n      value = bytes.slice(indexOfEqual + 1);\n    } else {\n      name = bytes;\n      value = Buffer.alloc(0);\n    }\n\n    name = replaceByteInByteSequence(Buffer.from(name), 43, 32);\n    value = replaceByteInByteSequence(Buffer.from(value), 43, 32);\n\n    output.push([percentDecode(name).toString(), percentDecode(value).toString()]);\n  }\n  return output;\n}\n\nfunction serializeUrlencodedByte(input) {\n  let output = \"\";\n  for (const byte of input) {\n    if (byte === 32) {\n      output += \"+\";\n    } else if (byte === 42 ||\n               byte === 45 ||\n               byte === 46 ||\n               (byte >= 48 && byte <= 57) ||\n               (byte >= 65 && byte <= 90) ||\n               byte === 95 ||\n               (byte >= 97 && byte <= 122)) {\n      output += String.fromCodePoint(byte);\n    } else {\n      output += percentEncode(byte);\n    }\n  }\n  return output;\n}\n\nfunction serializeUrlencoded(tuples, encodingOverride = undefined) {\n  let encoding = \"utf-8\";\n  if (encodingOverride !== undefined) {\n    encoding = encodingOverride;\n  }\n\n  let output = \"\";\n  for (const [i, tuple] of tuples.entries()) {\n    // TODO: handle encoding override\n    const name = serializeUrlencodedByte(Buffer.from(tuple[0]));\n    let value = tuple[1];\n    if (tuple.length > 2 && tuple[2] !== undefined) {\n      if (tuple[2] === \"hidden\" && name === \"_charset_\") {\n        value = encoding;\n      } else if (tuple[2] === \"file\") {\n        // value is a File object\n        value = value.name;\n      }\n    }\n    value = serializeUrlencodedByte(Buffer.from(value));\n    if (i !== 0) {\n      output += \"&\";\n    }\n    output += `${name}=${value}`;\n  }\n  return output;\n}\n\nmodule.exports = {\n  percentEncode,\n  percentDecode,\n\n  // application/x-www-form-urlencoded string parser\n  parseUrlencoded(input) {\n    return parseUrlencoded(Buffer.from(input));\n  },\n\n  // application/x-www-form-urlencoded serializer\n  serializeUrlencoded\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}